!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("gladiaio_sdk",[],t):"object"==typeof exports?exports.gladiaio_sdk=t():e.gladiaio_sdk=t()}(this,(()=>(()=>{var e={8917:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var o=n(9669),r=n.n(o),a=n(6026),i=n.n(a),s=n(5327),_=n.n(s),p=n(4097),l=n.n(p),c=n(4867);async function u(e){const t=function(e){const t=new Headers(e.headers);if(e.auth){const n=e.auth.username||"",o=e.auth.password?decodeURI(encodeURIComponent(e.auth.password)):"";t.set("Authorization",`Basic ${btoa(n+":"+o)}`)}const n=e.method.toUpperCase(),o={headers:t,method:n};"GET"!==n&&"HEAD"!==n&&(o.body=e.data),e.mode&&(o.mode=e.mode),e.cache&&(o.cache=e.cache),e.integrity&&(o.integrity=e.integrity),e.redirect&&(o.redirect=e.redirect),e.referrer&&(o.referrer=e.referrer),(0,c.isUndefined)(e.withCredentials)||(o.credentials=e.withCredentials?"include":"omit");const r=l()(e.baseURL,e.url),a=_()(r,e.params,e.paramsSerializer);return new Request(a,o)}(e),n=[d(t,e)];e.timeout&&e.timeout>0&&n.push(new Promise((n=>{setTimeout((()=>{const o=e.timeoutErrorMessage?e.timeoutErrorMessage:"timeout of "+e.timeout+"ms exceeded";n(m(o,e,"ECONNABORTED",t))}),e.timeout)})));const o=await Promise.race(n);return new Promise(((t,n)=>{o instanceof Error?n(o):"[object Function]"===Object.prototype.toString.call(e.settle)?e.settle(t,n,o):i()(t,n,o)}))}async function d(e,t){let n;try{n=await fetch(e)}catch(n){return m("Network Error",t,"ERR_NETWORK",e)}const o={ok:n.ok,status:n.status,statusText:n.statusText,headers:new Headers(n.headers),config:t,request:e};if(n.status>=200&&204!==n.status)switch(t.responseType){case"arraybuffer":o.data=await n.arrayBuffer();break;case"blob":o.data=await n.blob();break;case"json":o.data=await n.json();break;case"formData":o.data=await n.formData();break;default:o.data=await n.text()}return o}function m(e,t,n,o,a){return r().AxiosError&&"function"==typeof r().AxiosError?new(r().AxiosError)(e,r().AxiosError[n],t,o,a):function(e,t,n,o,r){return e.config=t,n&&(e.code=n),e.request=o,e.response=r,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}(new Error(e),t,n,o,a)}},9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var o=n(4867),r=n(6026),a=n(4372),i=n(5327),s=n(4097),_=n(4109),p=n(7985),l=n(7874),c=n(2648),u=n(644),d=n(205);e.exports=function(e){return new Promise((function(t,n){var m,T=e.data,f=e.headers,g=e.responseType;function E(){e.cancelToken&&e.cancelToken.unsubscribe(m),e.signal&&e.signal.removeEventListener("abort",m)}o.isFormData(T)&&o.isStandardBrowserEnv()&&delete f["Content-Type"];var y=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",x=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";f.Authorization="Basic "+btoa(h+":"+x)}var v=s(e.baseURL,e.url);function O(){if(y){var o="getAllResponseHeaders"in y?_(y.getAllResponseHeaders()):null,a={data:g&&"text"!==g&&"json"!==g?y.response:y.responseText,status:y.status,statusText:y.statusText,headers:o,config:e,request:y};r((function(e){t(e),E()}),(function(e){n(e),E()}),a),y=null}}if(y.open(e.method.toUpperCase(),i(v,e.params,e.paramsSerializer),!0),y.timeout=e.timeout,"onloadend"in y?y.onloadend=O:y.onreadystatechange=function(){y&&4===y.readyState&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf("file:"))&&setTimeout(O)},y.onabort=function(){y&&(n(new c("Request aborted",c.ECONNABORTED,e,y)),y=null)},y.onerror=function(){n(new c("Network Error",c.ERR_NETWORK,e,y,y)),y=null},y.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",o=e.transitional||l;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new c(t,o.clarifyTimeoutError?c.ETIMEDOUT:c.ECONNABORTED,e,y)),y=null},o.isStandardBrowserEnv()){var N=(e.withCredentials||p(v))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;N&&(f[e.xsrfHeaderName]=N)}"setRequestHeader"in y&&o.forEach(f,(function(e,t){void 0===T&&"content-type"===t.toLowerCase()?delete f[t]:y.setRequestHeader(t,e)})),o.isUndefined(e.withCredentials)||(y.withCredentials=!!e.withCredentials),g&&"json"!==g&&(y.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&y.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&y.upload&&y.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(m=function(e){y&&(n(!e||e&&e.type?new u:e),y.abort(),y=null)},e.cancelToken&&e.cancelToken.subscribe(m),e.signal&&(e.signal.aborted?m():e.signal.addEventListener("abort",m))),T||(T=null);var b=d(v);b&&-1===["http","https","file"].indexOf(b)?n(new c("Unsupported protocol "+b+":",c.ERR_BAD_REQUEST,e)):y.send(T)}))}},1609:(e,t,n)=>{"use strict";var o=n(4867),r=n(1849),a=n(321),i=n(7185),s=function e(t){var n=new a(t),s=r(a.prototype.request,n);return o.extend(s,a.prototype,n),o.extend(s,n),s.create=function(n){return e(i(t,n))},s}(n(5546));s.Axios=a,s.CanceledError=n(644),s.CancelToken=n(4972),s.isCancel=n(6502),s.VERSION=n(7288).version,s.toFormData=n(7675),s.AxiosError=n(2648),s.Cancel=s.CanceledError,s.all=function(e){return Promise.all(e)},s.spread=n(8713),s.isAxiosError=n(6268),e.exports=s,e.exports.default=s},4972:(e,t,n)=>{"use strict";var o=n(644);function r(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,o=n._listeners.length;for(t=0;t<o;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,o=new Promise((function(e){n.subscribe(e),t=e})).then(e);return o.cancel=function(){n.unsubscribe(t)},o},e((function(e){n.reason||(n.reason=new o(e),t(n.reason))}))}r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},r.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},r.source=function(){var e;return{token:new r((function(t){e=t})),cancel:e}},e.exports=r},644:(e,t,n)=>{"use strict";var o=n(2648);function r(e){o.call(this,null==e?"canceled":e,o.ERR_CANCELED),this.name="CanceledError"}n(4867).inherits(r,o,{__CANCEL__:!0}),e.exports=r},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var o=n(4867),r=n(5327),a=n(782),i=n(3572),s=n(7185),_=n(4097),p=n(4875),l=p.validators;function c(e){this.defaults=e,this.interceptors={request:new a,response:new a}}c.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=s(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&p.assertOptions(n,{silentJSONParsing:l.transitional(l.boolean),forcedJSONParsing:l.transitional(l.boolean),clarifyTimeoutError:l.transitional(l.boolean)},!1);var o=[],r=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(r=r&&e.synchronous,o.unshift(e.fulfilled,e.rejected))}));var a,_=[];if(this.interceptors.response.forEach((function(e){_.push(e.fulfilled,e.rejected)})),!r){var c=[i,void 0];for(Array.prototype.unshift.apply(c,o),c=c.concat(_),a=Promise.resolve(t);c.length;)a=a.then(c.shift(),c.shift());return a}for(var u=t;o.length;){var d=o.shift(),m=o.shift();try{u=d(u)}catch(e){m(e);break}}try{a=i(u)}catch(e){return Promise.reject(e)}for(;_.length;)a=a.then(_.shift(),_.shift());return a},c.prototype.getUri=function(e){e=s(this.defaults,e);var t=_(e.baseURL,e.url);return r(t,e.params,e.paramsSerializer)},o.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t,data:(n||{}).data}))}})),o.forEach(["post","put","patch"],(function(e){function t(t){return function(n,o,r){return this.request(s(r||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:o}))}}c.prototype[e]=t(),c.prototype[e+"Form"]=t(!0)})),e.exports=c},2648:(e,t,n)=>{"use strict";var o=n(4867);function r(e,t,n,o,r){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),o&&(this.request=o),r&&(this.response=r)}o.inherits(r,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var a=r.prototype,i={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){i[e]={value:e}})),Object.defineProperties(r,i),Object.defineProperty(a,"isAxiosError",{value:!0}),r.from=function(e,t,n,i,s,_){var p=Object.create(a);return o.toFlatObject(e,p,(function(e){return e!==Error.prototype})),r.call(p,e.message,t,n,i,s),p.name=e.name,_&&Object.assign(p,_),p},e.exports=r},782:(e,t,n)=>{"use strict";var o=n(4867);function r(){this.handlers=[]}r.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},r.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},r.prototype.forEach=function(e){o.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=r},4097:(e,t,n)=>{"use strict";var o=n(1793),r=n(7303);e.exports=function(e,t){return e&&!o(t)?r(e,t):t}},3572:(e,t,n)=>{"use strict";var o=n(4867),r=n(8527),a=n(6502),i=n(5546),s=n(644);function _(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new s}e.exports=function(e){return _(e),e.headers=e.headers||{},e.data=r.call(e,e.data,e.headers,e.transformRequest),e.headers=o.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),o.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return _(e),t.data=r.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(_(e),t&&t.response&&(t.response.data=r.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},7185:(e,t,n)=>{"use strict";var o=n(4867);e.exports=function(e,t){t=t||{};var n={};function r(e,t){return o.isPlainObject(e)&&o.isPlainObject(t)?o.merge(e,t):o.isPlainObject(t)?o.merge({},t):o.isArray(t)?t.slice():t}function a(n){return o.isUndefined(t[n])?o.isUndefined(e[n])?void 0:r(void 0,e[n]):r(e[n],t[n])}function i(e){if(!o.isUndefined(t[e]))return r(void 0,t[e])}function s(n){return o.isUndefined(t[n])?o.isUndefined(e[n])?void 0:r(void 0,e[n]):r(void 0,t[n])}function _(n){return n in t?r(e[n],t[n]):n in e?r(void 0,e[n]):void 0}var p={url:i,method:i,data:i,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:_};return o.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=p[e]||a,r=t(e);o.isUndefined(r)&&t!==_||(n[e]=r)})),n}},6026:(e,t,n)=>{"use strict";var o=n(2648);e.exports=function(e,t,n){var r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new o("Request failed with status code "+n.status,[o.ERR_BAD_REQUEST,o.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var o=n(4867),r=n(5546);e.exports=function(e,t,n){var a=this||r;return o.forEach(n,(function(n){e=n.call(a,e,t)})),e}},5546:(e,t,n)=>{"use strict";var o=n(4867),r=n(6016),a=n(2648),i=n(7874),s=n(7675),_={"Content-Type":"application/x-www-form-urlencoded"};function p(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,c={transitional:i,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(l=n(5448)),l),transformRequest:[function(e,t){if(r(t,"Accept"),r(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e))return e;if(o.isArrayBufferView(e))return e.buffer;if(o.isURLSearchParams(e))return p(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var n,a=o.isObject(e),i=t&&t["Content-Type"];if((n=o.isFileList(e))||a&&"multipart/form-data"===i){var _=this.env&&this.env.FormData;return s(n?{"files[]":e}:e,_&&new _)}return a||"application/json"===i?(p(t,"application/json"),function(e,t,n){if(o.isString(e))try{return(0,JSON.parse)(e),o.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||c.transitional,n=t&&t.silentJSONParsing,r=t&&t.forcedJSONParsing,i=!n&&"json"===this.responseType;if(i||r&&o.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw a.from(e,a.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:n(1623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};o.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),o.forEach(["post","put","patch"],(function(e){c.headers[e]=o.merge(_)})),e.exports=c},7874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:e=>{e.exports={version:"0.27.2"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),o=0;o<n.length;o++)n[o]=arguments[o];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var o=n(4867);function r(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(o.isURLSearchParams(t))a=t.toString();else{var i=[];o.forEach(t,(function(e,t){null!=e&&(o.isArray(e)?t+="[]":e=[e],o.forEach(e,(function(e){o.isDate(e)?e=e.toISOString():o.isObject(e)&&(e=JSON.stringify(e)),i.push(r(t)+"="+r(e))})))})),a=i.join("&")}if(a){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var o=n(4867);e.exports=o.isStandardBrowserEnv()?{write:function(e,t,n,r,a,i){var s=[];s.push(e+"="+encodeURIComponent(t)),o.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),o.isString(r)&&s.push("path="+r),o.isString(a)&&s.push("domain="+a),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,t,n)=>{"use strict";var o=n(4867);e.exports=function(e){return o.isObject(e)&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var o=n(4867);e.exports=o.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function r(e){var o=e;return t&&(n.setAttribute("href",o),o=n.href),n.setAttribute("href",o),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=r(window.location.href),function(t){var n=o.isString(t)?r(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var o=n(4867);e.exports=function(e,t){o.forEach(e,(function(n,o){o!==t&&o.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[o])}))}},1623:e=>{e.exports=null},4109:(e,t,n)=>{"use strict";var o=n(4867),r=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(o.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=o.trim(e.substr(0,a)).toLowerCase(),n=o.trim(e.substr(a+1)),t){if(i[t]&&r.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},205:e=>{"use strict";e.exports=function(e){var t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},7675:(e,t,n)=>{"use strict";var o=n(4867);e.exports=function(e,t){t=t||new FormData;var n=[];function r(e){return null===e?"":o.isDate(e)?e.toISOString():o.isArrayBuffer(e)||o.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(a,i){if(o.isPlainObject(a)||o.isArray(a)){if(-1!==n.indexOf(a))throw Error("Circular reference detected in "+i);n.push(a),o.forEach(a,(function(n,a){if(!o.isUndefined(n)){var s,_=i?i+"."+a:a;if(n&&!i&&"object"==typeof n)if(o.endsWith(a,"{}"))n=JSON.stringify(n);else if(o.endsWith(a,"[]")&&(s=o.toArray(n)))return void s.forEach((function(e){!o.isUndefined(e)&&t.append(_,r(e))}));e(n,_)}})),n.pop()}else t.append(i,r(a))}(e),t}},4875:(e,t,n)=>{"use strict";var o=n(7288).version,r=n(2648),a={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){a[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var i={};a.transitional=function(e,t,n){function a(e,t){return"[Axios v"+o+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,o,s){if(!1===e)throw new r(a(o," has been removed"+(t?" in "+t:"")),r.ERR_DEPRECATED);return t&&!i[o]&&(i[o]=!0,console.warn(a(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,s)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new r("options must be an object",r.ERR_BAD_OPTION_VALUE);for(var o=Object.keys(e),a=o.length;a-- >0;){var i=o[a],s=t[i];if(s){var _=e[i],p=void 0===_||s(_,i,e);if(!0!==p)throw new r("option "+i+" must be "+p,r.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new r("Unknown option "+i,r.ERR_BAD_OPTION)}},validators:a}},4867:(e,t,n)=>{"use strict";var o,r=n(1849),a=Object.prototype.toString,i=(o=Object.create(null),function(e){var t=a.call(e);return o[t]||(o[t]=t.slice(8,-1).toLowerCase())});function s(e){return e=e.toLowerCase(),function(t){return i(t)===e}}function _(e){return Array.isArray(e)}function p(e){return void 0===e}var l=s("ArrayBuffer");function c(e){return null!==e&&"object"==typeof e}function u(e){if("object"!==i(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var d=s("Date"),m=s("File"),T=s("Blob"),f=s("FileList");function g(e){return"[object Function]"===a.call(e)}var E=s("URLSearchParams");function y(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),_(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.call(null,e[r],r,e)}var h,x=(h="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return h&&e instanceof h});e.exports={isArray:_,isArrayBuffer:l,isBuffer:function(e){return null!==e&&!p(e)&&null!==e.constructor&&!p(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||a.call(e)===t||g(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&l(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:c,isPlainObject:u,isUndefined:p,isDate:d,isFile:m,isBlob:T,isFunction:g,isStream:function(e){return c(e)&&g(e.pipe)},isURLSearchParams:E,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:y,merge:function e(){var t={};function n(n,o){u(t[o])&&u(n)?t[o]=e(t[o],n):u(n)?t[o]=e({},n):_(n)?t[o]=n.slice():t[o]=n}for(var o=0,r=arguments.length;o<r;o++)y(arguments[o],n);return t},extend:function(e,t,n){return y(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,n,o){e.prototype=Object.create(t.prototype,o),e.prototype.constructor=e,n&&Object.assign(e.prototype,n)},toFlatObject:function(e,t,n){var o,r,a,i={};t=t||{};do{for(r=(o=Object.getOwnPropertyNames(e)).length;r-- >0;)i[a=o[r]]||(t[a]=e[a],i[a]=!0);e=Object.getPrototypeOf(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:i,kindOfTest:s,endsWith:function(e,t,n){e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;var o=e.indexOf(t,n);return-1!==o&&o===n},toArray:function(e){if(!e)return null;var t=e.length;if(p(t))return null;for(var n=new Array(t);t-- >0;)n[t]=e[t];return n},isTypedArray:x,isFileList:f}},3682:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudioToText=void 0;var o=n(8778),r=n(1193),a=n(6117),i=function(){function e(e){this.params=e,this.httpClient=(0,r.getHttpClient)(this.params)}return e.prototype.audioTranscription=function(e){var t,n=new FormData;return(0,a.isDefined)(e.audio)&&n.append("audio",e.audio),(0,a.isDefined)(e.audio_url)&&n.append("audio_url",e.audio_url),(0,a.isDefined)(e.language)&&n.append("language",e.language),this.httpClient.post({url:"/audio/text/audio-transcription/",headers:{"Content-Type":this.params.useFetch?o.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:o.AUDIO_TEXT_AUDIO_TRANSCRIPTION_DEFAULT_MODEL},body:n})},e}();t.FromAudioToText=i},8490:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudio=void 0;var o=n(3682),r=function(){function e(e){this.fromAudioToTextInst=new o.FromAudioToText(e)}return e.prototype.toText=function(){return this.fromAudioToTextInst},e}();t.FromAudio=r},8814:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToImage=void 0;var o=n(8778),r=n(1193),a=n(6117),i=function(){function e(e){this.params=e,this.httpClient=(0,r.getHttpClient)(this.params)}return e.prototype.backgroundRemoval=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/background-removal/",headers:{"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:o.IMAGE_IMAGE_BACKGROUND_REMOVAL_DEFAULT_MODEL},responseType:"arraybuffer",body:n})},e.prototype.colorization=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/colorization/",headers:{"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:o.IMAGE_IMAGE_COLORIZATION_DEFAULT_MODEL},responseType:"arraybuffer",body:n})},e.prototype.faceBluring=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/face-bluring/",headers:{"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:o.IMAGE_IMAGE_FACE_BLURING_DEFAULT_MODEL},responseType:"arraybuffer",body:n})},e.prototype.uncolorization=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/uncolorization/",headers:{"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:o.IMAGE_IMAGE_UNCOLORIZATION_DEFAULT_MODEL},responseType:"arraybuffer",body:n})},e}();t.FromImageToImage=i},4802:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToText=void 0;var o=n(8778),r=n(1193),a=n(6117),i=function(){function e(e){this.params=e,this.httpClient=(0,r.getHttpClient)(this.params)}return e.prototype.asciify=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/text/asciify/",headers:{"Content-Type":this.params.useFetch?o.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:o.IMAGE_TEXT_ASCIIFY_DEFAULT_MODEL},body:n})},e.prototype.classification=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),(0,a.isDefined)(e.top_k)&&n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/image/text/classification/",headers:{"Content-Type":this.params.useFetch?o.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:o.IMAGE_TEXT_CLASSIFICATION_DEFAULT_MODEL},body:n})},e.prototype.ocr=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),(0,a.isDefined)(e.source_language)&&n.append("source_language",e.source_language),this.httpClient.post({url:"/image/text/ocr/",headers:{"Content-Type":this.params.useFetch?o.IMAGE_TEXT_OCR_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:o.IMAGE_TEXT_OCR_DEFAULT_MODEL},body:n})},e}();t.FromImageToText=i},2062:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImage=void 0;var o=n(8814),r=n(4802),a=function(){function e(e){this.fromImageToImageInst=new o.FromImageToImage(e),this.fromImageToTextInst=new r.FromImageToText(e)}return e.prototype.toImage=function(){return this.fromImageToImageInst},e.prototype.toText=function(){return this.fromImageToTextInst},e}();t.FromImage=a},4153:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToImage=void 0;var o=n(8778),r=n(1193),a=n(9142),i=function(){function e(e){this.params=e,this.httpClient=(0,r.getHttpClient)(this.params)}return e.prototype.imageGeneration=function(e){var t,n=new a.UrlFormData;return n.append("prompt",e.prompt),n.append("samples",String(e.samples)),n.append("steps",String(e.steps)),n.append("seed",String(e.seed)),n.append("scale",String(e.scale)),this.httpClient.post({url:"/text/image/image-generation/",headers:{"Content-Type":o.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_IMAGE_IMAGE_GENERATION_DEFAULT_MODEL},responseType:"arraybuffer",body:n.toString()})},e}();t.FromTextToImage=i},8271:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToText=void 0;var o=n(8778),r=n(1193),a=n(6117),i=n(9142),s=function(){function e(e){this.params=e,this.httpClient=(0,r.getHttpClient)(this.params)}return e.prototype.autocorrect=function(e){var t,n=new i.UrlFormData;return n.append("sentence",e.sentence),this.httpClient.post({url:"/text/text/autocorrect/",headers:{"Content-Type":o.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_AUTOCORRECT_DEFAULT_MODEL},body:n.toString()})},e.prototype.emotionRecognition=function(e){var t,n=new i.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/emotion-recognition/",headers:{"Content-Type":o.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_EMOTION_RECOGNITION_DEFAULT_MODEL},body:n.toString()})},e.prototype.hateSpeechDetection=function(e){var t,n=new i.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/hate-speech-detection/",headers:{"Content-Type":o.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_HATE_SPEECH_DETECTION_DEFAULT_MODEL},body:n.toString()})},e.prototype.keywordExtraction=function(e){var t,n=new i.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/keyword-extraction/",headers:{"Content-Type":o.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_KEYWORD_EXTRACTION_DEFAULT_MODEL},body:n.toString()})},e.prototype.languageDetection=function(e){var t,n=new i.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-detection/",headers:{"Content-Type":o.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_LANGUAGE_DETECTION_DEFAULT_MODEL},body:n.toString()})},e.prototype.languageGeneration=function(e){var t,n=new i.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-generation/",headers:{"Content-Type":o.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_LANGUAGE_GENERATION_DEFAULT_MODEL},body:n.toString()})},e.prototype.namedEntityRecognition=function(e){var t,n=new i.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/named-entity-recognition/",headers:{"Content-Type":o.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_DEFAULT_MODEL},body:n.toString()})},e.prototype.nextSentencePrediction=function(e){var t,n=new i.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/next-sentence-prediction/",headers:{"Content-Type":o.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_DEFAULT_MODEL},body:n.toString()})},e.prototype.nextWordPrediction=function(e){var t,n=new i.UrlFormData;return n.append("sentence",e.sentence),this.httpClient.post({url:"/text/text/next-word-prediction/",headers:{"Content-Type":o.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_NEXT_WORD_PREDICTION_DEFAULT_MODEL},body:n.toString()})},e.prototype.plural=function(e){var t,n=new i.UrlFormData;return n.append("word",e.word),(0,a.isDefined)(e.count)&&n.append("count",String(e.count)),this.httpClient.post({url:"/text/text/plural/",headers:{"Content-Type":o.TEXT_TEXT_PLURAL_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_PLURAL_DEFAULT_MODEL},body:n.toString()})},e.prototype.programmingLanguageGeneration=function(e){var t,n=new i.UrlFormData;return n.append("code_snippet",e.code_snippet),this.httpClient.post({url:"/text/text/programming-language-generation/",headers:{"Content-Type":o.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_DEFAULT_MODEL},body:n.toString()})},e.prototype.questionAnswering=function(e){var t,n=new i.UrlFormData;return n.append("context",e.context),n.append("question",e.question),this.httpClient.post({url:"/text/text/question-answering/",headers:{"Content-Type":o.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_QUESTION_ANSWERING_DEFAULT_MODEL},body:n.toString()})},e.prototype.sentenceParaphraser=function(e){var t,n=new i.UrlFormData;return n.append("context",e.context),this.httpClient.post({url:"/text/text/sentence-paraphraser/",headers:{"Content-Type":o.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_SENTENCE_PARAPHRASER_DEFAULT_MODEL},body:n.toString()})},e.prototype.sentimentAnalysis=function(e){var t,n=new i.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/sentiment-analysis/",headers:{"Content-Type":o.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_SENTIMENT_ANALYSIS_DEFAULT_MODEL},body:n.toString()})},e.prototype.similarity=function(e){var t,n=new i.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/similarity/",headers:{"Content-Type":o.TEXT_TEXT_SIMILARITY_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_SIMILARITY_DEFAULT_MODEL},body:n.toString()})},e.prototype.wordAlignment=function(e){var t,n=new i.UrlFormData;return n.append("input_string_language_1",e.input_string_language_1),n.append("input_string_language_2",e.input_string_language_2),this.httpClient.post({url:"/text/text/word-alignment/",headers:{"Content-Type":o.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:o.TEXT_TEXT_WORD_ALIGNMENT_DEFAULT_MODEL},body:n.toString()})},e}();t.FromTextToText=s},9438:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromText=void 0;var o=n(4153),r=n(8271),a=function(){function e(e){this.fromTextToImageInst=new o.FromTextToImage(e),this.fromTextToTextInst=new r.FromTextToText(e)}return e.prototype.toImage=function(){return this.fromTextToImageInst},e.prototype.toText=function(){return this.fromTextToTextInst},e}();t.FromText=a},4085:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Shortcuts=void 0;var n=function(){function e(){}return e.prototype.audioTranscription=function(e){return this.fromAudio().toText().audioTranscription(e)},e.prototype.backgroundRemoval=function(e){return this.fromImage().toImage().backgroundRemoval(e)},e.prototype.colorization=function(e){return this.fromImage().toImage().colorization(e)},e.prototype.faceBluring=function(e){return this.fromImage().toImage().faceBluring(e)},e.prototype.uncolorization=function(e){return this.fromImage().toImage().uncolorization(e)},e.prototype.asciify=function(e){return this.fromImage().toText().asciify(e)},e.prototype.classification=function(e){return this.fromImage().toText().classification(e)},e.prototype.ocr=function(e){return this.fromImage().toText().ocr(e)},e.prototype.imageGeneration=function(e){return this.fromText().toImage().imageGeneration(e)},e.prototype.autocorrect=function(e){return this.fromText().toText().autocorrect(e)},e.prototype.emotionRecognition=function(e){return this.fromText().toText().emotionRecognition(e)},e.prototype.hateSpeechDetection=function(e){return this.fromText().toText().hateSpeechDetection(e)},e.prototype.keywordExtraction=function(e){return this.fromText().toText().keywordExtraction(e)},e.prototype.languageDetection=function(e){return this.fromText().toText().languageDetection(e)},e.prototype.languageGeneration=function(e){return this.fromText().toText().languageGeneration(e)},e.prototype.namedEntityRecognition=function(e){return this.fromText().toText().namedEntityRecognition(e)},e.prototype.nextSentencePrediction=function(e){return this.fromText().toText().nextSentencePrediction(e)},e.prototype.nextWordPrediction=function(e){return this.fromText().toText().nextWordPrediction(e)},e.prototype.plural=function(e){return this.fromText().toText().plural(e)},e.prototype.programmingLanguageGeneration=function(e){return this.fromText().toText().programmingLanguageGeneration(e)},e.prototype.questionAnswering=function(e){return this.fromText().toText().questionAnswering(e)},e.prototype.sentenceParaphraser=function(e){return this.fromText().toText().sentenceParaphraser(e)},e.prototype.sentimentAnalysis=function(e){return this.fromText().toText().sentimentAnalysis(e)},e.prototype.similarity=function(e){return this.fromText().toText().similarity(e)},e.prototype.wordAlignment=function(e){return this.fromText().toText().wordAlignment(e)},e}();t.Shortcuts=n},2889:function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},o(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__assign||function(){return a=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},a.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.GladiaClient=void 0;var i=n(4085),s=n(8490),_=n(2062),p=n(9438),l=function(e){function t(t){var n,o=this;o=e.call(this)||this;var r=a(a({},t),{useFetch:null!==(n=t.useFetch)&&void 0!==n&&n});return o.fromAudioInst=new s.FromAudio(r),o.fromImageInst=new _.FromImage(r),o.fromTextInst=new p.FromText(r),o}return r(t,e),t.prototype.fromAudio=function(){return this.fromAudioInst},t.prototype.fromImage=function(){return this.fromImageInst},t.prototype.fromText=function(){return this.fromTextInst},t}(i.Shortcuts);t.GladiaClient=l},3465:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,r)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||o(t,e,n)},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.meta=t.GladiaClient=t.gladia=void 0;var s=n(2889);function _(e){return new s.GladiaClient(e)}t.gladia=_,t.default=_;var p=n(2889);Object.defineProperty(t,"GladiaClient",{enumerable:!0,get:function(){return p.GladiaClient}}),a(n(8778),t),t.meta=i(n(2168))},6976:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,o,r)}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.axiosFetchAdapter=void 0,t.axiosFetchAdapter=function(){return Promise.resolve().then((function(){return a(n(8917))})).then((function(e){return e.default}))}},1193:function(e,t,n){"use strict";var o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},o.apply(this,arguments)},r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function i(e){try{_(o.next(e))}catch(e){a(e)}}function s(e){try{_(o.throw(e))}catch(e){a(e)}}function _(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}_((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,a,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,o&&(r=2&a[0]?o.return:a[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,a[1])).done)return r;switch(o=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,o=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],o=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getHttpClient=void 0;var s=i(n(9669)),_=n(6976),p=n(3413),l=n(6825);t.getHttpClient=function(e){var t,n,o,r;return(null!==(t=e.customHttpClient)&&void 0!==t?t:c)({baseHeaders:{"x-gladia-key":e.apiKey,"x-gladia-sdk":p.SDK_VERSION},baseUrl:null!==(n=e.baseUrl)&&void 0!==n?n:"https://v2-api.gladia.io",useFetch:null!==(o=e.useFetch)&&void 0!==o&&o,httpClientTimeout:null!==(r=e.httpClientTimeout)&&void 0!==r?r:3e5})};var c=function(e){var t=e.baseHeaders,n=e.baseUrl,i=e.useFetch,p=e.httpClientTimeout;return{post:function(e){var c;return r(this,void 0,void 0,(function(){var r,u,d,m,T,f,g;return a(this,(function(a){switch(a.label){case 0:return r=o(o({},t),e.headers),u="".concat(n).concat(e.url).concat((0,l.searchQueryParamSerializer)(e.query)),d=null!==(c=e.responseType)&&void 0!==c?c:"json",m=null!=p?p:3e5,i?(g={},[4,(0,_.axiosFetchAdapter)()]):[3,2];case 1:return g.adapter=a.sent(),f=g,[3,3];case 2:f={},a.label=3;case 3:return T=f,[2,s.default.post(u,e.body,o(o({headers:r,responseType:d},T),{timeout:m})).then((function(e){return e.data}))]}}))}))}}}},6825:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.searchParamSerializer=t.searchQueryParamSerializer=void 0;var o=n(6117);function r(e){return Object.entries(e).map((function(e){var t=e[0],n=e[1];return"".concat(t,"=").concat("string"==typeof n?encodeURI(n):n)})).join("&")}t.searchQueryParamSerializer=function(e){if((0,o.isNotDefined)(e))return"";var t=r(e);return 0===t.length?"":"?"+t},t.searchParamSerializer=r},9142:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrlFormData=void 0;var o=n(6825),r=function(){function e(e){this.data={},e&&e.length>1&&(this.data=Object.fromEntries(e.split("&").map((function(e){return e.split("=")})).map((function(e){var t=e[0],n=e[1];return[t,decodeURI(n)]}))))}return e.prototype.append=function(e,t){this.data[e]=t},e.prototype.get=function(e){return this.data[e]},e.prototype.toString=function(){return(0,o.searchParamSerializer)(this.data)},e}();t.UrlFormData=r},3109:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getContentTypeName=void 0,t.getContentTypeName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),o=e.taskName.replace(/-/g,"_").toUpperCase();return"".concat(t,"_").concat(n,"_").concat(o,"_CONTENT_TYPE")}},5611:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaultValueName=void 0,t.getDefaultValueName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),o=e.taskName.replace(/-/g,"_").toUpperCase();return"".concat(t,"_").concat(n,"_").concat(o,"_DEFAULT_MODEL")}},7896:function(e,t,n){"use strict";var o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},o.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.getEndpointsByInputOutput=t.getEndpoints=void 0;var r=n(5354);function a(){return Object.entries(r.openApiJson.paths).map((function(e){var t=e[0],n=e[1],a=t.split("/"),s=a[1],_=a[2],p=a[3];return o(o(o({url:t,inputType:s,outputType:_,taskName:p},function(e){var t,n=e.post.parameters.filter((function(e){return"model"===e.name}))[0];if("integer"===n.schema.type)throw{kind:"InvalidSchema",def:e};var o=null!==(t=n.schema.enum)&&void 0!==t?t:[];return o.sort(),{models:o,defaultModel:n.schema.default}}(n)),function(e){switch(e){case"text":return{inputBodyContentType:"application/x-www-form-urlencoded"};case"audio":case"image":case"video":return{inputBodyContentType:"multipart/form-data"};default:throw{kind:"InvalidInputType",inputType:e}}}(s)),{params:i(n,r.openApiJson)})}))}function i(e,t){var n=e.post.parameters.filter((function(e){return"model"!==e.name})).map((function(e){return{in:"query",type:e.schema.type,name:e.name,required:e.required}}));return e.post.requestBody&&Object.values(e.post.requestBody.content).forEach((function(e){var o=e.schema.$ref;if(o){var r=t.components.schemas[o.substring("#/components/schemas/".length)];n.push.apply(n,Object.entries(r.properties).map((function(e){var t,n,o=e[0],a=e[1],i=null!==(n=null===(t=r.required)||void 0===t?void 0:t.includes(o))&&void 0!==n&&n;return{in:"formData",type:function(){switch(a.data_type){case"int":return"integer";case"float":return"float";case"url":return"url";case"audio":return"audio";case"image":return"image";default:return"string"}}(),name:o,required:i}})))}})),n}t.getEndpoints=a,t.getEndpointsByInputOutput=function(){for(var e={},t=0,n=a();t<n.length;t++){var o=n[t];o.inputType in e||(e[o.inputType]={}),o.outputType in e[o.inputType]||(e[o.inputType][o.outputType]=[]),e[o.inputType][o.outputType].push(o)}return e}},1916:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInputModelType=void 0;var o=n(4044);t.getInputModelType=function(e){var t=(0,o.capitalizeFirst)(e.inputType),n=(0,o.capitalizeFirst)(e.outputType),r=(0,o.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(r,"Inputs")}},7897:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMethodName=void 0;var o=n(4044);t.getMethodName=function(e){return(0,o.kebabToCamelCase)(e.taskName)}},555:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelTypeName=void 0;var o=n(4044);t.getModelTypeName=function(e){var t=(0,o.capitalizeFirst)(e.inputType),n=(0,o.capitalizeFirst)(e.outputType),r=(0,o.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(r,"Model")}},797:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelValuesName=void 0;var o=n(4044);t.getModelValuesName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),r=(0,o.kebabToSnakeCase)(e.taskName).toUpperCase();return"".concat(t,"_").concat(n,"_").concat(r,"_MODELS")}},7179:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelType=void 0;var o=n(4044);t.getOutputModelType=function(e){var t=(0,o.capitalizeFirst)(e.inputType),n=(0,o.capitalizeFirst)(e.outputType),r=(0,o.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(r,"Outputs")}},2168:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelType=t.getInputModelType=t.getModelValuesName=t.getModelTypeName=t.getMethodName=t.getDefaultValueName=t.getContentTypeName=t.getEndpointsByInputOutput=t.getEndpoints=void 0;var o=n(7896);Object.defineProperty(t,"getEndpoints",{enumerable:!0,get:function(){return o.getEndpoints}}),Object.defineProperty(t,"getEndpointsByInputOutput",{enumerable:!0,get:function(){return o.getEndpointsByInputOutput}});var r=n(3109);Object.defineProperty(t,"getContentTypeName",{enumerable:!0,get:function(){return r.getContentTypeName}});var a=n(5611);Object.defineProperty(t,"getDefaultValueName",{enumerable:!0,get:function(){return a.getDefaultValueName}});var i=n(7897);Object.defineProperty(t,"getMethodName",{enumerable:!0,get:function(){return i.getMethodName}});var s=n(555);Object.defineProperty(t,"getModelTypeName",{enumerable:!0,get:function(){return s.getModelTypeName}});var _=n(797);Object.defineProperty(t,"getModelValuesName",{enumerable:!0,get:function(){return _.getModelValuesName}});var p=n(1916);Object.defineProperty(t,"getInputModelType",{enumerable:!0,get:function(){return p.getInputModelType}});var l=n(7179);Object.defineProperty(t,"getOutputModelType",{enumerable:!0,get:function(){return l.getOutputModelType}})},5354:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.openApiJson=void 0,t.openApiJson={openapi:"3.0.2",info:{title:"FastAPI",version:"0.1.0"},paths:{"/audio/text/audio-transcription/":{get:{tags:["audio.text.audio-transcription"],summary:"Get list of models available for audio-transcription",operationId:"get_versions_audio_text_audio_transcription__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["audio.text.audio-transcription"],summary:"Apply model for the audio-transcription task for a given models",operationId:"apply_audio_text_audio_transcription__post",parameters:[{required:!1,schema:{title:"Model",enum:["coqui_english_huge_vocab"],type:"string",default:"coqui_english_huge_vocab"},name:"model",in:"query"}],requestBody:{content:{"multipart/form-data":{schema:{$ref:"#/components/schemas/Body_apply_audio_text_audio_transcription__post"}}}},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/image/image/background-removal/":{get:{tags:["image.image.background-removal"],summary:"Get list of models available for background-removal",operationId:"get_versions_image_image_background_removal__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["image.image.background-removal"],summary:"Apply model for the background-removal task for a given models",operationId:"apply_image_image_background_removal__post",parameters:[{required:!1,schema:{title:"Model",enum:["xception","mobilenet"],type:"string",default:"xception"},name:"model",in:"query"}],requestBody:{content:{"multipart/form-data":{schema:{$ref:"#/components/schemas/Body_apply_image_image_background_removal__post"}}}},responses:{200:{description:"Successful Response",content:{"image/*":{schema:{type:"string",format:"binary"}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/image/image/colorization/":{get:{tags:["image.image.colorization"],summary:"Get list of models available for colorization",operationId:"get_versions_image_image_colorization__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["image.image.colorization"],summary:"Apply model for the colorization task for a given models",operationId:"apply_image_image_colorization__post",parameters:[{required:!1,schema:{title:"Model",enum:["deoldify-stable","deoldify-artistic"],type:"string",default:"deoldify-stable"},name:"model",in:"query"}],requestBody:{content:{"multipart/form-data":{schema:{$ref:"#/components/schemas/Body_apply_image_image_colorization__post"}}}},responses:{200:{description:"Successful Response",content:{"image/*":{schema:{type:"string",format:"binary"}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/image/image/face-bluring/":{get:{tags:["image.image.face-bluring"],summary:"Get list of models available for face-bluring",operationId:"get_versions_image_image_face_bluring__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["image.image.face-bluring"],summary:"Apply model for the face-bluring task for a given models",operationId:"apply_image_image_face_bluring__post",parameters:[{required:!1,schema:{title:"Model",enum:["ageitgey"],type:"string",default:"ageitgey"},name:"model",in:"query"}],requestBody:{content:{"multipart/form-data":{schema:{$ref:"#/components/schemas/Body_apply_image_image_face_bluring__post"}}}},responses:{200:{description:"Successful Response",content:{"image/*":{schema:{type:"string",format:"binary"}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/image/image/uncolorization/":{get:{tags:["image.image.uncolorization"],summary:"Get list of models available for uncolorization",operationId:"get_versions_image_image_uncolorization__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["image.image.uncolorization"],summary:"Apply model for the uncolorization task for a given models",operationId:"apply_image_image_uncolorization__post",parameters:[{required:!1,schema:{title:"Model",enum:["v1"],type:"string",default:"v1"},name:"model",in:"query"}],requestBody:{content:{"multipart/form-data":{schema:{$ref:"#/components/schemas/Body_apply_image_image_uncolorization__post"}}}},responses:{200:{description:"Successful Response",content:{"image/*":{schema:{type:"string",format:"binary"}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/image/text/asciify/":{get:{tags:["image.text.asciify"],summary:"Get list of models available for asciify",operationId:"get_versions_image_text_asciify__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["image.text.asciify"],summary:"Apply model for the asciify task for a given models",operationId:"apply_image_text_asciify__post",parameters:[{required:!1,schema:{title:"Model",enum:["ramesh-aditya"],type:"string",default:"ramesh-aditya"},name:"model",in:"query"}],requestBody:{content:{"multipart/form-data":{schema:{$ref:"#/components/schemas/Body_apply_image_text_asciify__post"}}}},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/image/text/classification/":{get:{tags:["image.text.classification"],summary:"Get list of models available for classification",operationId:"get_versions_image_text_classification__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["image.text.classification"],summary:"Apply model for the classification task for a given models",operationId:"apply_image_text_classification__post",parameters:[{required:!1,schema:{title:"Model",enum:["efficientnet_b5","efficientnet_b4","resnet50_v1","shufflenet_v2_x0_5_quantized_fbgemm_v1","regnet_y_8gf_v2","resnext50_32x4d_v2","wide_resnet101_2_v1","swin_s","vit_l_16_v1","inception_v3_fbgemm_v1","regnet_y_1_6gf_v2","vgg11_bn","mnasnet0_75","shufflenet_v2_x2_0_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v1","regnet_y_32gf_v1","regnet_y_8gf_v1","efficientnet_b6","resnet18","vit_h_14_swag_e2e_v1","mobilenet_v2_v2","mnasnet1_0","mobilenet_v2_quantized_qnnpack_v1","convnext_large","resnext50_32x4d_v1","resnext101_32x8d_v1","resnet152_v2","efficientnet_b0","resnet50_v2","googlenet_quantized_fbgemm_v1","efficientnet_b7","densenet121","regnet_y_32gf_v2","vgg16_v1","shufflenet_v2_x1_5","squeezenet1_0","regnet_x_3_2gf_v1","densenet169","regnet_x_32gf_v2","mnasnet0_5","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_y_16gf_v2","squeezenet1_1","vgg19","regnet_y_16gf_swag_e2e_v1","regnet_y_3_2gf_v2","vgg19_bn","regnet_y_400mf_v2","swin_t","regnet_y_400mf_v1","convnext_base","regnet_x_800mf_v1","resnext101_64x4d_v1","vit_b_16_swag_e2e_v1","vgg13","resnet50_quantized_fbgemm_v2","resnet152_v1","efficientnet_b1_v1","regnet_y_32gf_swag_linear_v1","mobilenet_v3_large_quantized_qnnpack_v1","vgg16_bn","regnet_x_800mf_v2","vit_h_14_swag_linear_v1","mnasnet1_3","efficientnet_b1_v2","mobilenet_v3_large_v2","regnet_y_16gf_v1","googlenet","regnet_x_8gf_v2","efficientnet_v2_m","shufflenet_v2_x1_0_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","densenet161","regnet_y_32gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","efficientnet_v2_s","convnext_tiny","vgg11","resnext101_32x8d_v2","shufflenet_v2_x1_0","alexnet","regnet_x_1_6gf_v1","resnet50_quantized_fbgemm_v1","shufflenet_v2_x1_5_quantized_fbgemm_v1","swin_b","shufflenet_v2_x0_5","vit_l_32","vit_l_16_swag_linear_v1","regnet_x_400mf_v2","wide_resnet101_2_v2","vit_b_16_v1","regnet_y_3_2gf_v1","efficientnet_v2_l","regnet_y_128gf_swag_e2e_v1","shufflenet_v2_x2_0","regnet_x_32gf_v1","resnet18_quantized_fbgemm_v1","densenet201","convnext_small","regnet_x_1_6gf_v2","efficientnet_b3","vit_b_16_swag_linear_v1","resnet34","vgg13_bn","mobilenet_v3_large_v1","mobilenet_v3_small","regnet_y_1_6gf_v1","regnet_y_128gf_swag_linear_v1","efficientnet_b2","regnet_x_16gf_v2","regnet_x_8gf_v1","vit_b_32","inception_v3","mobilenet_v2_v1","resnext101_64x4d_quantized_fbgemm_v1","vit_l_16_swag_e2e_v1","regnet_x_16gf_v1"],type:"string",default:"alexnet"},name:"model",in:"query"}],requestBody:{content:{"multipart/form-data":{schema:{$ref:"#/components/schemas/Body_apply_image_text_classification__post"}}}},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/image/text/ocr/":{get:{tags:["image.text.ocr"],summary:"Get list of models available for ocr",operationId:"get_versions_image_text_ocr__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["image.text.ocr"],summary:"Apply model for the ocr task for a given models",operationId:"apply_image_text_ocr__post",parameters:[{required:!1,schema:{title:"Model",enum:["tesseract-default","tesseract-denoising","easy-ocr"],type:"string",default:"easy-ocr"},name:"model",in:"query"}],requestBody:{content:{"multipart/form-data":{schema:{$ref:"#/components/schemas/Body_apply_image_text_ocr__post"}}}},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/image/image-generation/":{get:{tags:["text.image.image-generation"],summary:"Get list of models available for image-generation",operationId:"get_versions_text_image_image_generation__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.image.image-generation"],summary:"Apply model for the image-generation task for a given models",operationId:"apply_text_image_image_generation__post",parameters:[{required:!1,schema:{title:"Model",enum:["stable-diffusion"],type:"string",default:"stable-diffusion"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_image_image_generation__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"image/*":{schema:{type:"string",format:"binary"}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/autocorrect/":{get:{tags:["text.text.autocorrect"],summary:"Get list of models available for autocorrect",operationId:"get_versions_text_text_autocorrect__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.autocorrect"],summary:"Apply model for the autocorrect task for a given models",operationId:"apply_text_text_autocorrect__post",parameters:[{required:!1,schema:{title:"Model",enum:["flexudy-t5-base-multi-sentence-doctor"],type:"string",default:"flexudy-t5-base-multi-sentence-doctor"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_autocorrect__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/emotion-recognition/":{get:{tags:["text.text.emotion-recognition"],summary:"Get list of models available for emotion-recognition",operationId:"get_versions_text_text_emotion_recognition__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.emotion-recognition"],summary:"Apply model for the emotion-recognition task for a given models",operationId:"apply_text_text_emotion_recognition__post",parameters:[{required:!1,schema:{title:"Model",enum:["mrm8488-t5-base-finetuned-emotion"],type:"string",default:"mrm8488-t5-base-finetuned-emotion"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_emotion_recognition__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/hate-speech-detection/":{get:{tags:["text.text.hate-speech-detection"],summary:"Get list of models available for hate-speech-detection",operationId:"get_versions_text_text_hate_speech_detection__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.hate-speech-detection"],summary:"Apply model for the hate-speech-detection task for a given models",operationId:"apply_text_text_hate_speech_detection__post",parameters:[{required:!1,schema:{title:"Model",enum:["Hate-speech-CNERG-dehatebert-mono-english"],type:"string",default:"Hate-speech-CNERG-dehatebert-mono-english"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_hate_speech_detection__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/keyword-extraction/":{get:{tags:["text.text.keyword-extraction"],summary:"Get list of models available for keyword-extraction",operationId:"get_versions_text_text_keyword_extraction__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.keyword-extraction"],summary:"Apply model for the keyword-extraction task for a given models",operationId:"apply_text_text_keyword_extraction__post",parameters:[{required:!1,schema:{title:"Model",enum:["keybert-paraphrase-MiniLM-L6-v2","keybert-paraphrase-multilingual-MiniLM-L12-v2"],type:"string",default:"keybert-paraphrase-MiniLM-L6-v2"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_keyword_extraction__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/language-detection/":{get:{tags:["text.text.language-detection"],summary:"Get list of models available for language-detection",operationId:"get_versions_text_text_language_detection__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.language-detection"],summary:"Apply model for the language-detection task for a given models",operationId:"apply_text_text_language_detection__post",parameters:[{required:!1,schema:{title:"Model",enum:["xlm-roberta-base-language-detection","toftrup-etal-2021"],type:"string",default:"xlm-roberta-base-language-detection"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_language_detection__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/language-generation/":{get:{tags:["text.text.language-generation"],summary:"Get list of models available for language-generation",operationId:"get_versions_text_text_language_generation__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.language-generation"],summary:"Apply model for the language-generation task for a given models",operationId:"apply_text_text_language_generation__post",parameters:[{required:!1,schema:{title:"Model",enum:["EleutherAI-gpt-neo-2_7B"],type:"string",default:"EleutherAI-gpt-neo-2_7B"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_language_generation__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/named-entity-recognition/":{get:{tags:["text.text.named-entity-recognition"],summary:"Get list of models available for named-entity-recognition",operationId:"get_versions_text_text_named_entity_recognition__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.named-entity-recognition"],summary:"Apply model for the named-entity-recognition task for a given models",operationId:"apply_text_text_named_entity_recognition__post",parameters:[{required:!1,schema:{title:"Model",enum:["dbmdz-bert-large-cased-finetuned-conll03-english"],type:"string",default:"dbmdz-bert-large-cased-finetuned-conll03-english"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_named_entity_recognition__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/next-sentence-prediction/":{get:{tags:["text.text.next-sentence-prediction"],summary:"Get list of models available for next-sentence-prediction",operationId:"get_versions_text_text_next_sentence_prediction__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.next-sentence-prediction"],summary:"Apply model for the next-sentence-prediction task for a given models",operationId:"apply_text_text_next_sentence_prediction__post",parameters:[{required:!1,schema:{title:"Model",enum:["bert-base-uncased"],type:"string",default:"bert-base-uncased"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_next_sentence_prediction__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/next-word-prediction/":{get:{tags:["text.text.next-word-prediction"],summary:"Get list of models available for next-word-prediction",operationId:"get_versions_text_text_next_word_prediction__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.next-word-prediction"],summary:"Apply model for the next-word-prediction task for a given models",operationId:"apply_text_text_next_word_prediction__post",parameters:[{required:!1,schema:{title:"Model",enum:["albert-base-v2","distilbert-base-uncased","bert-base-uncased","roberta-base"],type:"string",default:"distilbert-base-uncased"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_next_word_prediction__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/plural/":{get:{tags:["text.text.plural"],summary:"Get list of models available for plural",operationId:"get_versions_text_text_plural__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.plural"],summary:"Apply model for the plural task for a given models",operationId:"apply_text_text_plural__post",parameters:[{required:!1,schema:{title:"Model",enum:["inflect"],type:"string",default:"inflect"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_plural__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/programming-language-generation/":{get:{tags:["text.text.programming-language-generation"],summary:"Get list of models available for programming-language-generation",operationId:"get_versions_text_text_programming_language_generation__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.programming-language-generation"],summary:"Apply model for the programming-language-generation task for a given models",operationId:"apply_text_text_programming_language_generation__post",parameters:[{required:!1,schema:{title:"Model",enum:["sentdex-GPyT"],type:"string",default:"sentdex-GPyT"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_programming_language_generation__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/question-answering/":{get:{tags:["text.text.question-answering"],summary:"Get list of models available for question-answering",operationId:"get_versions_text_text_question_answering__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.question-answering"],summary:"Apply model for the question-answering task for a given models",operationId:"apply_text_text_question_answering__post",parameters:[{required:!1,schema:{title:"Model",enum:["mrm8488-bert-tiny-5-finetuned-squadv2","mfeb-albert-xxlarge-v2-squad2","deepset-roberta-base-squad2","distilbert-base-cased-distilled-squad","deepset_bert-base-cased-squad2"],type:"string",default:"deepset_bert-base-cased-squad2"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_question_answering__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/sentence-paraphraser/":{get:{tags:["text.text.sentence-paraphraser"],summary:"Get list of models available for sentence-paraphraser",operationId:"get_versions_text_text_sentence_paraphraser__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.sentence-paraphraser"],summary:"Apply model for the sentence-paraphraser task for a given models",operationId:"apply_text_text_sentence_paraphraser__post",parameters:[{required:!1,schema:{title:"Model",enum:["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality"],type:"string",default:"ramsrigouthamg-t5-large-paraphraser-diverse-high-quality"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_sentence_paraphraser__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/sentiment-analysis/":{get:{tags:["text.text.sentiment-analysis"],summary:"Get list of models available for sentiment-analysis",operationId:"get_versions_text_text_sentiment_analysis__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.sentiment-analysis"],summary:"Apply model for the sentiment-analysis task for a given models",operationId:"apply_text_text_sentiment_analysis__post",parameters:[{required:!1,schema:{title:"Model",enum:["distilbert-base-uncased-finetuned-sst-2-english","distilbert-base-uncased","zero-shot-classification-facebook-bart-large-mnli","nlptown-bert-base-multilingual-uncased-sentiment"],type:"string",default:"nlptown-bert-base-multilingual-uncased-sentiment"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_sentiment_analysis__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/similarity/":{get:{tags:["text.text.similarity"],summary:"Get list of models available for similarity",operationId:"get_versions_text_text_similarity__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.similarity"],summary:"Apply model for the similarity task for a given models",operationId:"apply_text_text_similarity__post",parameters:[{required:!1,schema:{title:"Model",enum:["all-MiniLM-L6-v2"],type:"string",default:"all-MiniLM-L6-v2"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_similarity__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}},"/text/text/word-alignment/":{get:{tags:["text.text.word-alignment"],summary:"Get list of models available for word-alignment",operationId:"get_versions_text_text_word_alignment__get",responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}}}},post:{tags:["text.text.word-alignment"],summary:"Apply model for the word-alignment task for a given models",operationId:"apply_text_text_word_alignment__post",parameters:[{required:!1,schema:{title:"Model",enum:["bert-base-multilingual-cased"],type:"string",default:"bert-base-multilingual-cased"},name:"model",in:"query"}],requestBody:{content:{"application/x-www-form-urlencoded":{schema:{$ref:"#/components/schemas/Body_apply_text_text_word_alignment__post"}}},required:!0},responses:{200:{description:"Successful Response",content:{"application/json":{schema:{}}}},422:{description:"Validation Error",content:{"application/json":{schema:{$ref:"#/components/schemas/HTTPValidationError"}}}}}}}},components:{schemas:{Body_apply_audio_text_audio_transcription__post:{title:"Body_apply_audio_text_audio_transcription__post",type:"object",properties:{audio:{title:"audio",type:"string",format:"binary",_examples:["https://anshe.org/audio/3Weeks-080715.mp3"],data_type:"audio"},audio_url:{title:"audio_url",type:"string",_examples:["https://anshe.org/audio/3Weeks-080715.mp3"],data_type:"url"},language:{title:"language",type:"string",default:"en",_examples:["en"],data_type:"text"}}},Body_apply_image_image_background_removal__post:{title:"Body_apply_image_image_background_removal__post",type:"object",properties:{image:{title:"image",type:"string",format:"binary",_examples:["http://files.gladia.io/test/test.png"],data_type:"image"},image_url:{title:"image_url",type:"string",_examples:["http://files.gladia.io/test/test.png"],data_type:"url"}}},Body_apply_image_image_colorization__post:{title:"Body_apply_image_image_colorization__post",type:"object",properties:{image:{title:"image",type:"string",format:"binary",_examples:["http://files.gladia.io/test/test.png"],data_type:"image"},image_url:{title:"image_url",type:"string",_examples:["http://files.gladia.io/test/test.png"],data_type:"url"}}},Body_apply_image_image_face_bluring__post:{title:"Body_apply_image_image_face_bluring__post",type:"object",properties:{image:{title:"image",type:"string",format:"binary",_examples:["http://files.gladia.io/test/test.png"],data_type:"image"},image_url:{title:"image_url",type:"string",_examples:["http://files.gladia.io/test/test.png"],data_type:"url"}}},Body_apply_image_image_uncolorization__post:{title:"Body_apply_image_image_uncolorization__post",type:"object",properties:{image:{title:"image",type:"string",format:"binary",_examples:["http://files.gladia.io/test/test.png"],data_type:"image"},image_url:{title:"image_url",type:"string",_examples:["http://files.gladia.io/test/test.png"],data_type:"url"}}},Body_apply_image_text_asciify__post:{title:"Body_apply_image_text_asciify__post",type:"object",properties:{image:{title:"image",type:"string",format:"binary",_examples:["http://files.gladia.io/test/test.png"],data_type:"image"},image_url:{title:"image_url",type:"string",_examples:["http://files.gladia.io/test/test.png"],data_type:"url"}}},Body_apply_image_text_classification__post:{title:"Body_apply_image_text_classification__post",type:"object",properties:{image:{title:"image",type:"string",format:"binary",_examples:["http://files.gladia.io/test/test.png"],data_type:"image"},image_url:{title:"image_url",type:"string",_examples:["http://files.gladia.io/test/test.png"],data_type:"url"},top_k:{title:"top_k",type:"integer",default:1,_examples:[1],data_type:"int"}}},Body_apply_image_text_ocr__post:{title:"Body_apply_image_text_ocr__post",type:"object",properties:{image:{title:"image",type:"string",format:"binary",_examples:["http://files.gladia.io/test/test.png"],data_type:"image"},image_url:{title:"image_url",type:"string",_examples:["http://files.gladia.io/test/test.png"],data_type:"url"},source_language:{title:"source_language",type:"string",default:"en",_examples:["en"],data_type:"text"}}},Body_apply_text_image_image_generation__post:{title:"Body_apply_text_image_image_generation__post",required:["prompt","samples","steps","seed","scale"],type:"object",properties:{prompt:{title:"prompt",type:"string",_examples:["the Eiffel tower landing on the moon"],data_type:"text"},samples:{title:"samples",type:"integer",_examples:[1],data_type:"int"},steps:{title:"steps",type:"integer",_examples:[40],data_type:"int"},seed:{title:"seed",type:"integer",_examples:[396916372],data_type:"int"},scale:{title:"scale",type:"number",_examples:[7.5],data_type:"float"}}},Body_apply_text_text_autocorrect__post:{title:"Body_apply_text_text_autocorrect__post",required:["sentence"],type:"object",properties:{sentence:{title:"sentence",type:"string",_examples:["Text to corrcte"],data_type:"text"}}},Body_apply_text_text_emotion_recognition__post:{title:"Body_apply_text_text_emotion_recognition__post",required:["text"],type:"object",properties:{text:{title:"text",type:"string",_examples:["I like you. I love you"],data_type:"text"}}},Body_apply_text_text_hate_speech_detection__post:{title:"Body_apply_text_text_hate_speech_detection__post",required:["text"],type:"object",properties:{text:{title:"text",type:"string",_examples:["I hate you piece of shit"],data_type:"text"}}},Body_apply_text_text_keyword_extraction__post:{title:"Body_apply_text_text_keyword_extraction__post",required:["text"],type:"object",properties:{text:{title:"text",type:"string",_examples:["The Crown is a historical drama streaming television series about the reign of Queen Elizabeth II, created and principally written by Peter Morgan, and produced by Left Bank Pictures and Sony Pictures Television for Netflix."],data_type:"text"}}},Body_apply_text_text_language_detection__post:{title:"Body_apply_text_text_language_detection__post",required:["text"],type:"object",properties:{text:{title:"text",type:"string",_examples:["Input text to perform language detection on"],data_type:"text"}}},Body_apply_text_text_language_generation__post:{title:"Body_apply_text_text_language_generation__post",required:["text"],type:"object",properties:{text:{title:"text",type:"string",_examples:["Input text to start generation from"],data_type:"text"}}},Body_apply_text_text_named_entity_recognition__post:{title:"Body_apply_text_text_named_entity_recognition__post",required:["text"],type:"object",properties:{text:{title:"text",type:"string",_examples:["Hugging Face Inc. is a company based in New York City. Its headquarters are in DUMBO, therefore very close to the Manhattan Bridge."],data_type:"text"}}},Body_apply_text_text_next_sentence_prediction__post:{title:"Body_apply_text_text_next_sentence_prediction__post",required:["sentence_1","sentence_2"],type:"object",properties:{sentence_1:{title:"sentence_1",type:"string",_examples:["I like you."],data_type:"text"},sentence_2:{title:"sentence_2",type:"string",_examples:["But it's not about you."],data_type:"text"}}},Body_apply_text_text_next_word_prediction__post:{title:"Body_apply_text_text_next_word_prediction__post",required:["sentence"],type:"object",properties:{sentence:{title:"sentence",type:"string",_examples:["I think therefore I"],data_type:"text"}}},Body_apply_text_text_plural__post:{title:"Body_apply_text_text_plural__post",required:["word"],type:"object",properties:{word:{title:"word",type:"string",_examples:["cat"],data_type:"text"},count:{title:"count",type:"integer",default:2,_examples:[2],data_type:"int"}}},Body_apply_text_text_programming_language_generation__post:{title:"Body_apply_text_text_programming_language_generation__post",required:["code_snippet"],type:"object",properties:{code_snippet:{title:"code_snippet",type:"string",_examples:["def is_palendrome(s):"],data_type:"text"}}},Body_apply_text_text_question_answering__post:{title:"Body_apply_text_text_question_answering__post",required:["context","question"],type:"object",properties:{context:{title:"context",type:"string",_examples:["My name is Clara and I live in Berkeley."],data_type:"text"},question:{title:"question",type:"string",_examples:["What's my name?"],data_type:"text"}}},Body_apply_text_text_sentence_paraphraser__post:{title:"Body_apply_text_text_sentence_paraphraser__post",required:["context"],type:"object",properties:{context:{title:"context",type:"string",_examples:["Once, a group of frogs was roaming around the forest in search of water."],data_type:"text"}}},Body_apply_text_text_sentiment_analysis__post:{title:"Body_apply_text_text_sentiment_analysis__post",required:["text"],type:"object",properties:{text:{title:"text",type:"string",_examples:["I like you. I love you"],data_type:"text"}}},Body_apply_text_text_similarity__post:{title:"Body_apply_text_text_similarity__post",required:["sentence_1","sentence_2"],type:"object",properties:{sentence_1:{title:"sentence_1",type:"string",_examples:["I like banana"],data_type:"text"},sentence_2:{title:"sentence_2",type:"string",_examples:["I hate banana"],data_type:"text"}}},Body_apply_text_text_word_alignment__post:{title:"Body_apply_text_text_word_alignment__post",required:["input_string_language_1","input_string_language_2"],type:"object",properties:{input_string_language_1:{title:"input_string_language_1",type:"string",_examples:["Sentence from first language"],data_type:"text"},input_string_language_2:{title:"input_string_language_2",type:"string",_examples:["来自 第一 语言的 句子"],data_type:"text"}}},HTTPValidationError:{title:"HTTPValidationError",type:"object",properties:{detail:{title:"Detail",type:"array",items:{$ref:"#/components/schemas/ValidationError"}}}},ValidationError:{title:"ValidationError",required:["loc","msg","type"],type:"object",properties:{loc:{title:"Location",type:"array",items:{anyOf:[{type:"string"},{type:"integer"}]}},msg:{title:"Message",type:"string"},type:{title:"Error Type",type:"string"}}}},securitySchemes:{x_gladia_key:{type:"apiKey",in:"header",name:"x-gladia-key"}}},security:[{x_gladia_key:[]}]}},3413:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SDK_VERSION=void 0,t.SDK_VERSION="0.1.0"},4044:function(e,t){"use strict";var n=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var o,r=0,a=t.length;r<a;r++)!o&&r in t||(o||(o=Array.prototype.slice.call(t,0,r)),o[r]=t[r]);return e.concat(o||Array.prototype.slice.call(t))};function o(e){return e[0].toUpperCase()+e.substring(1)}Object.defineProperty(t,"__esModule",{value:!0}),t.kebabToCamelCase=t.kebabToSnakeCase=t.kebabToPascalCase=t.uncapitalizeFirst=t.capitalizeFirst=void 0,t.capitalizeFirst=o,t.uncapitalizeFirst=function(e){return e[0].toLowerCase()+e.substring(1)},t.kebabToPascalCase=function(e){return e.split("-").map((function(e){return o(e)})).join("")},t.kebabToSnakeCase=function(e){return e.replace(/-/g,"_")},t.kebabToCamelCase=function(e){var t=e.split("-");return n([t.shift()],t.map((function(e){return o(e)})),!0).join("")}},8778:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_DEFAULT_MODEL=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=t.TEXT_TEXT_LANGUAGE_GENERATION_DEFAULT_MODEL=t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_LANGUAGE_DETECTION_DEFAULT_MODEL=t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=t.TEXT_TEXT_KEYWORD_EXTRACTION_DEFAULT_MODEL=t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE=t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=t.TEXT_TEXT_HATE_SPEECH_DETECTION_DEFAULT_MODEL=t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=t.TEXT_TEXT_EMOTION_RECOGNITION_DEFAULT_MODEL=t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=t.TEXT_TEXT_AUTOCORRECT_DEFAULT_MODEL=t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE=t.TEXT_TEXT_AUTOCORRECT_MODELS=t.TEXT_IMAGE_IMAGE_GENERATION_DEFAULT_MODEL=t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE=t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=t.IMAGE_TEXT_OCR_DEFAULT_MODEL=t.IMAGE_TEXT_OCR_CONTENT_TYPE=t.IMAGE_TEXT_OCR_MODELS=t.IMAGE_TEXT_CLASSIFICATION_DEFAULT_MODEL=t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE=t.IMAGE_TEXT_CLASSIFICATION_MODELS=t.IMAGE_TEXT_ASCIIFY_DEFAULT_MODEL=t.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE=t.IMAGE_TEXT_ASCIIFY_MODELS=t.IMAGE_IMAGE_UNCOLORIZATION_DEFAULT_MODEL=t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=t.IMAGE_IMAGE_FACE_BLURING_DEFAULT_MODEL=t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE=t.IMAGE_IMAGE_FACE_BLURING_MODELS=t.IMAGE_IMAGE_COLORIZATION_DEFAULT_MODEL=t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_COLORIZATION_MODELS=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_DEFAULT_MODEL=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_DEFAULT_MODEL=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=void 0,t.TEXT_TEXT_WORD_ALIGNMENT_DEFAULT_MODEL=t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE=t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=t.TEXT_TEXT_SIMILARITY_DEFAULT_MODEL=t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE=t.TEXT_TEXT_SIMILARITY_MODELS=t.TEXT_TEXT_SENTIMENT_ANALYSIS_DEFAULT_MODEL=t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE=t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=t.TEXT_TEXT_SENTENCE_PARAPHRASER_DEFAULT_MODEL=t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE=t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=t.TEXT_TEXT_QUESTION_ANSWERING_DEFAULT_MODEL=t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE=t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_DEFAULT_MODEL=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_PLURAL_DEFAULT_MODEL=t.TEXT_TEXT_PLURAL_CONTENT_TYPE=t.TEXT_TEXT_PLURAL_MODELS=t.TEXT_TEXT_NEXT_WORD_PREDICTION_DEFAULT_MODEL=t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_DEFAULT_MODEL=void 0,t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=["coqui_english_huge_vocab"],t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE="multipart/form-data",t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_DEFAULT_MODEL="coqui_english_huge_vocab",t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=["mobilenet","xception"],t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_BACKGROUND_REMOVAL_DEFAULT_MODEL="xception",t.IMAGE_IMAGE_COLORIZATION_MODELS=["deoldify-artistic","deoldify-stable"],t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_COLORIZATION_DEFAULT_MODEL="deoldify-stable",t.IMAGE_IMAGE_FACE_BLURING_MODELS=["ageitgey"],t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_FACE_BLURING_DEFAULT_MODEL="ageitgey",t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=["v1"],t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_UNCOLORIZATION_DEFAULT_MODEL="v1",t.IMAGE_TEXT_ASCIIFY_MODELS=["ramesh-aditya"],t.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_ASCIIFY_DEFAULT_MODEL="ramesh-aditya",t.IMAGE_TEXT_CLASSIFICATION_MODELS=["alexnet","convnext_base","convnext_large","convnext_small","convnext_tiny","densenet121","densenet161","densenet169","densenet201","efficientnet_b0","efficientnet_b1_v1","efficientnet_b1_v2","efficientnet_b2","efficientnet_b3","efficientnet_b4","efficientnet_b5","efficientnet_b6","efficientnet_b7","efficientnet_v2_l","efficientnet_v2_m","efficientnet_v2_s","googlenet","googlenet_quantized_fbgemm_v1","inception_v3","inception_v3_fbgemm_v1","mnasnet0_5","mnasnet0_75","mnasnet1_0","mnasnet1_3","mobilenet_v2_quantized_qnnpack_v1","mobilenet_v2_v1","mobilenet_v2_v2","mobilenet_v3_large_quantized_qnnpack_v1","mobilenet_v3_large_v1","mobilenet_v3_large_v2","mobilenet_v3_small","regnet_x_16gf_v1","regnet_x_16gf_v2","regnet_x_1_6gf_v1","regnet_x_1_6gf_v2","regnet_x_32gf_v1","regnet_x_32gf_v2","regnet_x_3_2gf_v1","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_x_400mf_v2","regnet_x_800mf_v1","regnet_x_800mf_v2","regnet_x_8gf_v1","regnet_x_8gf_v2","regnet_y_128gf_swag_e2e_v1","regnet_y_128gf_swag_linear_v1","regnet_y_16gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","regnet_y_16gf_v1","regnet_y_16gf_v2","regnet_y_1_6gf_v1","regnet_y_1_6gf_v2","regnet_y_32gf_swag_e2e_v1","regnet_y_32gf_swag_linear_v1","regnet_y_32gf_v1","regnet_y_32gf_v2","regnet_y_3_2gf_v1","regnet_y_3_2gf_v2","regnet_y_400mf_v1","regnet_y_400mf_v2","regnet_y_8gf_v1","regnet_y_8gf_v2","resnet152_v1","resnet152_v2","resnet18","resnet18_quantized_fbgemm_v1","resnet34","resnet50_quantized_fbgemm_v1","resnet50_quantized_fbgemm_v2","resnet50_v1","resnet50_v2","resnext101_32x8d_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","resnext101_32x8d_v1","resnext101_32x8d_v2","resnext101_64x4d_quantized_fbgemm_v1","resnext101_64x4d_v1","resnext50_32x4d_v1","resnext50_32x4d_v2","shufflenet_v2_x0_5","shufflenet_v2_x0_5_quantized_fbgemm_v1","shufflenet_v2_x1_0","shufflenet_v2_x1_0_quantized_fbgemm_v1","shufflenet_v2_x1_5","shufflenet_v2_x1_5_quantized_fbgemm_v1","shufflenet_v2_x2_0","shufflenet_v2_x2_0_quantized_fbgemm_v1","squeezenet1_0","squeezenet1_1","swin_b","swin_s","swin_t","vgg11","vgg11_bn","vgg13","vgg13_bn","vgg16_bn","vgg16_v1","vgg19","vgg19_bn","vit_b_16_swag_e2e_v1","vit_b_16_swag_linear_v1","vit_b_16_v1","vit_b_32","vit_h_14_swag_e2e_v1","vit_h_14_swag_linear_v1","vit_l_16_swag_e2e_v1","vit_l_16_swag_linear_v1","vit_l_16_v1","vit_l_32","wide_resnet101_2_v1","wide_resnet101_2_v2"],t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_CLASSIFICATION_DEFAULT_MODEL="alexnet",t.IMAGE_TEXT_OCR_MODELS=["easy-ocr","tesseract-default","tesseract-denoising"],t.IMAGE_TEXT_OCR_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_OCR_DEFAULT_MODEL="easy-ocr",t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=["stable-diffusion"],t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_IMAGE_IMAGE_GENERATION_DEFAULT_MODEL="stable-diffusion",t.TEXT_TEXT_AUTOCORRECT_MODELS=["flexudy-t5-base-multi-sentence-doctor"],t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AUTOCORRECT_DEFAULT_MODEL="flexudy-t5-base-multi-sentence-doctor",t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=["mrm8488-t5-base-finetuned-emotion"],t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_EMOTION_RECOGNITION_DEFAULT_MODEL="mrm8488-t5-base-finetuned-emotion",t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=["Hate-speech-CNERG-dehatebert-mono-english"],t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_HATE_SPEECH_DETECTION_DEFAULT_MODEL="Hate-speech-CNERG-dehatebert-mono-english",t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=["keybert-paraphrase-MiniLM-L6-v2","keybert-paraphrase-multilingual-MiniLM-L12-v2"],t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_KEYWORD_EXTRACTION_DEFAULT_MODEL="keybert-paraphrase-MiniLM-L6-v2",t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=["toftrup-etal-2021","xlm-roberta-base-language-detection"],t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_DETECTION_DEFAULT_MODEL="xlm-roberta-base-language-detection",t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=["EleutherAI-gpt-neo-2_7B"],t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_GENERATION_DEFAULT_MODEL="EleutherAI-gpt-neo-2_7B",t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=["dbmdz-bert-large-cased-finetuned-conll03-english"],t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_DEFAULT_MODEL="dbmdz-bert-large-cased-finetuned-conll03-english",t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=["bert-base-uncased"],t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_DEFAULT_MODEL="bert-base-uncased",t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=["albert-base-v2","bert-base-uncased","distilbert-base-uncased","roberta-base"],t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_WORD_PREDICTION_DEFAULT_MODEL="distilbert-base-uncased",t.TEXT_TEXT_PLURAL_MODELS=["inflect"],t.TEXT_TEXT_PLURAL_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PLURAL_DEFAULT_MODEL="inflect",t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=["sentdex-GPyT"],t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_DEFAULT_MODEL="sentdex-GPyT",t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=["deepset-roberta-base-squad2","deepset_bert-base-cased-squad2","distilbert-base-cased-distilled-squad","mfeb-albert-xxlarge-v2-squad2","mrm8488-bert-tiny-5-finetuned-squadv2"],t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_QUESTION_ANSWERING_DEFAULT_MODEL="deepset_bert-base-cased-squad2",t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality"],t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTENCE_PARAPHRASER_DEFAULT_MODEL="ramsrigouthamg-t5-large-paraphraser-diverse-high-quality",t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=["distilbert-base-uncased","distilbert-base-uncased-finetuned-sst-2-english","nlptown-bert-base-multilingual-uncased-sentiment","zero-shot-classification-facebook-bart-large-mnli"],t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTIMENT_ANALYSIS_DEFAULT_MODEL="nlptown-bert-base-multilingual-uncased-sentiment",t.TEXT_TEXT_SIMILARITY_MODELS=["all-MiniLM-L6-v2"],t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SIMILARITY_DEFAULT_MODEL="all-MiniLM-L6-v2",t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=["bert-base-multilingual-cased"],t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_WORD_ALIGNMENT_DEFAULT_MODEL="bert-base-multilingual-cased"},6117:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNotDefined=t.isDefined=void 0,t.isDefined=function(e){return null!=e},t.isNotDefined=function(e){return null==e}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={exports:{}};return e[o].call(a.exports,a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o=n(3465);return o.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,