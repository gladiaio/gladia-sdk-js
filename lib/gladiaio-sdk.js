!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("gladiaio_sdk",[],t):"object"==typeof exports?exports.gladiaio_sdk=t():e.gladiaio_sdk=t()}(this,(()=>(()=>{var e={8917:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(9669),o=n.n(r),i=n(6026),a=n.n(i),s=n(5327),_=n.n(s),u=n(4097),T=n.n(u),p=n(4867);async function l(e){const t=function(e){const t=new Headers(e.headers);if(e.auth){const n=e.auth.username||"",r=e.auth.password?decodeURI(encodeURIComponent(e.auth.password)):"";t.set("Authorization",`Basic ${btoa(n+":"+r)}`)}const n=e.method.toUpperCase(),r={headers:t,method:n};"GET"!==n&&"HEAD"!==n&&(r.body=e.data),e.mode&&(r.mode=e.mode),e.cache&&(r.cache=e.cache),e.integrity&&(r.integrity=e.integrity),e.redirect&&(r.redirect=e.redirect),e.referrer&&(r.referrer=e.referrer),(0,p.isUndefined)(e.withCredentials)||(r.credentials=e.withCredentials?"include":"omit");const o=T()(e.baseURL,e.url),i=_()(o,e.params,e.paramsSerializer);return new Request(i,r)}(e),n=[E(t,e)];e.timeout&&e.timeout>0&&n.push(new Promise((n=>{setTimeout((()=>{const r=e.timeoutErrorMessage?e.timeoutErrorMessage:"timeout of "+e.timeout+"ms exceeded";n(d(r,e,"ECONNABORTED",t))}),e.timeout)})));const r=await Promise.race(n);return new Promise(((t,n)=>{r instanceof Error?n(r):"[object Function]"===Object.prototype.toString.call(e.settle)?e.settle(t,n,r):a()(t,n,r)}))}async function E(e,t){let n;try{n=await fetch(e)}catch(n){return d("Network Error",t,"ERR_NETWORK",e)}const r={ok:n.ok,status:n.status,statusText:n.statusText,headers:new Headers(n.headers),config:t,request:e};if(n.status>=200&&204!==n.status)switch(t.responseType){case"arraybuffer":r.data=await n.arrayBuffer();break;case"blob":r.data=await n.blob();break;case"json":r.data=await n.json();break;case"formData":r.data=await n.formData();break;default:r.data=await n.text()}return r}function d(e,t,n,r,i){return o().AxiosError&&"function"==typeof o().AxiosError?new(o().AxiosError)(e,o().AxiosError[n],t,r,i):function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}(new Error(e),t,n,r,i)}},9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),i=n(4372),a=n(5327),s=n(4097),_=n(4109),u=n(7985),T=n(7874),p=n(2648),l=n(644),E=n(205);e.exports=function(e){return new Promise((function(t,n){var d,c=e.data,f=e.headers,m=e.responseType;function g(){e.cancelToken&&e.cancelToken.unsubscribe(d),e.signal&&e.signal.removeEventListener("abort",d)}r.isFormData(c)&&r.isStandardBrowserEnv()&&delete f["Content-Type"];var N=new XMLHttpRequest;if(e.auth){var y=e.auth.username||"",O=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";f.Authorization="Basic "+btoa(y+":"+O)}var h=s(e.baseURL,e.url);function A(){if(N){var r="getAllResponseHeaders"in N?_(N.getAllResponseHeaders()):null,i={data:m&&"text"!==m&&"json"!==m?N.response:N.responseText,status:N.status,statusText:N.statusText,headers:r,config:e,request:N};o((function(e){t(e),g()}),(function(e){n(e),g()}),i),N=null}}if(N.open(e.method.toUpperCase(),a(h,e.params,e.paramsSerializer),!0),N.timeout=e.timeout,"onloadend"in N?N.onloadend=A:N.onreadystatechange=function(){N&&4===N.readyState&&(0!==N.status||N.responseURL&&0===N.responseURL.indexOf("file:"))&&setTimeout(A)},N.onabort=function(){N&&(n(new p("Request aborted",p.ECONNABORTED,e,N)),N=null)},N.onerror=function(){n(new p("Network Error",p.ERR_NETWORK,e,N,N)),N=null},N.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||T;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new p(t,r.clarifyTimeoutError?p.ETIMEDOUT:p.ECONNABORTED,e,N)),N=null},r.isStandardBrowserEnv()){var v=(e.withCredentials||u(h))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;v&&(f[e.xsrfHeaderName]=v)}"setRequestHeader"in N&&r.forEach(f,(function(e,t){void 0===c&&"content-type"===t.toLowerCase()?delete f[t]:N.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(N.withCredentials=!!e.withCredentials),m&&"json"!==m&&(N.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&N.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&N.upload&&N.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(d=function(e){N&&(n(!e||e&&e.type?new l:e),N.abort(),N=null)},e.cancelToken&&e.cancelToken.subscribe(d),e.signal&&(e.signal.aborted?d():e.signal.addEventListener("abort",d))),c||(c=null);var I=E(h);I&&-1===["http","https","file"].indexOf(I)?n(new p("Unsupported protocol "+I+":",p.ERR_BAD_REQUEST,e)):N.send(c)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),i=n(321),a=n(7185),s=function e(t){var n=new i(t),s=o(i.prototype.request,n);return r.extend(s,i.prototype,n),r.extend(s,n),s.create=function(n){return e(a(t,n))},s}(n(5546));s.Axios=i,s.CanceledError=n(644),s.CancelToken=n(4972),s.isCancel=n(6502),s.VERSION=n(7288).version,s.toFormData=n(7675),s.AxiosError=n(2648),s.Cancel=s.CanceledError,s.all=function(e){return Promise.all(e)},s.spread=n(8713),s.isAxiosError=n(6268),e.exports=s,e.exports.default=s},4972:(e,t,n)=>{"use strict";var r=n(644);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},644:(e,t,n)=>{"use strict";var r=n(2648);function o(e){r.call(this,null==e?"canceled":e,r.ERR_CANCELED),this.name="CanceledError"}n(4867).inherits(o,r,{__CANCEL__:!0}),e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),i=n(782),a=n(3572),s=n(7185),_=n(4097),u=n(4875),T=u.validators;function p(e){this.defaults=e,this.interceptors={request:new i,response:new i}}p.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=s(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&u.assertOptions(n,{silentJSONParsing:T.transitional(T.boolean),forcedJSONParsing:T.transitional(T.boolean),clarifyTimeoutError:T.transitional(T.boolean)},!1);var r=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var i,_=[];if(this.interceptors.response.forEach((function(e){_.push(e.fulfilled,e.rejected)})),!o){var p=[a,void 0];for(Array.prototype.unshift.apply(p,r),p=p.concat(_),i=Promise.resolve(t);p.length;)i=i.then(p.shift(),p.shift());return i}for(var l=t;r.length;){var E=r.shift(),d=r.shift();try{l=E(l)}catch(e){d(e);break}}try{i=a(l)}catch(e){return Promise.reject(e)}for(;_.length;)i=i.then(_.shift(),_.shift());return i},p.prototype.getUri=function(e){e=s(this.defaults,e);var t=_(e.baseURL,e.url);return o(t,e.params,e.paramsSerializer)},r.forEach(["delete","get","head","options"],(function(e){p.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(s(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}p.prototype[e]=t(),p.prototype[e+"Form"]=t(!0)})),e.exports=p},2648:(e,t,n)=>{"use strict";var r=n(4867);function o(e,t,n,r,o){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}r.inherits(o,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var i=o.prototype,a={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){a[e]={value:e}})),Object.defineProperties(o,a),Object.defineProperty(i,"isAxiosError",{value:!0}),o.from=function(e,t,n,a,s,_){var u=Object.create(i);return r.toFlatObject(e,u,(function(e){return e!==Error.prototype})),o.call(u,e.message,t,n,a,s),u.name=e.name,_&&Object.assign(u,_),u},e.exports=o},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),i=n(6502),a=n(5546),s=n(644);function _(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new s}e.exports=function(e){return _(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return _(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(_(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={};function o(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function i(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(e[n],t[n])}function a(e){if(!r.isUndefined(t[e]))return o(void 0,t[e])}function s(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(void 0,t[n])}function _(n){return n in t?o(e[n],t[n]):n in e?o(void 0,e[n]):void 0}var u={url:a,method:a,data:a,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:_};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||i,o=t(e);r.isUndefined(o)&&t!==_||(n[e]=o)})),n}},6026:(e,t,n)=>{"use strict";var r=n(2648);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(new r("Request failed with status code "+n.status,[r.ERR_BAD_REQUEST,r.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867),o=n(5546);e.exports=function(e,t,n){var i=this||o;return r.forEach(n,(function(n){e=n.call(i,e,t)})),e}},5546:(e,t,n)=>{"use strict";var r=n(4867),o=n(6016),i=n(2648),a=n(7874),s=n(7675),_={"Content-Type":"application/x-www-form-urlencoded"};function u(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var T,p={transitional:a,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(T=n(5448)),T),transformRequest:[function(e,t){if(o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e))return e;if(r.isArrayBufferView(e))return e.buffer;if(r.isURLSearchParams(e))return u(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var n,i=r.isObject(e),a=t&&t["Content-Type"];if((n=r.isFileList(e))||i&&"multipart/form-data"===a){var _=this.env&&this.env.FormData;return s(n?{"files[]":e}:e,_&&new _)}return i||"application/json"===a?(u(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||p.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,a=!n&&"json"===this.responseType;if(a||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw i.from(e,i.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:n(1623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){p.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){p.headers[e]=r.merge(_)})),e.exports=p},7874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:e=>{e.exports={version:"0.27.2"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},1623:e=>{e.exports=null},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},205:e=>{"use strict";e.exports=function(e){var t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},7675:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||new FormData;var n=[];function o(e){return null===e?"":r.isDate(e)?e.toISOString():r.isArrayBuffer(e)||r.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(i,a){if(r.isPlainObject(i)||r.isArray(i)){if(-1!==n.indexOf(i))throw Error("Circular reference detected in "+a);n.push(i),r.forEach(i,(function(n,i){if(!r.isUndefined(n)){var s,_=a?a+"."+i:i;if(n&&!a&&"object"==typeof n)if(r.endsWith(i,"{}"))n=JSON.stringify(n);else if(r.endsWith(i,"[]")&&(s=r.toArray(n)))return void s.forEach((function(e){!r.isUndefined(e)&&t.append(_,o(e))}));e(n,_)}})),n.pop()}else t.append(a,o(i))}(e),t}},4875:(e,t,n)=>{"use strict";var r=n(7288).version,o=n(2648),i={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){i[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var a={};i.transitional=function(e,t,n){function i(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,s){if(!1===e)throw new o(i(r," has been removed"+(t?" in "+t:"")),o.ERR_DEPRECATED);return t&&!a[r]&&(a[r]=!0,console.warn(i(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,s)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new o("options must be an object",o.ERR_BAD_OPTION_VALUE);for(var r=Object.keys(e),i=r.length;i-- >0;){var a=r[i],s=t[a];if(s){var _=e[a],u=void 0===_||s(_,a,e);if(!0!==u)throw new o("option "+a+" must be "+u,o.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new o("Unknown option "+a,o.ERR_BAD_OPTION)}},validators:i}},4867:(e,t,n)=>{"use strict";var r,o=n(1849),i=Object.prototype.toString,a=(r=Object.create(null),function(e){var t=i.call(e);return r[t]||(r[t]=t.slice(8,-1).toLowerCase())});function s(e){return e=e.toLowerCase(),function(t){return a(t)===e}}function _(e){return Array.isArray(e)}function u(e){return void 0===e}var T=s("ArrayBuffer");function p(e){return null!==e&&"object"==typeof e}function l(e){if("object"!==a(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var E=s("Date"),d=s("File"),c=s("Blob"),f=s("FileList");function m(e){return"[object Function]"===i.call(e)}var g=s("URLSearchParams");function N(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),_(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}var y,O=(y="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return y&&e instanceof y});e.exports={isArray:_,isArrayBuffer:T,isBuffer:function(e){return null!==e&&!u(e)&&null!==e.constructor&&!u(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||i.call(e)===t||m(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&T(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:p,isPlainObject:l,isUndefined:u,isDate:E,isFile:d,isBlob:c,isFunction:m,isStream:function(e){return p(e)&&m(e.pipe)},isURLSearchParams:g,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:N,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):_(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)N(arguments[r],n);return t},extend:function(e,t,n){return N(t,(function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,n,r){e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,n&&Object.assign(e.prototype,n)},toFlatObject:function(e,t,n){var r,o,i,a={};t=t||{};do{for(o=(r=Object.getOwnPropertyNames(e)).length;o-- >0;)a[i=r[o]]||(t[i]=e[i],a[i]=!0);e=Object.getPrototypeOf(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:a,kindOfTest:s,endsWith:function(e,t,n){e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;var r=e.indexOf(t,n);return-1!==r&&r===n},toArray:function(e){if(!e)return null;var t=e.length;if(u(t))return null;for(var n=new Array(t);t-- >0;)n[t]=e[t];return n},isTypedArray:O,isFileList:f}},3682:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudioToText=void 0;var r=n(8778),o=n(1193),i=n(6117),a=function(){function e(e){this.params=e,this.httpClient=(0,o.getHttpClient)(this.params)}return e.prototype.audioTranscription=function(e){var t,n=new FormData;return(0,i.isDefined)(e.audio)&&n.append("audio",e.audio),(0,i.isDefined)(e.audio_url)&&n.append("audio_url",e.audio_url),(0,i.isDefined)(e.language)&&n.append("language",e.language),this.httpClient.post({url:"/audio/text/audio-transcription/",headers:{"Content-Type":this.params.useFetch?r.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:r.AUDIO_TEXT_AUDIO_TRANSCRIPTION_DEFAULT_MODEL},body:n})},e}();t.FromAudioToText=a},8490:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudio=void 0;var r=n(3682),o=function(){function e(e){this.fromAudioToTextInst=new r.FromAudioToText(e)}return e.prototype.toText=function(){return this.fromAudioToTextInst},e}();t.FromAudio=o},8814:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToImage=void 0;var r=n(8778),o=n(1193),i=n(6117),a=function(){function e(e){this.params=e,this.httpClient=(0,o.getHttpClient)(this.params)}return e.prototype.backgroundRemoval=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/background-removal/",headers:{"Content-Type":this.params.useFetch?r.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:r.IMAGE_IMAGE_BACKGROUND_REMOVAL_DEFAULT_MODEL},responseType:"arraybuffer",body:n})},e.prototype.colorization=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/colorization/",headers:{"Content-Type":this.params.useFetch?r.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:r.IMAGE_IMAGE_COLORIZATION_DEFAULT_MODEL},responseType:"arraybuffer",body:n})},e.prototype.faceBluring=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/face-bluring/",headers:{"Content-Type":this.params.useFetch?r.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:r.IMAGE_IMAGE_FACE_BLURING_DEFAULT_MODEL},responseType:"arraybuffer",body:n})},e.prototype.uncolorization=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/uncolorization/",headers:{"Content-Type":this.params.useFetch?r.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:r.IMAGE_IMAGE_UNCOLORIZATION_DEFAULT_MODEL},responseType:"arraybuffer",body:n})},e}();t.FromImageToImage=a},4802:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToText=void 0;var r=n(8778),o=n(1193),i=n(6117),a=function(){function e(e){this.params=e,this.httpClient=(0,o.getHttpClient)(this.params)}return e.prototype.asciify=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/text/asciify/",headers:{"Content-Type":this.params.useFetch?r.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:r.IMAGE_TEXT_ASCIIFY_DEFAULT_MODEL},body:n})},e.prototype.classification=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),(0,i.isDefined)(e.top_k)&&n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/image/text/classification/",headers:{"Content-Type":this.params.useFetch?r.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:r.IMAGE_TEXT_CLASSIFICATION_DEFAULT_MODEL},body:n})},e.prototype.ocr=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),(0,i.isDefined)(e.source_language)&&n.append("source_language",e.source_language),this.httpClient.post({url:"/image/text/ocr/",headers:{"Content-Type":this.params.useFetch?r.IMAGE_TEXT_OCR_CONTENT_TYPE:void 0},query:{model:null!==(t=e.model)&&void 0!==t?t:r.IMAGE_TEXT_OCR_DEFAULT_MODEL},body:n})},e}();t.FromImageToText=a},2062:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImage=void 0;var r=n(8814),o=n(4802),i=function(){function e(e){this.fromImageToImageInst=new r.FromImageToImage(e),this.fromImageToTextInst=new o.FromImageToText(e)}return e.prototype.toImage=function(){return this.fromImageToImageInst},e.prototype.toText=function(){return this.fromImageToTextInst},e}();t.FromImage=i},4153:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToImage=void 0;var r=n(8778),o=n(1193),i=n(6117),a=n(9142),s=function(){function e(e){this.params=e,this.httpClient=(0,o.getHttpClient)(this.params)}return e.prototype.imageGeneration=function(e){var t,n=new a.UrlFormData;return n.append("prompt",e.prompt),(0,i.isDefined)(e.samples)&&n.append("samples",String(e.samples)),(0,i.isDefined)(e.steps)&&n.append("steps",String(e.steps)),(0,i.isDefined)(e.seed)&&n.append("seed",String(e.seed)),this.httpClient.post({url:"/text/image/image-generation/",headers:{"Content-Type":r.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_IMAGE_IMAGE_GENERATION_DEFAULT_MODEL},responseType:"arraybuffer",body:n.toString()})},e}();t.FromTextToImage=s},8271:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToText=void 0;var r=n(8778),o=n(1193),i=n(6117),a=n(9142),s=function(){function e(e){this.params=e,this.httpClient=(0,o.getHttpClient)(this.params)}return e.prototype.autocorrect=function(e){var t,n=new a.UrlFormData;return n.append("sentence",e.sentence),this.httpClient.post({url:"/text/text/autocorrect/",headers:{"Content-Type":r.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_AUTOCORRECT_DEFAULT_MODEL},body:n.toString()})},e.prototype.emotionRecognition=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/emotion-recognition/",headers:{"Content-Type":r.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_EMOTION_RECOGNITION_DEFAULT_MODEL},body:n.toString()})},e.prototype.hateSpeechDetection=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/hate-speech-detection/",headers:{"Content-Type":r.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_HATE_SPEECH_DETECTION_DEFAULT_MODEL},body:n.toString()})},e.prototype.keywordExtraction=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/keyword-extraction/",headers:{"Content-Type":r.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_KEYWORD_EXTRACTION_DEFAULT_MODEL},body:n.toString()})},e.prototype.languageDetection=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-detection/",headers:{"Content-Type":r.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_LANGUAGE_DETECTION_DEFAULT_MODEL},body:n.toString()})},e.prototype.languageGeneration=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-generation/",headers:{"Content-Type":r.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_LANGUAGE_GENERATION_DEFAULT_MODEL},body:n.toString()})},e.prototype.namedEntityRecognition=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/named-entity-recognition/",headers:{"Content-Type":r.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_DEFAULT_MODEL},body:n.toString()})},e.prototype.nextSentencePrediction=function(e){var t,n=new a.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/next-sentence-prediction/",headers:{"Content-Type":r.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_DEFAULT_MODEL},body:n.toString()})},e.prototype.nextWordPrediction=function(e){var t,n=new a.UrlFormData;return n.append("sentence",e.sentence),this.httpClient.post({url:"/text/text/next-word-prediction/",headers:{"Content-Type":r.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_NEXT_WORD_PREDICTION_DEFAULT_MODEL},body:n.toString()})},e.prototype.plural=function(e){var t,n=new a.UrlFormData;return n.append("word",e.word),(0,i.isDefined)(e.count)&&n.append("count",String(e.count)),this.httpClient.post({url:"/text/text/plural/",headers:{"Content-Type":r.TEXT_TEXT_PLURAL_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_PLURAL_DEFAULT_MODEL},body:n.toString()})},e.prototype.programmingLanguageGeneration=function(e){var t,n=new a.UrlFormData;return n.append("code_snippet",e.code_snippet),this.httpClient.post({url:"/text/text/programming-language-generation/",headers:{"Content-Type":r.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_DEFAULT_MODEL},body:n.toString()})},e.prototype.questionAnswering=function(e){var t,n=new a.UrlFormData;return n.append("context",e.context),n.append("question",e.question),this.httpClient.post({url:"/text/text/question-answering/",headers:{"Content-Type":r.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_QUESTION_ANSWERING_DEFAULT_MODEL},body:n.toString()})},e.prototype.sentenceParaphraser=function(e){var t,n=new a.UrlFormData;return n.append("context",e.context),this.httpClient.post({url:"/text/text/sentence-paraphraser/",headers:{"Content-Type":r.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_SENTENCE_PARAPHRASER_DEFAULT_MODEL},body:n.toString()})},e.prototype.sentimentAnalysis=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/sentiment-analysis/",headers:{"Content-Type":r.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_SENTIMENT_ANALYSIS_DEFAULT_MODEL},body:n.toString()})},e.prototype.similarity=function(e){var t,n=new a.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/similarity/",headers:{"Content-Type":r.TEXT_TEXT_SIMILARITY_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_SIMILARITY_DEFAULT_MODEL},body:n.toString()})},e.prototype.wordAlignment=function(e){var t,n=new a.UrlFormData;return n.append("input_string_language_1",e.input_string_language_1),n.append("input_string_language_2",e.input_string_language_2),this.httpClient.post({url:"/text/text/word-alignment/",headers:{"Content-Type":r.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_WORD_ALIGNMENT_DEFAULT_MODEL},body:n.toString()})},e.prototype.articleGeneration=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.title)&&n.append("title",e.title),this.httpClient.post({url:"/text/text/article-generation/",headers:{"Content-Type":r.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_ARTICLE_GENERATION_DEFAULT_MODEL},body:n.toString()})},e.prototype.adGeneration=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.keywords)&&n.append("keywords",e.keywords),this.httpClient.post({url:"/text/text/ad-generation/",headers:{"Content-Type":r.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_AD_GENERATION_DEFAULT_MODEL},body:n.toString()})},e.prototype.summarization=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/summarization/",headers:{"Content-Type":r.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_SUMMARIZATION_DEFAULT_MODEL},body:n.toString()})},e.prototype.translation=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),(0,i.isDefined)(e.source)&&n.append("source",e.source),(0,i.isDefined)(e.target)&&n.append("target",e.target),this.httpClient.post({url:"/text/text/translation/",headers:{"Content-Type":r.TEXT_TEXT_TRANSLATION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_TRANSLATION_DEFAULT_MODEL},body:n.toString()})},e.prototype.intentClassification=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/intent-classification/",headers:{"Content-Type":r.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE},query:{model:null!==(t=e.model)&&void 0!==t?t:r.TEXT_TEXT_INTENT_CLASSIFICATION_DEFAULT_MODEL},body:n.toString()})},e}();t.FromTextToText=s},9438:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromText=void 0;var r=n(4153),o=n(8271),i=function(){function e(e){this.fromTextToImageInst=new r.FromTextToImage(e),this.fromTextToTextInst=new o.FromTextToText(e)}return e.prototype.toImage=function(){return this.fromTextToImageInst},e.prototype.toText=function(){return this.fromTextToTextInst},e}();t.FromText=i},4085:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Shortcuts=void 0;var n=function(){function e(){}return e.prototype.audioTranscription=function(e){return this.fromAudio().toText().audioTranscription(e)},e.prototype.backgroundRemoval=function(e){return this.fromImage().toImage().backgroundRemoval(e)},e.prototype.colorization=function(e){return this.fromImage().toImage().colorization(e)},e.prototype.faceBluring=function(e){return this.fromImage().toImage().faceBluring(e)},e.prototype.uncolorization=function(e){return this.fromImage().toImage().uncolorization(e)},e.prototype.asciify=function(e){return this.fromImage().toText().asciify(e)},e.prototype.classification=function(e){return this.fromImage().toText().classification(e)},e.prototype.ocr=function(e){return this.fromImage().toText().ocr(e)},e.prototype.imageGeneration=function(e){return this.fromText().toImage().imageGeneration(e)},e.prototype.autocorrect=function(e){return this.fromText().toText().autocorrect(e)},e.prototype.emotionRecognition=function(e){return this.fromText().toText().emotionRecognition(e)},e.prototype.hateSpeechDetection=function(e){return this.fromText().toText().hateSpeechDetection(e)},e.prototype.keywordExtraction=function(e){return this.fromText().toText().keywordExtraction(e)},e.prototype.languageDetection=function(e){return this.fromText().toText().languageDetection(e)},e.prototype.languageGeneration=function(e){return this.fromText().toText().languageGeneration(e)},e.prototype.namedEntityRecognition=function(e){return this.fromText().toText().namedEntityRecognition(e)},e.prototype.nextSentencePrediction=function(e){return this.fromText().toText().nextSentencePrediction(e)},e.prototype.nextWordPrediction=function(e){return this.fromText().toText().nextWordPrediction(e)},e.prototype.plural=function(e){return this.fromText().toText().plural(e)},e.prototype.programmingLanguageGeneration=function(e){return this.fromText().toText().programmingLanguageGeneration(e)},e.prototype.questionAnswering=function(e){return this.fromText().toText().questionAnswering(e)},e.prototype.sentenceParaphraser=function(e){return this.fromText().toText().sentenceParaphraser(e)},e.prototype.sentimentAnalysis=function(e){return this.fromText().toText().sentimentAnalysis(e)},e.prototype.similarity=function(e){return this.fromText().toText().similarity(e)},e.prototype.wordAlignment=function(e){return this.fromText().toText().wordAlignment(e)},e.prototype.articleGeneration=function(e){return this.fromText().toText().articleGeneration(e)},e.prototype.adGeneration=function(e){return this.fromText().toText().adGeneration(e)},e.prototype.summarization=function(e){return this.fromText().toText().summarization(e)},e.prototype.translation=function(e){return this.fromText().toText().translation(e)},e.prototype.intentClassification=function(e){return this.fromText().toText().intentClassification(e)},e}();t.Shortcuts=n},2889:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.GladiaClient=void 0;var a=n(4085),s=n(8490),_=n(2062),u=n(9438),T=function(e){function t(t){var n,r=this;r=e.call(this)||this;var o=i(i({},t),{useFetch:null!==(n=t.useFetch)&&void 0!==n&&n});return r.fromAudioInst=new s.FromAudio(o),r.fromImageInst=new _.FromImage(o),r.fromTextInst=new u.FromText(o),r}return o(t,e),t.prototype.fromAudio=function(){return this.fromAudioInst},t.prototype.fromImage=function(){return this.fromImageInst},t.prototype.fromText=function(){return this.fromTextInst},t}(a.Shortcuts);t.GladiaClient=T},3465:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.meta=t.GladiaClient=t.gladia=void 0;var s=n(2889);function _(e){return new s.GladiaClient(e)}t.gladia=_,t.default=_;var u=n(2889);Object.defineProperty(t,"GladiaClient",{enumerable:!0,get:function(){return u.GladiaClient}}),i(n(8778),t),t.meta=a(n(2168))},6976:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.axiosFetchAdapter=void 0,t.axiosFetchAdapter=function(){return Promise.resolve().then((function(){return i(n(8917))})).then((function(e){return e.default}))}},1193:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{_(r.next(e))}catch(e){i(e)}}function s(e){try{_(r.throw(e))}catch(e){i(e)}}function _(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}_((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getHttpClient=void 0;var s=a(n(9669)),_=n(6976),u=n(3413),T=n(6825);t.getHttpClient=function(e){var t,n,r,o;return(null!==(t=e.customHttpClient)&&void 0!==t?t:p)({baseHeaders:{"x-gladia-key":e.apiKey,"x-gladia-sdk":u.SDK_VERSION},baseUrl:null!==(n=e.baseUrl)&&void 0!==n?n:"https://v2-api.gladia.io",useFetch:null!==(r=e.useFetch)&&void 0!==r&&r,httpClientTimeout:null!==(o=e.httpClientTimeout)&&void 0!==o?o:3e5})};var p=function(e){var t=e.baseHeaders,n=e.baseUrl,a=e.useFetch,u=e.httpClientTimeout;return{post:function(e){var p;return o(this,void 0,void 0,(function(){var o,l,E,d,c,f,m;return i(this,(function(i){switch(i.label){case 0:return o=r(r({},t),e.headers),l="".concat(n).concat(e.url).concat((0,T.searchQueryParamSerializer)(e.query)),E=null!==(p=e.responseType)&&void 0!==p?p:"json",d=null!=u?u:3e5,a?(m={},[4,(0,_.axiosFetchAdapter)()]):[3,2];case 1:return m.adapter=i.sent(),f=m,[3,3];case 2:f={},i.label=3;case 3:return c=f,[2,s.default.post(l,e.body,r(r({headers:o,responseType:E},c),{timeout:d})).then((function(e){return e.data}))]}}))}))}}}},6825:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.searchParamDeserializer=t.searchParamSerializer=t.searchQueryParamSerializer=void 0;var r=n(6117);function o(e){return Object.entries(e).map((function(e){return t=e[0],n=e[1],Array.isArray(n)?"".concat(t,"=").concat(n.map((function(e){return i(e)})).join(",")):"string"==typeof n?"".concat(t,"=").concat(i(n)):"".concat(t,"=").concat(n);var t,n})).join("&")}function i(e){return encodeURI(e).replace(/,/g,"%2C")}function a(e){return decodeURI(e).replace(/%2C/g,",")}t.searchQueryParamSerializer=function(e){if((0,r.isNotDefined)(e))return"";var t=o(e);return 0===t.length?"":"?"+t},t.searchParamSerializer=o,t.searchParamDeserializer=function(e){return(0,r.isNotDefined)(e)||0===e.length?{}:Object.fromEntries(e.split("&").map((function(e){return e.split("=")})).map((function(e){var t=e[0],n=e[1];return n.includes(",")?[t,n.split(",")]:[t,n]})).map((function(e){var t=e[0],n=e[1];return"string"==typeof n?[t,a(n)]:[t,n.map(a)]})))}},9142:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrlFormData=void 0;var r=n(6825),o=function(){function e(e){this.data={},this.data=(0,r.searchParamDeserializer)(e)}return e.prototype.append=function(e,t){this.data[e]=t},e.prototype.get=function(e){return this.data[e]},e.prototype.toString=function(){return(0,r.searchParamSerializer)(this.data)},e}();t.UrlFormData=o},5485:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ENDPOINT_DEFS=void 0,t.ENDPOINT_DEFS=[{url:"/audio/text/audio-transcription/",inputType:"audio",outputType:"text",taskName:"audio-transcription",models:["coqui_english_huge_vocab"],defaultModel:"coqui_english_huge_vocab",inputBodyContentType:"multipart/form-data",params:[{in:"formData",type:"audio",name:"audio",required:!1},{in:"formData",type:"url",name:"audio_url",required:!1},{in:"formData",type:"string",name:"language",required:!1}]},{url:"/image/image/background-removal/",inputType:"image",outputType:"image",taskName:"background-removal",models:["mobilenet","xception"],defaultModel:"xception",inputBodyContentType:"multipart/form-data",params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/image/colorization/",inputType:"image",outputType:"image",taskName:"colorization",models:["deoldify-artistic","deoldify-stable"],defaultModel:"deoldify-stable",inputBodyContentType:"multipart/form-data",params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/image/face-bluring/",inputType:"image",outputType:"image",taskName:"face-bluring",models:["ageitgey"],defaultModel:"ageitgey",inputBodyContentType:"multipart/form-data",params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/image/uncolorization/",inputType:"image",outputType:"image",taskName:"uncolorization",models:["v1"],defaultModel:"v1",inputBodyContentType:"multipart/form-data",params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/text/asciify/",inputType:"image",outputType:"text",taskName:"asciify",models:["ramesh-aditya"],defaultModel:"ramesh-aditya",inputBodyContentType:"multipart/form-data",params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/text/classification/",inputType:"image",outputType:"text",taskName:"classification",models:["alexnet","convnext_base","convnext_large","convnext_small","convnext_tiny","densenet121","densenet161","densenet169","densenet201","efficientnet_b0","efficientnet_b1_v1","efficientnet_b1_v2","efficientnet_b2","efficientnet_b3","efficientnet_b4","efficientnet_b5","efficientnet_b6","efficientnet_b7","efficientnet_v2_l","efficientnet_v2_m","efficientnet_v2_s","googlenet","googlenet_quantized_fbgemm_v1","inception_v3","inception_v3_fbgemm_v1","mnasnet0_5","mnasnet0_75","mnasnet1_0","mnasnet1_3","mobilenet_v2_quantized_qnnpack_v1","mobilenet_v2_v1","mobilenet_v2_v2","mobilenet_v3_large_quantized_qnnpack_v1","mobilenet_v3_large_v1","mobilenet_v3_large_v2","mobilenet_v3_small","regnet_x_16gf_v1","regnet_x_16gf_v2","regnet_x_1_6gf_v1","regnet_x_1_6gf_v2","regnet_x_32gf_v1","regnet_x_32gf_v2","regnet_x_3_2gf_v1","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_x_400mf_v2","regnet_x_800mf_v1","regnet_x_800mf_v2","regnet_x_8gf_v1","regnet_x_8gf_v2","regnet_y_128gf_swag_e2e_v1","regnet_y_128gf_swag_linear_v1","regnet_y_16gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","regnet_y_16gf_v1","regnet_y_16gf_v2","regnet_y_1_6gf_v1","regnet_y_1_6gf_v2","regnet_y_32gf_swag_e2e_v1","regnet_y_32gf_swag_linear_v1","regnet_y_32gf_v1","regnet_y_32gf_v2","regnet_y_3_2gf_v1","regnet_y_3_2gf_v2","regnet_y_400mf_v1","regnet_y_400mf_v2","regnet_y_8gf_v1","regnet_y_8gf_v2","resnet152_v1","resnet152_v2","resnet18","resnet18_quantized_fbgemm_v1","resnet34","resnet50_quantized_fbgemm_v1","resnet50_quantized_fbgemm_v2","resnet50_v1","resnet50_v2","resnext101_32x8d_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","resnext101_32x8d_v1","resnext101_32x8d_v2","resnext101_64x4d_quantized_fbgemm_v1","resnext101_64x4d_v1","resnext50_32x4d_v1","resnext50_32x4d_v2","shufflenet_v2_x0_5","shufflenet_v2_x0_5_quantized_fbgemm_v1","shufflenet_v2_x1_0","shufflenet_v2_x1_0_quantized_fbgemm_v1","shufflenet_v2_x1_5","shufflenet_v2_x1_5_quantized_fbgemm_v1","shufflenet_v2_x2_0","shufflenet_v2_x2_0_quantized_fbgemm_v1","squeezenet1_0","squeezenet1_1","swin_b","swin_s","swin_t","vgg11","vgg11_bn","vgg13","vgg13_bn","vgg16_bn","vgg16_v1","vgg19","vgg19_bn","vit_b_16_swag_e2e_v1","vit_b_16_swag_linear_v1","vit_b_16_v1","vit_b_32","vit_h_14_swag_e2e_v1","vit_h_14_swag_linear_v1","vit_l_16_swag_e2e_v1","vit_l_16_swag_linear_v1","vit_l_16_v1","vit_l_32","wide_resnet101_2_v1","wide_resnet101_2_v2"],defaultModel:"alexnet",inputBodyContentType:"multipart/form-data",params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1},{in:"formData",type:"integer",name:"top_k",required:!1}]},{url:"/image/text/ocr/",inputType:"image",outputType:"text",taskName:"ocr",models:["easy-ocr","tesseract-default","tesseract-denoising"],defaultModel:"easy-ocr",inputBodyContentType:"multipart/form-data",params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1},{in:"formData",type:"string",name:"source_language",required:!1}]},{url:"/text/image/image-generation/",inputType:"text",outputType:"image",taskName:"image-generation",models:["stable-diffusion"],defaultModel:"stable-diffusion",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"prompt",required:!0},{in:"formData",type:"integer",name:"samples",required:!1},{in:"formData",type:"integer",name:"steps",required:!1},{in:"formData",type:"integer",name:"seed",required:!1}]},{url:"/text/text/autocorrect/",inputType:"text",outputType:"text",taskName:"autocorrect",models:["flexudy-t5-base-multi-sentence-doctor"],defaultModel:"flexudy-t5-base-multi-sentence-doctor",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"sentence",required:!0}]},{url:"/text/text/emotion-recognition/",inputType:"text",outputType:"text",taskName:"emotion-recognition",models:["mrm8488-t5-base-finetuned-emotion"],defaultModel:"mrm8488-t5-base-finetuned-emotion",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/hate-speech-detection/",inputType:"text",outputType:"text",taskName:"hate-speech-detection",models:["Hate-speech-CNERG-dehatebert-mono-english"],defaultModel:"Hate-speech-CNERG-dehatebert-mono-english",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/keyword-extraction/",inputType:"text",outputType:"text",taskName:"keyword-extraction",models:["keybert-paraphrase-MiniLM-L6-v2","keybert-paraphrase-multilingual-MiniLM-L12-v2"],defaultModel:"keybert-paraphrase-MiniLM-L6-v2",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/language-detection/",inputType:"text",outputType:"text",taskName:"language-detection",models:["toftrup-etal-2021","xlm-roberta-base-language-detection"],defaultModel:"xlm-roberta-base-language-detection",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/language-generation/",inputType:"text",outputType:"text",taskName:"language-generation",models:["EleutherAI-gpt-neo-2_7B"],defaultModel:"EleutherAI-gpt-neo-2_7B",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/named-entity-recognition/",inputType:"text",outputType:"text",taskName:"named-entity-recognition",models:["dbmdz-bert-large-cased-finetuned-conll03-english"],defaultModel:"dbmdz-bert-large-cased-finetuned-conll03-english",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/next-sentence-prediction/",inputType:"text",outputType:"text",taskName:"next-sentence-prediction",models:["bert-base-uncased"],defaultModel:"bert-base-uncased",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"sentence_1",required:!0},{in:"formData",type:"string",name:"sentence_2",required:!0}]},{url:"/text/text/next-word-prediction/",inputType:"text",outputType:"text",taskName:"next-word-prediction",models:["albert-base-v2","bert-base-uncased","distilbert-base-uncased","roberta-base"],defaultModel:"distilbert-base-uncased",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"sentence",required:!0}]},{url:"/text/text/plural/",inputType:"text",outputType:"text",taskName:"plural",models:["inflect"],defaultModel:"inflect",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"word",required:!0},{in:"formData",type:"integer",name:"count",required:!1}]},{url:"/text/text/programming-language-generation/",inputType:"text",outputType:"text",taskName:"programming-language-generation",models:["sentdex-GPyT"],defaultModel:"sentdex-GPyT",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"code_snippet",required:!0}]},{url:"/text/text/question-answering/",inputType:"text",outputType:"text",taskName:"question-answering",models:["deepset-roberta-base-squad2","deepset_bert-base-cased-squad2","distilbert-base-cased-distilled-squad","mfeb-albert-xxlarge-v2-squad2","mrm8488-bert-tiny-5-finetuned-squadv2"],defaultModel:"deepset_bert-base-cased-squad2",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"context",required:!0},{in:"formData",type:"string",name:"question",required:!0}]},{url:"/text/text/sentence-paraphraser/",inputType:"text",outputType:"text",taskName:"sentence-paraphraser",models:["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality"],defaultModel:"ramsrigouthamg-t5-large-paraphraser-diverse-high-quality",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"context",required:!0}]},{url:"/text/text/sentiment-analysis/",inputType:"text",outputType:"text",taskName:"sentiment-analysis",models:["distilbert-base-uncased","distilbert-base-uncased-finetuned-sst-2-english","nlptown-bert-base-multilingual-uncased-sentiment","zero-shot-classification-facebook-bart-large-mnli"],defaultModel:"nlptown-bert-base-multilingual-uncased-sentiment",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/similarity/",inputType:"text",outputType:"text",taskName:"similarity",models:["all-MiniLM-L6-v2"],defaultModel:"all-MiniLM-L6-v2",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"sentence_1",required:!0},{in:"formData",type:"string",name:"sentence_2",required:!0}]},{url:"/text/text/word-alignment/",inputType:"text",outputType:"text",taskName:"word-alignment",models:["bert-base-multilingual-cased"],defaultModel:"bert-base-multilingual-cased",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"input_string_language_1",required:!0},{in:"formData",type:"string",name:"input_string_language_2",required:!0}]},{url:"/text/text/article-generation/",inputType:"text",outputType:"text",taskName:"article-generation",models:["fast-gpt-j"],defaultModel:"fast-gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"title",required:!1}]},{url:"/text/text/ad-generation/",inputType:"text",outputType:"text",taskName:"ad-generation",models:["gpt-j"],defaultModel:"gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"array",name:"keywords",required:!1}]},{url:"/text/text/summarization/",inputType:"text",outputType:"text",taskName:"summarization",models:["bart-large-cnn"],defaultModel:"bart-large-cnn",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"text",required:!1}]},{url:"/text/text/translation/",inputType:"text",outputType:"text",taskName:"translation",models:["nllb-200-3-3b"],defaultModel:"nllb-200-3-3b",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"text",required:!1},{in:"formData",type:"string",name:"source",required:!1},{in:"formData",type:"string",name:"target",required:!1}]},{url:"/text/text/intent-classification/",inputType:"text",outputType:"text",taskName:"intent-classification",models:["fast-gpt-j"],defaultModel:"fast-gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",params:[{in:"formData",type:"string",name:"text",required:!1}]}]},3109:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getContentTypeName=void 0,t.getContentTypeName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),r=e.taskName.replace(/-/g,"_").toUpperCase();return"".concat(t,"_").concat(n,"_").concat(r,"_CONTENT_TYPE")}},5611:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaultValueName=void 0,t.getDefaultValueName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),r=e.taskName.replace(/-/g,"_").toUpperCase();return"".concat(t,"_").concat(n,"_").concat(r,"_DEFAULT_MODEL")}},7896:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getEndpointsByInputOutput=t.getEndpoints=void 0;var r=n(5485);function o(){return r.ENDPOINT_DEFS}t.getEndpoints=o,t.getEndpointsByInputOutput=function(){for(var e={},t=0,n=o();t<n.length;t++){var r=n[t];r.inputType in e||(e[r.inputType]={}),r.outputType in e[r.inputType]||(e[r.inputType][r.outputType]=[]),e[r.inputType][r.outputType].push(r)}return e}},1916:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInputModelType=void 0;var r=n(4044);t.getInputModelType=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Inputs")}},7897:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMethodName=void 0;var r=n(4044);t.getMethodName=function(e){return(0,r.kebabToCamelCase)(e.taskName)}},555:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelTypeName=void 0;var r=n(4044);t.getModelTypeName=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Model")}},797:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelValuesName=void 0;var r=n(4044);t.getModelValuesName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),o=(0,r.kebabToSnakeCase)(e.taskName).toUpperCase();return"".concat(t,"_").concat(n,"_").concat(o,"_MODELS")}},7179:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelType=void 0;var r=n(4044);t.getOutputModelType=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Outputs")}},2168:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelType=t.getInputModelType=t.getModelValuesName=t.getModelTypeName=t.getMethodName=t.getDefaultValueName=t.getContentTypeName=t.getEndpointsByInputOutput=t.getEndpoints=void 0;var r=n(7896);Object.defineProperty(t,"getEndpoints",{enumerable:!0,get:function(){return r.getEndpoints}}),Object.defineProperty(t,"getEndpointsByInputOutput",{enumerable:!0,get:function(){return r.getEndpointsByInputOutput}});var o=n(3109);Object.defineProperty(t,"getContentTypeName",{enumerable:!0,get:function(){return o.getContentTypeName}});var i=n(5611);Object.defineProperty(t,"getDefaultValueName",{enumerable:!0,get:function(){return i.getDefaultValueName}});var a=n(7897);Object.defineProperty(t,"getMethodName",{enumerable:!0,get:function(){return a.getMethodName}});var s=n(555);Object.defineProperty(t,"getModelTypeName",{enumerable:!0,get:function(){return s.getModelTypeName}});var _=n(797);Object.defineProperty(t,"getModelValuesName",{enumerable:!0,get:function(){return _.getModelValuesName}});var u=n(1916);Object.defineProperty(t,"getInputModelType",{enumerable:!0,get:function(){return u.getInputModelType}});var T=n(7179);Object.defineProperty(t,"getOutputModelType",{enumerable:!0,get:function(){return T.getOutputModelType}})},3413:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SDK_VERSION=void 0,t.SDK_VERSION="0.1.0"},4044:function(e,t){"use strict";var n=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))};function r(e){return e[0].toUpperCase()+e.substring(1)}Object.defineProperty(t,"__esModule",{value:!0}),t.kebabToCamelCase=t.kebabToSnakeCase=t.kebabToPascalCase=t.uncapitalizeFirst=t.capitalizeFirst=void 0,t.capitalizeFirst=r,t.uncapitalizeFirst=function(e){return e[0].toLowerCase()+e.substring(1)},t.kebabToPascalCase=function(e){return e.split("-").map((function(e){return r(e)})).join("")},t.kebabToSnakeCase=function(e){return e.replace(/-/g,"_")},t.kebabToCamelCase=function(e){var t=e.split("-");return n([t.shift()],t.map((function(e){return r(e)})),!0).join("")}},8778:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_DEFAULT_MODEL=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=t.TEXT_TEXT_LANGUAGE_GENERATION_DEFAULT_MODEL=t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_LANGUAGE_DETECTION_DEFAULT_MODEL=t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=t.TEXT_TEXT_KEYWORD_EXTRACTION_DEFAULT_MODEL=t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE=t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=t.TEXT_TEXT_HATE_SPEECH_DETECTION_DEFAULT_MODEL=t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=t.TEXT_TEXT_EMOTION_RECOGNITION_DEFAULT_MODEL=t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=t.TEXT_TEXT_AUTOCORRECT_DEFAULT_MODEL=t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE=t.TEXT_TEXT_AUTOCORRECT_MODELS=t.TEXT_IMAGE_IMAGE_GENERATION_DEFAULT_MODEL=t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE=t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=t.IMAGE_TEXT_OCR_DEFAULT_MODEL=t.IMAGE_TEXT_OCR_CONTENT_TYPE=t.IMAGE_TEXT_OCR_MODELS=t.IMAGE_TEXT_CLASSIFICATION_DEFAULT_MODEL=t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE=t.IMAGE_TEXT_CLASSIFICATION_MODELS=t.IMAGE_TEXT_ASCIIFY_DEFAULT_MODEL=t.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE=t.IMAGE_TEXT_ASCIIFY_MODELS=t.IMAGE_IMAGE_UNCOLORIZATION_DEFAULT_MODEL=t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=t.IMAGE_IMAGE_FACE_BLURING_DEFAULT_MODEL=t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE=t.IMAGE_IMAGE_FACE_BLURING_MODELS=t.IMAGE_IMAGE_COLORIZATION_DEFAULT_MODEL=t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_COLORIZATION_MODELS=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_DEFAULT_MODEL=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_DEFAULT_MODEL=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=void 0,t.TEXT_TEXT_INTENT_CLASSIFICATION_DEFAULT_MODEL=t.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE=t.TEXT_TEXT_INTENT_CLASSIFICATION_MODELS=t.TEXT_TEXT_TRANSLATION_DEFAULT_MODEL=t.TEXT_TEXT_TRANSLATION_CONTENT_TYPE=t.TEXT_TEXT_TRANSLATION_MODELS=t.TEXT_TEXT_SUMMARIZATION_DEFAULT_MODEL=t.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE=t.TEXT_TEXT_SUMMARIZATION_MODELS=t.TEXT_TEXT_AD_GENERATION_DEFAULT_MODEL=t.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_AD_GENERATION_MODELS=t.TEXT_TEXT_ARTICLE_GENERATION_DEFAULT_MODEL=t.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_ARTICLE_GENERATION_MODELS=t.TEXT_TEXT_WORD_ALIGNMENT_DEFAULT_MODEL=t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE=t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=t.TEXT_TEXT_SIMILARITY_DEFAULT_MODEL=t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE=t.TEXT_TEXT_SIMILARITY_MODELS=t.TEXT_TEXT_SENTIMENT_ANALYSIS_DEFAULT_MODEL=t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE=t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=t.TEXT_TEXT_SENTENCE_PARAPHRASER_DEFAULT_MODEL=t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE=t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=t.TEXT_TEXT_QUESTION_ANSWERING_DEFAULT_MODEL=t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE=t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_DEFAULT_MODEL=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_PLURAL_DEFAULT_MODEL=t.TEXT_TEXT_PLURAL_CONTENT_TYPE=t.TEXT_TEXT_PLURAL_MODELS=t.TEXT_TEXT_NEXT_WORD_PREDICTION_DEFAULT_MODEL=t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_DEFAULT_MODEL=void 0,t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=["coqui_english_huge_vocab"],t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE="multipart/form-data",t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_DEFAULT_MODEL="coqui_english_huge_vocab",t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=["mobilenet","xception"],t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_BACKGROUND_REMOVAL_DEFAULT_MODEL="xception",t.IMAGE_IMAGE_COLORIZATION_MODELS=["deoldify-artistic","deoldify-stable"],t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_COLORIZATION_DEFAULT_MODEL="deoldify-stable",t.IMAGE_IMAGE_FACE_BLURING_MODELS=["ageitgey"],t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_FACE_BLURING_DEFAULT_MODEL="ageitgey",t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=["v1"],t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_UNCOLORIZATION_DEFAULT_MODEL="v1",t.IMAGE_TEXT_ASCIIFY_MODELS=["ramesh-aditya"],t.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_ASCIIFY_DEFAULT_MODEL="ramesh-aditya",t.IMAGE_TEXT_CLASSIFICATION_MODELS=["alexnet","convnext_base","convnext_large","convnext_small","convnext_tiny","densenet121","densenet161","densenet169","densenet201","efficientnet_b0","efficientnet_b1_v1","efficientnet_b1_v2","efficientnet_b2","efficientnet_b3","efficientnet_b4","efficientnet_b5","efficientnet_b6","efficientnet_b7","efficientnet_v2_l","efficientnet_v2_m","efficientnet_v2_s","googlenet","googlenet_quantized_fbgemm_v1","inception_v3","inception_v3_fbgemm_v1","mnasnet0_5","mnasnet0_75","mnasnet1_0","mnasnet1_3","mobilenet_v2_quantized_qnnpack_v1","mobilenet_v2_v1","mobilenet_v2_v2","mobilenet_v3_large_quantized_qnnpack_v1","mobilenet_v3_large_v1","mobilenet_v3_large_v2","mobilenet_v3_small","regnet_x_16gf_v1","regnet_x_16gf_v2","regnet_x_1_6gf_v1","regnet_x_1_6gf_v2","regnet_x_32gf_v1","regnet_x_32gf_v2","regnet_x_3_2gf_v1","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_x_400mf_v2","regnet_x_800mf_v1","regnet_x_800mf_v2","regnet_x_8gf_v1","regnet_x_8gf_v2","regnet_y_128gf_swag_e2e_v1","regnet_y_128gf_swag_linear_v1","regnet_y_16gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","regnet_y_16gf_v1","regnet_y_16gf_v2","regnet_y_1_6gf_v1","regnet_y_1_6gf_v2","regnet_y_32gf_swag_e2e_v1","regnet_y_32gf_swag_linear_v1","regnet_y_32gf_v1","regnet_y_32gf_v2","regnet_y_3_2gf_v1","regnet_y_3_2gf_v2","regnet_y_400mf_v1","regnet_y_400mf_v2","regnet_y_8gf_v1","regnet_y_8gf_v2","resnet152_v1","resnet152_v2","resnet18","resnet18_quantized_fbgemm_v1","resnet34","resnet50_quantized_fbgemm_v1","resnet50_quantized_fbgemm_v2","resnet50_v1","resnet50_v2","resnext101_32x8d_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","resnext101_32x8d_v1","resnext101_32x8d_v2","resnext101_64x4d_quantized_fbgemm_v1","resnext101_64x4d_v1","resnext50_32x4d_v1","resnext50_32x4d_v2","shufflenet_v2_x0_5","shufflenet_v2_x0_5_quantized_fbgemm_v1","shufflenet_v2_x1_0","shufflenet_v2_x1_0_quantized_fbgemm_v1","shufflenet_v2_x1_5","shufflenet_v2_x1_5_quantized_fbgemm_v1","shufflenet_v2_x2_0","shufflenet_v2_x2_0_quantized_fbgemm_v1","squeezenet1_0","squeezenet1_1","swin_b","swin_s","swin_t","vgg11","vgg11_bn","vgg13","vgg13_bn","vgg16_bn","vgg16_v1","vgg19","vgg19_bn","vit_b_16_swag_e2e_v1","vit_b_16_swag_linear_v1","vit_b_16_v1","vit_b_32","vit_h_14_swag_e2e_v1","vit_h_14_swag_linear_v1","vit_l_16_swag_e2e_v1","vit_l_16_swag_linear_v1","vit_l_16_v1","vit_l_32","wide_resnet101_2_v1","wide_resnet101_2_v2"],t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_CLASSIFICATION_DEFAULT_MODEL="alexnet",t.IMAGE_TEXT_OCR_MODELS=["easy-ocr","tesseract-default","tesseract-denoising"],t.IMAGE_TEXT_OCR_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_OCR_DEFAULT_MODEL="easy-ocr",t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=["stable-diffusion"],t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_IMAGE_IMAGE_GENERATION_DEFAULT_MODEL="stable-diffusion",t.TEXT_TEXT_AUTOCORRECT_MODELS=["flexudy-t5-base-multi-sentence-doctor"],t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AUTOCORRECT_DEFAULT_MODEL="flexudy-t5-base-multi-sentence-doctor",t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=["mrm8488-t5-base-finetuned-emotion"],t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_EMOTION_RECOGNITION_DEFAULT_MODEL="mrm8488-t5-base-finetuned-emotion",t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=["Hate-speech-CNERG-dehatebert-mono-english"],t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_HATE_SPEECH_DETECTION_DEFAULT_MODEL="Hate-speech-CNERG-dehatebert-mono-english",t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=["keybert-paraphrase-MiniLM-L6-v2","keybert-paraphrase-multilingual-MiniLM-L12-v2"],t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_KEYWORD_EXTRACTION_DEFAULT_MODEL="keybert-paraphrase-MiniLM-L6-v2",t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=["toftrup-etal-2021","xlm-roberta-base-language-detection"],t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_DETECTION_DEFAULT_MODEL="xlm-roberta-base-language-detection",t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=["EleutherAI-gpt-neo-2_7B"],t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_GENERATION_DEFAULT_MODEL="EleutherAI-gpt-neo-2_7B",t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=["dbmdz-bert-large-cased-finetuned-conll03-english"],t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_DEFAULT_MODEL="dbmdz-bert-large-cased-finetuned-conll03-english",t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=["bert-base-uncased"],t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_DEFAULT_MODEL="bert-base-uncased",t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=["albert-base-v2","bert-base-uncased","distilbert-base-uncased","roberta-base"],t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_WORD_PREDICTION_DEFAULT_MODEL="distilbert-base-uncased",t.TEXT_TEXT_PLURAL_MODELS=["inflect"],t.TEXT_TEXT_PLURAL_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PLURAL_DEFAULT_MODEL="inflect",t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=["sentdex-GPyT"],t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_DEFAULT_MODEL="sentdex-GPyT",t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=["deepset-roberta-base-squad2","deepset_bert-base-cased-squad2","distilbert-base-cased-distilled-squad","mfeb-albert-xxlarge-v2-squad2","mrm8488-bert-tiny-5-finetuned-squadv2"],t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_QUESTION_ANSWERING_DEFAULT_MODEL="deepset_bert-base-cased-squad2",t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality"],t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTENCE_PARAPHRASER_DEFAULT_MODEL="ramsrigouthamg-t5-large-paraphraser-diverse-high-quality",t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=["distilbert-base-uncased","distilbert-base-uncased-finetuned-sst-2-english","nlptown-bert-base-multilingual-uncased-sentiment","zero-shot-classification-facebook-bart-large-mnli"],t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTIMENT_ANALYSIS_DEFAULT_MODEL="nlptown-bert-base-multilingual-uncased-sentiment",t.TEXT_TEXT_SIMILARITY_MODELS=["all-MiniLM-L6-v2"],t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SIMILARITY_DEFAULT_MODEL="all-MiniLM-L6-v2",t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=["bert-base-multilingual-cased"],t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_WORD_ALIGNMENT_DEFAULT_MODEL="bert-base-multilingual-cased",t.TEXT_TEXT_ARTICLE_GENERATION_MODELS=["fast-gpt-j"],t.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_ARTICLE_GENERATION_DEFAULT_MODEL="fast-gpt-j",t.TEXT_TEXT_AD_GENERATION_MODELS=["gpt-j"],t.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AD_GENERATION_DEFAULT_MODEL="gpt-j",t.TEXT_TEXT_SUMMARIZATION_MODELS=["bart-large-cnn"],t.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SUMMARIZATION_DEFAULT_MODEL="bart-large-cnn",t.TEXT_TEXT_TRANSLATION_MODELS=["nllb-200-3-3b"],t.TEXT_TEXT_TRANSLATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_TRANSLATION_DEFAULT_MODEL="nllb-200-3-3b",t.TEXT_TEXT_INTENT_CLASSIFICATION_MODELS=["fast-gpt-j"],t.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_INTENT_CLASSIFICATION_DEFAULT_MODEL="fast-gpt-j"},6117:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNotDefined=t.isDefined=void 0,t.isDefined=function(e){return null!=e},t.isNotDefined=function(e){return null==e}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r=n(3465);return r.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,