!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("gladiaio_sdk",[],t):"object"==typeof exports?exports.gladiaio_sdk=t():e.gladiaio_sdk=t()}(window,(function(){return function(){var e={9669:function(e,t,n){e.exports=n(1609)},5448:function(e,t,n){"use strict";var r=n(4867),o=n(6026),i=n(4372),a=n(5327),u=n(4097),s=n(4109),p=n(7985),c=n(7874),_=n(2648),l=n(644),f=n(205);e.exports=function(e){return new Promise((function(t,n){var d,T=e.data,m=e.headers,g=e.responseType;function y(){e.cancelToken&&e.cancelToken.unsubscribe(d),e.signal&&e.signal.removeEventListener("abort",d)}r.isFormData(T)&&r.isStandardBrowserEnv()&&delete m["Content-Type"];var E=new XMLHttpRequest;if(e.auth){var v=e.auth.username||"",h=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";m.Authorization="Basic "+btoa(v+":"+h)}var N=u(e.baseURL,e.url);function x(){if(E){var r="getAllResponseHeaders"in E?s(E.getAllResponseHeaders()):null,i={data:g&&"text"!==g&&"json"!==g?E.response:E.responseText,status:E.status,statusText:E.statusText,headers:r,config:e,request:E};o((function(e){t(e),y()}),(function(e){n(e),y()}),i),E=null}}if(E.open(e.method.toUpperCase(),a(N,e.params,e.paramsSerializer),!0),E.timeout=e.timeout,"onloadend"in E?E.onloadend=x:E.onreadystatechange=function(){E&&4===E.readyState&&(0!==E.status||E.responseURL&&0===E.responseURL.indexOf("file:"))&&setTimeout(x)},E.onabort=function(){E&&(n(new _("Request aborted",_.ECONNABORTED,e,E)),E=null)},E.onerror=function(){n(new _("Network Error",_.ERR_NETWORK,e,E,E)),E=null},E.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||c;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new _(t,r.clarifyTimeoutError?_.ETIMEDOUT:_.ECONNABORTED,e,E)),E=null},r.isStandardBrowserEnv()){var b=(e.withCredentials||p(N))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;b&&(m[e.xsrfHeaderName]=b)}"setRequestHeader"in E&&r.forEach(m,(function(e,t){void 0===T&&"content-type"===t.toLowerCase()?delete m[t]:E.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(E.withCredentials=!!e.withCredentials),g&&"json"!==g&&(E.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&E.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&E.upload&&E.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(d=function(e){E&&(n(!e||e&&e.type?new l:e),E.abort(),E=null)},e.cancelToken&&e.cancelToken.subscribe(d),e.signal&&(e.signal.aborted?d():e.signal.addEventListener("abort",d))),T||(T=null);var O=f(N);O&&-1===["http","https","file"].indexOf(O)?n(new _("Unsupported protocol "+O+":",_.ERR_BAD_REQUEST,e)):E.send(T)}))}},1609:function(e,t,n){"use strict";var r=n(4867),o=n(1849),i=n(321),a=n(7185),u=function e(t){var n=new i(t),u=o(i.prototype.request,n);return r.extend(u,i.prototype,n),r.extend(u,n),u.create=function(n){return e(a(t,n))},u}(n(5546));u.Axios=i,u.CanceledError=n(644),u.CancelToken=n(4972),u.isCancel=n(6502),u.VERSION=n(7288).version,u.toFormData=n(7675),u.AxiosError=n(2648),u.Cancel=u.CanceledError,u.all=function(e){return Promise.all(e)},u.spread=n(8713),u.isAxiosError=n(6268),e.exports=u,e.exports.default=u},4972:function(e,t,n){"use strict";var r=n(644);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},644:function(e,t,n){"use strict";var r=n(2648);function o(e){r.call(this,null==e?"canceled":e,r.ERR_CANCELED),this.name="CanceledError"}n(4867).inherits(o,r,{__CANCEL__:!0}),e.exports=o},6502:function(e){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:function(e,t,n){"use strict";var r=n(4867),o=n(5327),i=n(782),a=n(3572),u=n(7185),s=n(4097),p=n(4875),c=p.validators;function _(e){this.defaults=e,this.interceptors={request:new i,response:new i}}_.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=u(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&p.assertOptions(n,{silentJSONParsing:c.transitional(c.boolean),forcedJSONParsing:c.transitional(c.boolean),clarifyTimeoutError:c.transitional(c.boolean)},!1);var r=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var i,s=[];if(this.interceptors.response.forEach((function(e){s.push(e.fulfilled,e.rejected)})),!o){var _=[a,void 0];for(Array.prototype.unshift.apply(_,r),_=_.concat(s),i=Promise.resolve(t);_.length;)i=i.then(_.shift(),_.shift());return i}for(var l=t;r.length;){var f=r.shift(),d=r.shift();try{l=f(l)}catch(e){d(e);break}}try{i=a(l)}catch(e){return Promise.reject(e)}for(;s.length;)i=i.then(s.shift(),s.shift());return i},_.prototype.getUri=function(e){e=u(this.defaults,e);var t=s(e.baseURL,e.url);return o(t,e.params,e.paramsSerializer)},r.forEach(["delete","get","head","options"],(function(e){_.prototype[e]=function(t,n){return this.request(u(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(u(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}_.prototype[e]=t(),_.prototype[e+"Form"]=t(!0)})),e.exports=_},2648:function(e,t,n){"use strict";var r=n(4867);function o(e,t,n,r,o){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}r.inherits(o,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var i=o.prototype,a={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){a[e]={value:e}})),Object.defineProperties(o,a),Object.defineProperty(i,"isAxiosError",{value:!0}),o.from=function(e,t,n,a,u,s){var p=Object.create(i);return r.toFlatObject(e,p,(function(e){return e!==Error.prototype})),o.call(p,e.message,t,n,a,u),p.name=e.name,s&&Object.assign(p,s),p},e.exports=o},782:function(e,t,n){"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:function(e,t,n){"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},3572:function(e,t,n){"use strict";var r=n(4867),o=n(8527),i=n(6502),a=n(5546),u=n(644);function s(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new u}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return s(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},7185:function(e,t,n){"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={};function o(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function i(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(e[n],t[n])}function a(e){if(!r.isUndefined(t[e]))return o(void 0,t[e])}function u(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(void 0,t[n])}function s(n){return n in t?o(e[n],t[n]):n in e?o(void 0,e[n]):void 0}var p={url:a,method:a,data:a,baseURL:u,transformRequest:u,transformResponse:u,paramsSerializer:u,timeout:u,timeoutMessage:u,withCredentials:u,adapter:u,responseType:u,xsrfCookieName:u,xsrfHeaderName:u,onUploadProgress:u,onDownloadProgress:u,decompress:u,maxContentLength:u,maxBodyLength:u,beforeRedirect:u,transport:u,httpAgent:u,httpsAgent:u,cancelToken:u,socketPath:u,responseEncoding:u,validateStatus:s};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=p[e]||i,o=t(e);r.isUndefined(o)&&t!==s||(n[e]=o)})),n}},6026:function(e,t,n){"use strict";var r=n(2648);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(new r("Request failed with status code "+n.status,[r.ERR_BAD_REQUEST,r.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}},8527:function(e,t,n){"use strict";var r=n(4867),o=n(5546);e.exports=function(e,t,n){var i=this||o;return r.forEach(n,(function(n){e=n.call(i,e,t)})),e}},5546:function(e,t,n){"use strict";var r=n(4867),o=n(6016),i=n(2648),a=n(7874),u=n(7675),s={"Content-Type":"application/x-www-form-urlencoded"};function p(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var c,_={transitional:a,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(c=n(5448)),c),transformRequest:[function(e,t){if(o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e))return e;if(r.isArrayBufferView(e))return e.buffer;if(r.isURLSearchParams(e))return p(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var n,i=r.isObject(e),a=t&&t["Content-Type"];if((n=r.isFileList(e))||i&&"multipart/form-data"===a){var s=this.env&&this.env.FormData;return u(n?{"files[]":e}:e,s&&new s)}return i||"application/json"===a?(p(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||_.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,a=!n&&"json"===this.responseType;if(a||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw i.from(e,i.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:n(1623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){_.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){_.headers[e]=r.merge(s)})),e.exports=_},7874:function(e){"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:function(e){e.exports={version:"0.27.2"}},1849:function(e){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:function(e,t,n){"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:function(e){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:function(e,t,n){"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:function(e){"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:function(e,t,n){"use strict";var r=n(4867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},7985:function(e,t,n){"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:function(e,t,n){"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},1623:function(e){e.exports=null},4109:function(e,t,n){"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},205:function(e){"use strict";e.exports=function(e){var t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}},8713:function(e){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},7675:function(e,t,n){"use strict";var r=n(4867);e.exports=function(e,t){t=t||new FormData;var n=[];function o(e){return null===e?"":r.isDate(e)?e.toISOString():r.isArrayBuffer(e)||r.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(i,a){if(r.isPlainObject(i)||r.isArray(i)){if(-1!==n.indexOf(i))throw Error("Circular reference detected in "+a);n.push(i),r.forEach(i,(function(n,i){if(!r.isUndefined(n)){var u,s=a?a+"."+i:i;if(n&&!a&&"object"==typeof n)if(r.endsWith(i,"{}"))n=JSON.stringify(n);else if(r.endsWith(i,"[]")&&(u=r.toArray(n)))return void u.forEach((function(e){!r.isUndefined(e)&&t.append(s,o(e))}));e(n,s)}})),n.pop()}else t.append(a,o(i))}(e),t}},4875:function(e,t,n){"use strict";var r=n(7288).version,o=n(2648),i={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){i[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var a={};i.transitional=function(e,t,n){function i(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,u){if(!1===e)throw new o(i(r," has been removed"+(t?" in "+t:"")),o.ERR_DEPRECATED);return t&&!a[r]&&(a[r]=!0,console.warn(i(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,u)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new o("options must be an object",o.ERR_BAD_OPTION_VALUE);for(var r=Object.keys(e),i=r.length;i-- >0;){var a=r[i],u=t[a];if(u){var s=e[a],p=void 0===s||u(s,a,e);if(!0!==p)throw new o("option "+a+" must be "+p,o.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new o("Unknown option "+a,o.ERR_BAD_OPTION)}},validators:i}},4867:function(e,t,n){"use strict";var r,o=n(1849),i=Object.prototype.toString,a=(r=Object.create(null),function(e){var t=i.call(e);return r[t]||(r[t]=t.slice(8,-1).toLowerCase())});function u(e){return e=e.toLowerCase(),function(t){return a(t)===e}}function s(e){return Array.isArray(e)}function p(e){return void 0===e}var c=u("ArrayBuffer");function _(e){return null!==e&&"object"==typeof e}function l(e){if("object"!==a(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var f=u("Date"),d=u("File"),T=u("Blob"),m=u("FileList");function g(e){return"[object Function]"===i.call(e)}var y=u("URLSearchParams");function E(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}var v,h=(v="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return v&&e instanceof v});e.exports={isArray:s,isArrayBuffer:c,isBuffer:function(e){return null!==e&&!p(e)&&null!==e.constructor&&!p(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||i.call(e)===t||g(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&c(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:_,isPlainObject:l,isUndefined:p,isDate:f,isFile:d,isBlob:T,isFunction:g,isStream:function(e){return _(e)&&g(e.pipe)},isURLSearchParams:y,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:E,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):s(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)E(arguments[r],n);return t},extend:function(e,t,n){return E(t,(function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,n,r){e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,n&&Object.assign(e.prototype,n)},toFlatObject:function(e,t,n){var r,o,i,a={};t=t||{};do{for(o=(r=Object.getOwnPropertyNames(e)).length;o-- >0;)a[i=r[o]]||(t[i]=e[i],a[i]=!0);e=Object.getPrototypeOf(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:a,kindOfTest:u,endsWith:function(e,t,n){e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;var r=e.indexOf(t,n);return-1!==r&&r===n},toArray:function(e){if(!e)return null;var t=e.length;if(p(t))return null;for(var n=new Array(t);t-- >0;)n[t]=e[t];return n},isTypedArray:h,isFileList:m}},9662:function(e,t,n){var r=n(614),o=n(6330),i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not a function")}},9483:function(e,t,n){var r=n(4411),o=n(6330),i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not a constructor")}},6077:function(e,t,n){var r=n(614),o=String,i=TypeError;e.exports=function(e){if("object"==typeof e||r(e))return e;throw i("Can't set "+o(e)+" as a prototype")}},5787:function(e,t,n){var r=n(7976),o=TypeError;e.exports=function(e,t){if(r(t,e))return e;throw o("Incorrect invocation")}},9670:function(e,t,n){var r=n(111),o=String,i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not an object")}},1318:function(e,t,n){var r=n(5656),o=n(1400),i=n(6244),a=function(e){return function(t,n,a){var u,s=r(t),p=i(s),c=o(a,p);if(e&&n!=n){for(;p>c;)if((u=s[c++])!=u)return!0}else for(;p>c;c++)if((e||c in s)&&s[c]===n)return e||c||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},206:function(e,t,n){var r=n(1702);e.exports=r([].slice)},7072:function(e,t,n){var r=n(5112)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},e(i)}catch(e){}return n}},4326:function(e,t,n){var r=n(1702),o=r({}.toString),i=r("".slice);e.exports=function(e){return i(o(e),8,-1)}},648:function(e,t,n){var r=n(1694),o=n(614),i=n(4326),a=n(5112)("toStringTag"),u=Object,s="Arguments"==i(function(){return arguments}());e.exports=r?i:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=u(e),a))?n:s?i(t):"Object"==(r=i(t))&&o(t.callee)?"Arguments":r}},9920:function(e,t,n){var r=n(2597),o=n(3887),i=n(1236),a=n(3070);e.exports=function(e,t,n){for(var u=o(t),s=a.f,p=i.f,c=0;c<u.length;c++){var _=u[c];r(e,_)||n&&r(n,_)||s(e,_,p(t,_))}}},8880:function(e,t,n){var r=n(9781),o=n(3070),i=n(9114);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},9114:function(e){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:function(e,t,n){"use strict";var r=n(4948),o=n(3070),i=n(9114);e.exports=function(e,t,n){var a=r(t);a in e?o.f(e,a,i(0,n)):e[a]=n}},8052:function(e,t,n){var r=n(614),o=n(3070),i=n(6339),a=n(3072);e.exports=function(e,t,n,u){u||(u={});var s=u.enumerable,p=void 0!==u.name?u.name:t;if(r(n)&&i(n,p,u),u.global)s?e[t]=n:a(t,n);else{try{u.unsafe?e[t]&&(s=!0):delete e[t]}catch(e){}s?e[t]=n:o.f(e,t,{value:n,enumerable:!1,configurable:!u.nonConfigurable,writable:!u.nonWritable})}return e}},3072:function(e,t,n){var r=n(7854),o=Object.defineProperty;e.exports=function(e,t){try{o(r,e,{value:t,configurable:!0,writable:!0})}catch(n){r[e]=t}return t}},9781:function(e,t,n){var r=n(7293);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:function(e,t,n){var r=n(7854),o=n(111),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},7871:function(e,t,n){var r=n(3823),o=n(5268);e.exports=!r&&!o&&"object"==typeof window&&"object"==typeof document},3823:function(e){e.exports="object"==typeof Deno&&Deno&&"object"==typeof Deno.version},1528:function(e,t,n){var r=n(8113),o=n(7854);e.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==o.Pebble},6833:function(e,t,n){var r=n(8113);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},5268:function(e,t,n){var r=n(4326),o=n(7854);e.exports="process"==r(o.process)},1036:function(e,t,n){var r=n(8113);e.exports=/web0s(?!.*chrome)/i.test(r)},8113:function(e,t,n){var r=n(5005);e.exports=r("navigator","userAgent")||""},7392:function(e,t,n){var r,o,i=n(7854),a=n(8113),u=i.process,s=i.Deno,p=u&&u.versions||s&&s.version,c=p&&p.v8;c&&(o=(r=c.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=+r[1]),e.exports=o},748:function(e){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:function(e,t,n){var r=n(7854),o=n(1236).f,i=n(8880),a=n(8052),u=n(3072),s=n(9920),p=n(4705);e.exports=function(e,t){var n,c,_,l,f,d=e.target,T=e.global,m=e.stat;if(n=T?r:m?r[d]||u(d,{}):(r[d]||{}).prototype)for(c in t){if(l=t[c],_=e.dontCallGetSet?(f=o(n,c))&&f.value:n[c],!p(T?c:d+(m?".":"#")+c,e.forced)&&void 0!==_){if(typeof l==typeof _)continue;s(l,_)}(e.sham||_&&_.sham)&&i(l,"sham",!0),a(n,c,l,e)}}},7293:function(e){e.exports=function(e){try{return!!e()}catch(e){return!0}}},2104:function(e,t,n){var r=n(4374),o=Function.prototype,i=o.apply,a=o.call;e.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(i):function(){return a.apply(i,arguments)})},9974:function(e,t,n){var r=n(1702),o=n(9662),i=n(4374),a=r(r.bind);e.exports=function(e,t){return o(e),void 0===t?e:i?a(e,t):function(){return e.apply(t,arguments)}}},4374:function(e,t,n){var r=n(7293);e.exports=!r((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},6916:function(e,t,n){var r=n(4374),o=Function.prototype.call;e.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},6530:function(e,t,n){var r=n(9781),o=n(2597),i=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,u=o(i,"name"),s=u&&"something"===function(){}.name,p=u&&(!r||r&&a(i,"name").configurable);e.exports={EXISTS:u,PROPER:s,CONFIGURABLE:p}},1702:function(e,t,n){var r=n(4374),o=Function.prototype,i=o.bind,a=o.call,u=r&&i.bind(a,a);e.exports=r?function(e){return e&&u(e)}:function(e){return e&&function(){return a.apply(e,arguments)}}},5005:function(e,t,n){var r=n(7854),o=n(614),i=function(e){return o(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e]):r[e]&&r[e][t]}},1246:function(e,t,n){var r=n(648),o=n(8173),i=n(7497),a=n(5112)("iterator");e.exports=function(e){if(null!=e)return o(e,a)||o(e,"@@iterator")||i[r(e)]}},8554:function(e,t,n){var r=n(6916),o=n(9662),i=n(9670),a=n(6330),u=n(1246),s=TypeError;e.exports=function(e,t){var n=arguments.length<2?u(e):t;if(o(n))return i(r(n,e));throw s(a(e)+" is not iterable")}},8173:function(e,t,n){var r=n(9662);e.exports=function(e,t){var n=e[t];return null==n?void 0:r(n)}},7854:function(e,t,n){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},2597:function(e,t,n){var r=n(1702),o=n(7908),i=r({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return i(o(e),t)}},3501:function(e){e.exports={}},842:function(e,t,n){var r=n(7854);e.exports=function(e,t){var n=r.console;n&&n.error&&(1==arguments.length?n.error(e):n.error(e,t))}},490:function(e,t,n){var r=n(5005);e.exports=r("document","documentElement")},4664:function(e,t,n){var r=n(9781),o=n(7293),i=n(317);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:function(e,t,n){var r=n(1702),o=n(7293),i=n(4326),a=Object,u=r("".split);e.exports=o((function(){return!a("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?u(e,""):a(e)}:a},2788:function(e,t,n){var r=n(1702),o=n(614),i=n(5465),a=r(Function.toString);o(i.inspectSource)||(i.inspectSource=function(e){return a(e)}),e.exports=i.inspectSource},9909:function(e,t,n){var r,o,i,a=n(8536),u=n(7854),s=n(1702),p=n(111),c=n(8880),_=n(2597),l=n(5465),f=n(6200),d=n(3501),T="Object already initialized",m=u.TypeError,g=u.WeakMap;if(a||l.state){var y=l.state||(l.state=new g),E=s(y.get),v=s(y.has),h=s(y.set);r=function(e,t){if(v(y,e))throw new m(T);return t.facade=e,h(y,e,t),t},o=function(e){return E(y,e)||{}},i=function(e){return v(y,e)}}else{var N=f("state");d[N]=!0,r=function(e,t){if(_(e,N))throw new m(T);return t.facade=e,c(e,N,t),t},o=function(e){return _(e,N)?e[N]:{}},i=function(e){return _(e,N)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!p(t)||(n=o(t)).type!==e)throw m("Incompatible receiver, "+e+" required");return n}}}},7659:function(e,t,n){var r=n(5112),o=n(7497),i=r("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||a[i]===e)}},614:function(e){e.exports=function(e){return"function"==typeof e}},4411:function(e,t,n){var r=n(1702),o=n(7293),i=n(614),a=n(648),u=n(5005),s=n(2788),p=function(){},c=[],_=u("Reflect","construct"),l=/^\s*(?:class|function)\b/,f=r(l.exec),d=!l.exec(p),T=function(e){if(!i(e))return!1;try{return _(p,c,e),!0}catch(e){return!1}},m=function(e){if(!i(e))return!1;switch(a(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return d||!!f(l,s(e))}catch(e){return!0}};m.sham=!0,e.exports=!_||o((function(){var e;return T(T.call)||!T(Object)||!T((function(){e=!0}))||e}))?m:T},4705:function(e,t,n){var r=n(7293),o=n(614),i=/#|\.prototype\./,a=function(e,t){var n=s[u(e)];return n==c||n!=p&&(o(t)?r(t):!!t)},u=a.normalize=function(e){return String(e).replace(i,".").toLowerCase()},s=a.data={},p=a.NATIVE="N",c=a.POLYFILL="P";e.exports=a},111:function(e,t,n){var r=n(614);e.exports=function(e){return"object"==typeof e?null!==e:r(e)}},1913:function(e){e.exports=!1},2190:function(e,t,n){var r=n(5005),o=n(614),i=n(7976),a=n(3307),u=Object;e.exports=a?function(e){return"symbol"==typeof e}:function(e){var t=r("Symbol");return o(t)&&i(t.prototype,u(e))}},408:function(e,t,n){var r=n(9974),o=n(6916),i=n(9670),a=n(6330),u=n(7659),s=n(6244),p=n(7976),c=n(8554),_=n(1246),l=n(9212),f=TypeError,d=function(e,t){this.stopped=e,this.result=t},T=d.prototype;e.exports=function(e,t,n){var m,g,y,E,v,h,N,x=n&&n.that,b=!(!n||!n.AS_ENTRIES),O=!(!n||!n.IS_RECORD),I=!(!n||!n.IS_ITERATOR),C=!(!n||!n.INTERRUPTED),w=r(t,x),A=function(e){return m&&l(m,"normal",e),new d(!0,e)},S=function(e){return b?(i(e),C?w(e[0],e[1],A):w(e[0],e[1])):C?w(e,A):w(e)};if(O)m=e.iterator;else if(I)m=e;else{if(!(g=_(e)))throw f(a(e)+" is not iterable");if(u(g)){for(y=0,E=s(e);E>y;y++)if((v=S(e[y]))&&p(T,v))return v;return new d(!1)}m=c(e,g)}for(h=O?e.next:m.next;!(N=o(h,m)).done;){try{v=S(N.value)}catch(e){l(m,"throw",e)}if("object"==typeof v&&v&&p(T,v))return v}return new d(!1)}},9212:function(e,t,n){var r=n(6916),o=n(9670),i=n(8173);e.exports=function(e,t,n){var a,u;o(e);try{if(!(a=i(e,"return"))){if("throw"===t)throw n;return n}a=r(a,e)}catch(e){u=!0,a=e}if("throw"===t)throw n;if(u)throw a;return o(a),n}},7497:function(e){e.exports={}},6244:function(e,t,n){var r=n(7466);e.exports=function(e){return r(e.length)}},6339:function(e,t,n){var r=n(7293),o=n(614),i=n(2597),a=n(9781),u=n(6530).CONFIGURABLE,s=n(2788),p=n(9909),c=p.enforce,_=p.get,l=Object.defineProperty,f=a&&!r((function(){return 8!==l((function(){}),"length",{value:8}).length})),d=String(String).split("String"),T=e.exports=function(e,t,n){"Symbol("===String(t).slice(0,7)&&(t="["+String(t).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!i(e,"name")||u&&e.name!==t)&&(a?l(e,"name",{value:t,configurable:!0}):e.name=t),f&&n&&i(n,"arity")&&e.length!==n.arity&&l(e,"length",{value:n.arity});try{n&&i(n,"constructor")&&n.constructor?a&&l(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var r=c(e);return i(r,"source")||(r.source=d.join("string"==typeof t?t:"")),e};Function.prototype.toString=T((function(){return o(this)&&_(this).source||s(this)}),"toString")},4758:function(e){var t=Math.ceil,n=Math.floor;e.exports=Math.trunc||function(e){var r=+e;return(r>0?n:t)(r)}},5948:function(e,t,n){var r,o,i,a,u,s,p,c,_=n(7854),l=n(9974),f=n(1236).f,d=n(261).set,T=n(6833),m=n(1528),g=n(1036),y=n(5268),E=_.MutationObserver||_.WebKitMutationObserver,v=_.document,h=_.process,N=_.Promise,x=f(_,"queueMicrotask"),b=x&&x.value;b||(r=function(){var e,t;for(y&&(e=h.domain)&&e.exit();o;){t=o.fn,o=o.next;try{t()}catch(e){throw o?a():i=void 0,e}}i=void 0,e&&e.enter()},T||y||g||!E||!v?!m&&N&&N.resolve?((p=N.resolve(void 0)).constructor=N,c=l(p.then,p),a=function(){c(r)}):y?a=function(){h.nextTick(r)}:(d=l(d,_),a=function(){d(r)}):(u=!0,s=v.createTextNode(""),new E(r).observe(s,{characterData:!0}),a=function(){s.data=u=!u})),e.exports=b||function(e){var t={fn:e,next:void 0};i&&(i.next=t),o||(o=t,a()),i=t}},133:function(e,t,n){var r=n(7392),o=n(7293);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},8536:function(e,t,n){var r=n(7854),o=n(614),i=n(2788),a=r.WeakMap;e.exports=o(a)&&/native code/.test(i(a))},8523:function(e,t,n){"use strict";var r=n(9662),o=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)};e.exports.f=function(e){return new o(e)}},1574:function(e,t,n){"use strict";var r=n(9781),o=n(1702),i=n(6916),a=n(7293),u=n(1956),s=n(5181),p=n(5296),c=n(7908),_=n(8361),l=Object.assign,f=Object.defineProperty,d=o([].concat);e.exports=!l||a((function(){if(r&&1!==l({b:1},l(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),o="abcdefghijklmnopqrst";return e[n]=7,o.split("").forEach((function(e){t[e]=e})),7!=l({},e)[n]||u(l({},t)).join("")!=o}))?function(e,t){for(var n=c(e),o=arguments.length,a=1,l=s.f,f=p.f;o>a;)for(var T,m=_(arguments[a++]),g=l?d(u(m),l(m)):u(m),y=g.length,E=0;y>E;)T=g[E++],r&&!i(f,m,T)||(n[T]=m[T]);return n}:l},3070:function(e,t,n){var r=n(9781),o=n(4664),i=n(3353),a=n(9670),u=n(4948),s=TypeError,p=Object.defineProperty,c=Object.getOwnPropertyDescriptor;t.f=r?i?function(e,t,n){if(a(e),t=u(t),a(n),"function"==typeof e&&"prototype"===t&&"value"in n&&"writable"in n&&!n.writable){var r=c(e,t);r&&r.writable&&(e[t]=n.value,n={configurable:"configurable"in n?n.configurable:r.configurable,enumerable:"enumerable"in n?n.enumerable:r.enumerable,writable:!1})}return p(e,t,n)}:p:function(e,t,n){if(a(e),t=u(t),a(n),o)try{return p(e,t,n)}catch(e){}if("get"in n||"set"in n)throw s("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},1236:function(e,t,n){var r=n(9781),o=n(6916),i=n(5296),a=n(9114),u=n(5656),s=n(4948),p=n(2597),c=n(4664),_=Object.getOwnPropertyDescriptor;t.f=r?_:function(e,t){if(e=u(e),t=s(t),c)try{return _(e,t)}catch(e){}if(p(e,t))return a(!o(i.f,e,t),e[t])}},8006:function(e,t,n){var r=n(6324),o=n(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},5181:function(e,t){t.f=Object.getOwnPropertySymbols},7976:function(e,t,n){var r=n(1702);e.exports=r({}.isPrototypeOf)},6324:function(e,t,n){var r=n(1702),o=n(2597),i=n(5656),a=n(1318).indexOf,u=n(3501),s=r([].push);e.exports=function(e,t){var n,r=i(e),p=0,c=[];for(n in r)!o(u,n)&&o(r,n)&&s(c,n);for(;t.length>p;)o(r,n=t[p++])&&(~a(c,n)||s(c,n));return c}},1956:function(e,t,n){var r=n(6324),o=n(748);e.exports=Object.keys||function(e){return r(e,o)}},5296:function(e,t){"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!n.call({1:2},1);t.f=o?function(e){var t=r(this,e);return!!t&&t.enumerable}:n},7674:function(e,t,n){var r=n(1702),o=n(9670),i=n(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(e){}return function(n,r){return o(n),i(r),t?e(n,r):n.__proto__=r,n}}():void 0)},4699:function(e,t,n){var r=n(9781),o=n(1702),i=n(1956),a=n(5656),u=o(n(5296).f),s=o([].push),p=function(e){return function(t){for(var n,o=a(t),p=i(o),c=p.length,_=0,l=[];c>_;)n=p[_++],r&&!u(o,n)||s(l,e?[n,o[n]]:o[n]);return l}};e.exports={entries:p(!0),values:p(!1)}},2140:function(e,t,n){var r=n(6916),o=n(614),i=n(111),a=TypeError;e.exports=function(e,t){var n,u;if("string"===t&&o(n=e.toString)&&!i(u=r(n,e)))return u;if(o(n=e.valueOf)&&!i(u=r(n,e)))return u;if("string"!==t&&o(n=e.toString)&&!i(u=r(n,e)))return u;throw a("Can't convert object to primitive value")}},3887:function(e,t,n){var r=n(5005),o=n(1702),i=n(8006),a=n(5181),u=n(9670),s=o([].concat);e.exports=r("Reflect","ownKeys")||function(e){var t=i.f(u(e)),n=a.f;return n?s(t,n(e)):t}},2534:function(e){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},3702:function(e,t,n){var r=n(7854),o=n(2492),i=n(614),a=n(4705),u=n(2788),s=n(5112),p=n(7871),c=n(3823),_=n(1913),l=n(7392),f=o&&o.prototype,d=s("species"),T=!1,m=i(r.PromiseRejectionEvent),g=a("Promise",(function(){var e=u(o),t=e!==String(o);if(!t&&66===l)return!0;if(_&&(!f.catch||!f.finally))return!0;if(!l||l<51||!/native code/.test(e)){var n=new o((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};if((n.constructor={})[d]=r,!(T=n.then((function(){}))instanceof r))return!0}return!t&&(p||c)&&!m}));e.exports={CONSTRUCTOR:g,REJECTION_EVENT:m,SUBCLASSING:T}},2492:function(e,t,n){var r=n(7854);e.exports=r.Promise},9478:function(e,t,n){var r=n(9670),o=n(111),i=n(8523);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},612:function(e,t,n){var r=n(2492),o=n(7072),i=n(3702).CONSTRUCTOR;e.exports=i||!o((function(e){r.all(e).then(void 0,(function(){}))}))},8572:function(e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var t={item:e,next:null};this.head?this.tail.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return this.head=e.next,this.tail===e&&(this.tail=null),e.item}},e.exports=t},4488:function(e){var t=TypeError;e.exports=function(e){if(null==e)throw t("Can't call method on "+e);return e}},6340:function(e,t,n){"use strict";var r=n(5005),o=n(3070),i=n(5112),a=n(9781),u=i("species");e.exports=function(e){var t=r(e),n=o.f;a&&t&&!t[u]&&n(t,u,{configurable:!0,get:function(){return this}})}},8003:function(e,t,n){var r=n(3070).f,o=n(2597),i=n(5112)("toStringTag");e.exports=function(e,t,n){e&&!n&&(e=e.prototype),e&&!o(e,i)&&r(e,i,{configurable:!0,value:t})}},6200:function(e,t,n){var r=n(2309),o=n(9711),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},5465:function(e,t,n){var r=n(7854),o=n(3072),i="__core-js_shared__",a=r[i]||o(i,{});e.exports=a},2309:function(e,t,n){var r=n(1913),o=n(5465);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.24.1",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.24.1/LICENSE",source:"https://github.com/zloirock/core-js"})},6707:function(e,t,n){var r=n(9670),o=n(9483),i=n(5112)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||null==(n=r(a)[i])?t:o(n)}},261:function(e,t,n){var r,o,i,a,u=n(7854),s=n(2104),p=n(9974),c=n(614),_=n(2597),l=n(7293),f=n(490),d=n(206),T=n(317),m=n(8053),g=n(6833),y=n(5268),E=u.setImmediate,v=u.clearImmediate,h=u.process,N=u.Dispatch,x=u.Function,b=u.MessageChannel,O=u.String,I=0,C={};try{r=u.location}catch(e){}var w=function(e){if(_(C,e)){var t=C[e];delete C[e],t()}},A=function(e){return function(){w(e)}},S=function(e){w(e.data)},D=function(e){u.postMessage(O(e),r.protocol+"//"+r.host)};E&&v||(E=function(e){m(arguments.length,1);var t=c(e)?e:x(e),n=d(arguments,1);return C[++I]=function(){s(t,void 0,n)},o(I),I},v=function(e){delete C[e]},y?o=function(e){h.nextTick(A(e))}:N&&N.now?o=function(e){N.now(A(e))}:b&&!g?(a=(i=new b).port2,i.port1.onmessage=S,o=p(a.postMessage,a)):u.addEventListener&&c(u.postMessage)&&!u.importScripts&&r&&"file:"!==r.protocol&&!l(D)?(o=D,u.addEventListener("message",S,!1)):o="onreadystatechange"in T("script")?function(e){f.appendChild(T("script")).onreadystatechange=function(){f.removeChild(this),w(e)}}:function(e){setTimeout(A(e),0)}),e.exports={set:E,clear:v}},1400:function(e,t,n){var r=n(9303),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},5656:function(e,t,n){var r=n(8361),o=n(4488);e.exports=function(e){return r(o(e))}},9303:function(e,t,n){var r=n(4758);e.exports=function(e){var t=+e;return t!=t||0===t?0:r(t)}},7466:function(e,t,n){var r=n(9303),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},7908:function(e,t,n){var r=n(4488),o=Object;e.exports=function(e){return o(r(e))}},7593:function(e,t,n){var r=n(6916),o=n(111),i=n(2190),a=n(8173),u=n(2140),s=n(5112),p=TypeError,c=s("toPrimitive");e.exports=function(e,t){if(!o(e)||i(e))return e;var n,s=a(e,c);if(s){if(void 0===t&&(t="default"),n=r(s,e,t),!o(n)||i(n))return n;throw p("Can't convert object to primitive value")}return void 0===t&&(t="number"),u(e,t)}},4948:function(e,t,n){var r=n(7593),o=n(2190);e.exports=function(e){var t=r(e,"string");return o(t)?t:t+""}},1694:function(e,t,n){var r={};r[n(5112)("toStringTag")]="z",e.exports="[object z]"===String(r)},6330:function(e){var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},9711:function(e,t,n){var r=n(1702),o=0,i=Math.random(),a=r(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+a(++o+i,36)}},3307:function(e,t,n){var r=n(133);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:function(e,t,n){var r=n(9781),o=n(7293);e.exports=r&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},8053:function(e){var t=TypeError;e.exports=function(e,n){if(e<n)throw t("Not enough arguments");return e}},5112:function(e,t,n){var r=n(7854),o=n(2309),i=n(2597),a=n(9711),u=n(133),s=n(3307),p=o("wks"),c=r.Symbol,_=c&&c.for,l=s?c:c&&c.withoutSetter||a;e.exports=function(e){if(!i(p,e)||!u&&"string"!=typeof p[e]){var t="Symbol."+e;u&&i(c,e)?p[e]=c[e]:p[e]=s&&_?_(t):l(t)}return p[e]}},9601:function(e,t,n){var r=n(2109),o=n(1574);r({target:"Object",stat:!0,arity:2,forced:Object.assign!==o},{assign:o})},9720:function(e,t,n){var r=n(2109),o=n(4699).entries;r({target:"Object",stat:!0},{entries:function(e){return o(e)}})},8559:function(e,t,n){var r=n(2109),o=n(408),i=n(6135);r({target:"Object",stat:!0},{fromEntries:function(e){var t={};return o(e,(function(e,n){i(t,e,n)}),{AS_ENTRIES:!0}),t}})},821:function(e,t,n){"use strict";var r=n(2109),o=n(6916),i=n(9662),a=n(8523),u=n(2534),s=n(408);r({target:"Promise",stat:!0,forced:n(612)},{all:function(e){var t=this,n=a.f(t),r=n.resolve,p=n.reject,c=u((function(){var n=i(t.resolve),a=[],u=0,c=1;s(e,(function(e){var i=u++,s=!1;c++,o(n,t,e).then((function(e){s||(s=!0,a[i]=e,--c||r(a))}),p)})),--c||r(a)}));return c.error&&p(c.value),n.promise}})},4164:function(e,t,n){"use strict";var r=n(2109),o=n(1913),i=n(3702).CONSTRUCTOR,a=n(2492),u=n(5005),s=n(614),p=n(8052),c=a&&a.prototype;if(r({target:"Promise",proto:!0,forced:i,real:!0},{catch:function(e){return this.then(void 0,e)}}),!o&&s(a)){var _=u("Promise").prototype.catch;c.catch!==_&&p(c,"catch",_,{unsafe:!0})}},3401:function(e,t,n){"use strict";var r,o,i,a=n(2109),u=n(1913),s=n(5268),p=n(7854),c=n(6916),_=n(8052),l=n(7674),f=n(8003),d=n(6340),T=n(9662),m=n(614),g=n(111),y=n(5787),E=n(6707),v=n(261).set,h=n(5948),N=n(842),x=n(2534),b=n(8572),O=n(9909),I=n(2492),C=n(3702),w=n(8523),A="Promise",S=C.CONSTRUCTOR,D=C.REJECTION_EVENT,M=C.SUBCLASSING,P=O.getterFor(A),R=O.set,X=I&&I.prototype,G=I,L=X,j=p.TypeError,q=p.document,U=p.process,k=w.f,F=k,B=!!(q&&q.createEvent&&p.dispatchEvent),Y="unhandledrejection",z=function(e){var t;return!(!g(e)||!m(t=e.then))&&t},H=function(e,t){var n,r,o,i=t.value,a=1==t.state,u=a?e.ok:e.fail,s=e.resolve,p=e.reject,_=e.domain;try{u?(a||(2===t.rejection&&J(t),t.rejection=1),!0===u?n=i:(_&&_.enter(),n=u(i),_&&(_.exit(),o=!0)),n===e.promise?p(j("Promise-chain cycle")):(r=z(n))?c(r,n,s,p):s(n)):p(i)}catch(e){_&&!o&&_.exit(),p(e)}},W=function(e,t){e.notified||(e.notified=!0,h((function(){for(var n,r=e.reactions;n=r.get();)H(n,e);e.notified=!1,t&&!e.rejection&&K(e)})))},V=function(e,t,n){var r,o;B?((r=q.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),p.dispatchEvent(r)):r={promise:t,reason:n},!D&&(o=p["on"+e])?o(r):e===Y&&N("Unhandled promise rejection",n)},K=function(e){c(v,p,(function(){var t,n=e.facade,r=e.value;if(Z(e)&&(t=x((function(){s?U.emit("unhandledRejection",r,n):V(Y,n,r)})),e.rejection=s||Z(e)?2:1,t.error))throw t.value}))},Z=function(e){return 1!==e.rejection&&!e.parent},J=function(e){c(v,p,(function(){var t=e.facade;s?U.emit("rejectionHandled",t):V("rejectionhandled",t,e.value)}))},Q=function(e,t,n){return function(r){e(t,r,n)}},$=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,W(e,!0))},ee=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw j("Promise can't be resolved itself");var r=z(t);r?h((function(){var n={done:!1};try{c(r,t,Q(ee,n,e),Q($,n,e))}catch(t){$(n,t,e)}})):(e.value=t,e.state=1,W(e,!1))}catch(t){$({done:!1},t,e)}}};if(S&&(L=(G=function(e){y(this,L),T(e),c(r,this);var t=P(this);try{e(Q(ee,t),Q($,t))}catch(e){$(t,e)}}).prototype,(r=function(e){R(this,{type:A,done:!1,notified:!1,parent:!1,reactions:new b,rejection:!1,state:0,value:void 0})}).prototype=_(L,"then",(function(e,t){var n=P(this),r=k(E(this,G));return n.parent=!0,r.ok=!m(e)||e,r.fail=m(t)&&t,r.domain=s?U.domain:void 0,0==n.state?n.reactions.add(r):h((function(){H(r,n)})),r.promise})),o=function(){var e=new r,t=P(e);this.promise=e,this.resolve=Q(ee,t),this.reject=Q($,t)},w.f=k=function(e){return e===G||void 0===e?new o(e):F(e)},!u&&m(I)&&X!==Object.prototype)){i=X.then,M||_(X,"then",(function(e,t){var n=this;return new G((function(e,t){c(i,n,e,t)})).then(e,t)}),{unsafe:!0});try{delete X.constructor}catch(e){}l&&l(X,L)}a({global:!0,constructor:!0,wrap:!0,forced:S},{Promise:G}),f(G,A,!1,!0),d(A)},8674:function(e,t,n){n(3401),n(821),n(4164),n(6027),n(683),n(6294)},6027:function(e,t,n){"use strict";var r=n(2109),o=n(6916),i=n(9662),a=n(8523),u=n(2534),s=n(408);r({target:"Promise",stat:!0,forced:n(612)},{race:function(e){var t=this,n=a.f(t),r=n.reject,p=u((function(){var a=i(t.resolve);s(e,(function(e){o(a,t,e).then(n.resolve,r)}))}));return p.error&&r(p.value),n.promise}})},683:function(e,t,n){"use strict";var r=n(2109),o=n(6916),i=n(8523);r({target:"Promise",stat:!0,forced:n(3702).CONSTRUCTOR},{reject:function(e){var t=i.f(this);return o(t.reject,void 0,e),t.promise}})},6294:function(e,t,n){"use strict";var r=n(2109),o=n(5005),i=n(1913),a=n(2492),u=n(3702).CONSTRUCTOR,s=n(9478),p=o("Promise"),c=i&&!u;r({target:"Promise",stat:!0,forced:i||u},{resolve:function(e){return s(c&&this===p?a:this,e)}})},3682:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudioToText=void 0;var r=n(655),o=n(8778),i=n(1193),a=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,i.getHttpClient)(this.params)}return e.prototype.audioTranscription=function(e){var t,n=new FormData;return(0,a.isDefined)(e.audio)&&n.append("audio",e.audio),(0,a.isDefined)(e.audio_url)&&n.append("audio_url",e.audio_url),(0,a.isDefined)(e.language)&&n.append("language",e.language),this.httpClient.post({url:"/audio/text/audio-transcription/",headers:r.__assign({"Content-Type":this.params.useFetch?o.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e}();t.FromAudioToText=u},8490:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudio=void 0;var r=n(3682),o=function(){function e(e){this.fromAudioToTextInst=new r.FromAudioToText(e)}return e.prototype.toText=function(){return this.fromAudioToTextInst},e}();t.FromAudio=o},8814:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToImage=void 0;var r=n(655),o=n(8778),i=n(1193),a=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,i.getHttpClient)(this.params)}return e.prototype.backgroundRemoval=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/background-removal/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.colorization=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/colorization/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.deblurring=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/deblurring/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_DEBLURRING_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.faceBluring=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/face-bluring/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.guidedInpainting=function(e){var t,n=new FormData;return(0,a.isDefined)(e.original_image)&&n.append("original_image",e.original_image),(0,a.isDefined)(e.original_image_url)&&n.append("original_image_url",e.original_image_url),(0,a.isDefined)(e.mask_image)&&n.append("mask_image",e.mask_image),(0,a.isDefined)(e.mask_image_url)&&n.append("mask_image_url",e.mask_image_url),n.append("prompt",e.prompt),this.httpClient.post({url:"/image/image/guided-inpainting/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.inpainting=function(e){var t,n=new FormData;return(0,a.isDefined)(e.original_image)&&n.append("original_image",e.original_image),(0,a.isDefined)(e.original_image_url)&&n.append("original_image_url",e.original_image_url),(0,a.isDefined)(e.mask_image)&&n.append("mask_image",e.mask_image),(0,a.isDefined)(e.mask_image_url)&&n.append("mask_image_url",e.mask_image_url),this.httpClient.post({url:"/image/image/inpainting/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_INPAINTING_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.superResolution=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/super-resolution/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_SUPER_RESOLUTION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.uncolorization=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/uncolorization/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e}();t.FromImageToImage=u},4802:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToText=void 0;var r=n(655),o=n(8778),i=n(1193),a=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,i.getHttpClient)(this.params)}return e.prototype.asciify=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/text/asciify/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e.prototype.classification=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),(0,a.isDefined)(e.top_k)&&n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/image/text/classification/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e.prototype.ocr=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),(0,a.isDefined)(e.source_language)&&n.append("source_language",e.source_language),this.httpClient.post({url:"/image/text/ocr/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_TEXT_OCR_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e}();t.FromImageToText=u},2062:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImage=void 0;var r=n(8814),o=n(4802),i=function(){function e(e){this.fromImageToImageInst=new r.FromImageToImage(e),this.fromImageToTextInst=new o.FromImageToText(e)}return e.prototype.toImage=function(){return this.fromImageToImageInst},e.prototype.toText=function(){return this.fromImageToTextInst},e}();t.FromImage=i},4153:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToImage=void 0;var r=n(655),o=n(8778),i=n(1193),a=n(6117),u=n(9142),s=function(){function e(e){this.params=e,this.httpClient=(0,i.getHttpClient)(this.params)}return e.prototype.imageGeneration=function(e){var t,n=new u.UrlFormData;return n.append("prompt",e.prompt),(0,a.isDefined)(e.samples)&&n.append("samples",String(e.samples)),(0,a.isDefined)(e.steps)&&n.append("steps",String(e.steps)),(0,a.isDefined)(e.seed)&&n.append("seed",String(e.seed)),this.httpClient.post({url:"/text/image/image-generation/",headers:r.__assign({"Content-Type":o.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n.toString()})},e}();t.FromTextToImage=s},8271:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToText=void 0;var r=n(655),o=n(8778),i=n(1193),a=n(6117),u=n(9142),s=function(){function e(e){this.params=e,this.httpClient=(0,i.getHttpClient)(this.params)}return e.prototype.adGeneration=function(e){var t,n=new u.UrlFormData;return(0,a.isDefined)(e.keywords)&&n.append("keywords",e.keywords),this.httpClient.post({url:"/text/text/ad-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.articleGeneration=function(e){var t,n=new u.UrlFormData;return(0,a.isDefined)(e.title)&&n.append("title",e.title),this.httpClient.post({url:"/text/text/article-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.autocorrect=function(e){var t,n=new u.UrlFormData;return n.append("sentence",e.sentence),this.httpClient.post({url:"/text/text/autocorrect/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.bulletPointGeneration=function(e){var t,n=new u.UrlFormData;return(0,a.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/bullet-point-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_BULLET_POINT_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.emotionRecognition=function(e){var t,n=new u.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/emotion-recognition/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.hateSpeechDetection=function(e){var t,n=new u.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/hate-speech-detection/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.headlineGeneration=function(e){var t,n=new u.UrlFormData;return(0,a.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/headline-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_HEADLINE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.intentClassification=function(e){var t,n=new u.UrlFormData;return(0,a.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/intent-classification/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.keywordExtraction=function(e){var t,n=new u.UrlFormData;return n.append("text",e.text),(0,a.isDefined)(e.top_k)&&n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/text/text/keyword-extraction/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.languageDetection=function(e){var t,n=new u.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-detection/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.languageGeneration=function(e){var t,n=new u.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.namedEntityRecognition=function(e){var t,n=new u.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/named-entity-recognition/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.nextSentencePrediction=function(e){var t,n=new u.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/next-sentence-prediction/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.nextWordPrediction=function(e){var t,n=new u.UrlFormData;return n.append("sentence",e.sentence),(0,a.isDefined)(e.top_k)&&n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/text/text/next-word-prediction/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.plural=function(e){var t,n=new u.UrlFormData;return n.append("word",e.word),(0,a.isDefined)(e.count)&&n.append("count",String(e.count)),this.httpClient.post({url:"/text/text/plural/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_PLURAL_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.programmingLanguageGeneration=function(e){var t,n=new u.UrlFormData;return n.append("code_snippet",e.code_snippet),this.httpClient.post({url:"/text/text/programming-language-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.questionAnswering=function(e){var t,n=new u.UrlFormData;return n.append("context",e.context),n.append("question",e.question),(0,a.isDefined)(e.top_k)&&n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/text/text/question-answering/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.sentenceParaphraser=function(e){var t,n=new u.UrlFormData;return n.append("context",e.context),this.httpClient.post({url:"/text/text/sentence-paraphraser/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.sentimentAnalysis=function(e){var t,n=new u.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/sentiment-analysis/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.similarity=function(e){var t,n=new u.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/similarity/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_SIMILARITY_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.summarization=function(e){var t,n=new u.UrlFormData;return(0,a.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/summarization/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.translation=function(e){var t,n=new u.UrlFormData;return(0,a.isDefined)(e.text)&&n.append("text",e.text),(0,a.isDefined)(e.source)&&n.append("source",e.source),(0,a.isDefined)(e.target)&&n.append("target",e.target),this.httpClient.post({url:"/text/text/translation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_TRANSLATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.wordAlignment=function(e){var t,n=new u.UrlFormData;return n.append("input_string_language_1",e.input_string_language_1),n.append("input_string_language_2",e.input_string_language_2),this.httpClient.post({url:"/text/text/word-alignment/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e}();t.FromTextToText=s},9438:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromText=void 0;var r=n(4153),o=n(8271),i=function(){function e(e){this.fromTextToImageInst=new r.FromTextToImage(e),this.fromTextToTextInst=new o.FromTextToText(e)}return e.prototype.toImage=function(){return this.fromTextToImageInst},e.prototype.toText=function(){return this.fromTextToTextInst},e}();t.FromText=i},4085:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Shortcuts=void 0;var n=function(){function e(){}return e.prototype.audioTranscription=function(e){return this.fromAudio().toText().audioTranscription(e)},e.prototype.backgroundRemoval=function(e){return this.fromImage().toImage().backgroundRemoval(e)},e.prototype.colorization=function(e){return this.fromImage().toImage().colorization(e)},e.prototype.deblurring=function(e){return this.fromImage().toImage().deblurring(e)},e.prototype.faceBluring=function(e){return this.fromImage().toImage().faceBluring(e)},e.prototype.guidedInpainting=function(e){return this.fromImage().toImage().guidedInpainting(e)},e.prototype.inpainting=function(e){return this.fromImage().toImage().inpainting(e)},e.prototype.superResolution=function(e){return this.fromImage().toImage().superResolution(e)},e.prototype.uncolorization=function(e){return this.fromImage().toImage().uncolorization(e)},e.prototype.asciify=function(e){return this.fromImage().toText().asciify(e)},e.prototype.classification=function(e){return this.fromImage().toText().classification(e)},e.prototype.ocr=function(e){return this.fromImage().toText().ocr(e)},e.prototype.imageGeneration=function(e){return this.fromText().toImage().imageGeneration(e)},e.prototype.adGeneration=function(e){return this.fromText().toText().adGeneration(e)},e.prototype.articleGeneration=function(e){return this.fromText().toText().articleGeneration(e)},e.prototype.autocorrect=function(e){return this.fromText().toText().autocorrect(e)},e.prototype.bulletPointGeneration=function(e){return this.fromText().toText().bulletPointGeneration(e)},e.prototype.emotionRecognition=function(e){return this.fromText().toText().emotionRecognition(e)},e.prototype.hateSpeechDetection=function(e){return this.fromText().toText().hateSpeechDetection(e)},e.prototype.headlineGeneration=function(e){return this.fromText().toText().headlineGeneration(e)},e.prototype.intentClassification=function(e){return this.fromText().toText().intentClassification(e)},e.prototype.keywordExtraction=function(e){return this.fromText().toText().keywordExtraction(e)},e.prototype.languageDetection=function(e){return this.fromText().toText().languageDetection(e)},e.prototype.languageGeneration=function(e){return this.fromText().toText().languageGeneration(e)},e.prototype.namedEntityRecognition=function(e){return this.fromText().toText().namedEntityRecognition(e)},e.prototype.nextSentencePrediction=function(e){return this.fromText().toText().nextSentencePrediction(e)},e.prototype.nextWordPrediction=function(e){return this.fromText().toText().nextWordPrediction(e)},e.prototype.plural=function(e){return this.fromText().toText().plural(e)},e.prototype.programmingLanguageGeneration=function(e){return this.fromText().toText().programmingLanguageGeneration(e)},e.prototype.questionAnswering=function(e){return this.fromText().toText().questionAnswering(e)},e.prototype.sentenceParaphraser=function(e){return this.fromText().toText().sentenceParaphraser(e)},e.prototype.sentimentAnalysis=function(e){return this.fromText().toText().sentimentAnalysis(e)},e.prototype.similarity=function(e){return this.fromText().toText().similarity(e)},e.prototype.summarization=function(e){return this.fromText().toText().summarization(e)},e.prototype.translation=function(e){return this.fromText().toText().translation(e)},e.prototype.wordAlignment=function(e){return this.fromText().toText().wordAlignment(e)},e}();t.Shortcuts=n},2889:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GladiaClient=void 0;var r=n(655),o=n(4085),i=n(8490),a=n(2062),u=n(9438),s=function(e){function t(t){var n,o=this;o=e.call(this)||this;var s=r.__assign(r.__assign({},t),{useFetch:null!==(n=t.useFetch)&&void 0!==n&&n});return o.fromAudioInst=new i.FromAudio(s),o.fromImageInst=new a.FromImage(s),o.fromTextInst=new u.FromText(s),o}return r.__extends(t,e),t.prototype.fromAudio=function(){return this.fromAudioInst},t.prototype.fromImage=function(){return this.fromImageInst},t.prototype.fromText=function(){return this.fromTextInst},t}(o.Shortcuts);t.GladiaClient=s},3465:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.meta=t.GladiaClient=t.gladia=void 0;var r=n(655),o=n(2889);function i(e){return new o.GladiaClient(e)}t.gladia=i,t.default=i;var a=n(2889);Object.defineProperty(t,"GladiaClient",{enumerable:!0,get:function(){return a.GladiaClient}}),r.__exportStar(n(8778),t),t.meta=r.__importStar(n(2168))},1193:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getHttpClient=void 0;var r=n(655),o=r.__importDefault(n(9669)),i=n(3413),a=n(6825);t.getHttpClient=function(e){var t,n,o,a,s;return(null!==(t=e.customHttpClient)&&void 0!==t?t:u)({baseHeaders:r.__assign({"x-gladia-key":e.apiKey,"x-gladia-sdk":i.SDK_VERSION},null!==(n=e.headers)&&void 0!==n?n:{}),baseUrl:null!==(o=e.baseUrl)&&void 0!==o?o:"https://v2-api.gladia.io",useFetch:null!==(a=e.useFetch)&&void 0!==a&&a,httpClientTimeout:null!==(s=e.httpClientTimeout)&&void 0!==s?s:3e5})};var u=function(e){var t=e.baseHeaders,n=e.baseUrl,i=(e.useFetch,e.httpClientTimeout);return{post:function(e){var u;return r.__awaiter(this,void 0,void 0,(function(){var s,p,c,_,l;return r.__generator(this,(function(f){return s=r.__assign(r.__assign({},t),e.headers),p="".concat(n).concat(e.url).concat((0,a.searchQueryParamSerializer)(e.query)),c=null!==(u=e.responseType)&&void 0!==u?u:"json",_=null!=i?i:3e5,l={},[2,o.default.post(p,e.body,r.__assign(r.__assign({headers:s,responseType:c},l),{timeout:_})).then((function(e){return e.data}))]}))}))}}}},6825:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.searchParamDeserializer=t.searchParamSerializer=t.searchQueryParamSerializer=void 0;var r=n(655),o=n(6117);function i(e){return Object.entries(e).map((function(e){var t,n,o=r.__read(e,2);return t=o[0],n=o[1],Array.isArray(n)?"".concat(t,"=").concat(n.map((function(e){return a(e)})).join(",")):"string"==typeof n?"".concat(t,"=").concat(a(n)):"".concat(t,"=").concat(n)})).join("&")}function a(e){return encodeURI(e).replace(/,/g,"%2C")}function u(e){return decodeURI(e).replace(/%2C/g,",")}t.searchQueryParamSerializer=function(e){if((0,o.isNotDefined)(e))return"";var t=i(e);return 0===t.length?"":"?"+t},t.searchParamSerializer=i,t.searchParamDeserializer=function(e){return(0,o.isNotDefined)(e)||0===e.length?{}:Object.fromEntries(e.split("&").map((function(e){return e.split("=")})).map((function(e){var t=r.__read(e,2),n=t[0],o=t[1];return o.includes(",")?[n,o.split(",")]:[n,o]})).map((function(e){var t=r.__read(e,2),n=t[0],o=t[1];return"string"==typeof o?[n,u(o)]:[n,o.map(u)]})))}},9142:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrlFormData=void 0;var r=n(6825),o=function(){function e(e){this.data={},this.data=(0,r.searchParamDeserializer)(e)}return e.prototype.append=function(e,t){this.data[e]=t},e.prototype.get=function(e){return this.data[e]},e.prototype.toString=function(){return(0,r.searchParamSerializer)(this.data)},e}();t.UrlFormData=o},5485:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ENDPOINT_DEFS=void 0,t.ENDPOINT_DEFS=[{url:"/audio/text/audio-transcription/",inputType:"audio",outputType:"text",taskName:"audio-transcription",models:["coqui_english_huge_vocab"],defaultModel:"coqui_english_huge_vocab",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"audio",name:"audio",required:!1},{in:"formData",type:"url",name:"audio_url",required:!1},{in:"formData",type:"string",name:"language",required:!1}]},{url:"/image/image/background-removal/",inputType:"image",outputType:"image",taskName:"background-removal",models:["mobilenet","xception"],defaultModel:"mobilenet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/image/colorization/",inputType:"image",outputType:"image",taskName:"colorization",models:["deoldify-artistic","deoldify-stable","mlhubber_colorize"],defaultModel:"mlhubber_colorize",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/image/deblurring/",inputType:"image",outputType:"image",taskName:"deblurring",models:["CMFNet"],defaultModel:"CMFNet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/image/face-bluring/",inputType:"image",outputType:"image",taskName:"face-bluring",models:["ageitgey"],defaultModel:"ageitgey",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/image/guided-inpainting/",inputType:"image",outputType:"image",taskName:"guided-inpainting",models:["stable-diffusion"],defaultModel:"stable-diffusion",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"original_image",required:!1},{in:"formData",type:"url",name:"original_image_url",required:!1},{in:"formData",type:"image",name:"mask_image",required:!1},{in:"formData",type:"url",name:"mask_image_url",required:!1},{in:"formData",type:"string",name:"prompt",required:!0}]},{url:"/image/image/inpainting/",inputType:"image",outputType:"image",taskName:"inpainting",models:["fcf","lama","latent-diffusion","mat","zits"],defaultModel:"zits",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"original_image",required:!1},{in:"formData",type:"url",name:"original_image_url",required:!1},{in:"formData",type:"image",name:"mask_image",required:!1},{in:"formData",type:"url",name:"mask_image_url",required:!1}]},{url:"/image/image/super-resolution/",inputType:"image",outputType:"image",taskName:"super-resolution",models:[],defaultModel:"latent-sr",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/image/uncolorization/",inputType:"image",outputType:"image",taskName:"uncolorization",models:["v1"],defaultModel:"v1",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/text/asciify/",inputType:"image",outputType:"text",taskName:"asciify",models:["ramesh-aditya"],defaultModel:"ramesh-aditya",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/text/classification/",inputType:"image",outputType:"text",taskName:"classification",models:["alexnet","convnext_base","convnext_large","convnext_small","convnext_tiny","densenet121","densenet161","densenet169","densenet201","efficientnet_b0","efficientnet_b1_v1","efficientnet_b1_v2","efficientnet_b2","efficientnet_b3","efficientnet_b4","efficientnet_b5","efficientnet_b6","efficientnet_b7","efficientnet_v2_l","efficientnet_v2_m","efficientnet_v2_s","googlenet","googlenet_quantized_fbgemm_v1","inception_v3","inception_v3_fbgemm_v1","mnasnet0_5","mnasnet0_75","mnasnet1_0","mnasnet1_3","mobilenet_v2_quantized_qnnpack_v1","mobilenet_v2_v1","mobilenet_v2_v2","mobilenet_v3_large_quantized_qnnpack_v1","mobilenet_v3_large_v1","mobilenet_v3_large_v2","mobilenet_v3_small","regnet_x_16gf_v1","regnet_x_16gf_v2","regnet_x_1_6gf_v1","regnet_x_1_6gf_v2","regnet_x_32gf_v1","regnet_x_32gf_v2","regnet_x_3_2gf_v1","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_x_400mf_v2","regnet_x_800mf_v1","regnet_x_800mf_v2","regnet_x_8gf_v1","regnet_x_8gf_v2","regnet_y_128gf_swag_e2e_v1","regnet_y_128gf_swag_linear_v1","regnet_y_16gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","regnet_y_16gf_v1","regnet_y_16gf_v2","regnet_y_1_6gf_v1","regnet_y_1_6gf_v2","regnet_y_32gf_swag_e2e_v1","regnet_y_32gf_swag_linear_v1","regnet_y_32gf_v1","regnet_y_32gf_v2","regnet_y_3_2gf_v1","regnet_y_3_2gf_v2","regnet_y_400mf_v1","regnet_y_400mf_v2","regnet_y_8gf_v1","regnet_y_8gf_v2","resnet152_v1","resnet152_v2","resnet18","resnet18_quantized_fbgemm_v1","resnet34","resnet50_quantized_fbgemm_v1","resnet50_quantized_fbgemm_v2","resnet50_v1","resnet50_v2","resnext101_32x8d_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","resnext101_32x8d_v1","resnext101_32x8d_v2","resnext101_64x4d_quantized_fbgemm_v1","resnext101_64x4d_v1","resnext50_32x4d_v1","resnext50_32x4d_v2","shufflenet_v2_x0_5","shufflenet_v2_x0_5_quantized_fbgemm_v1","shufflenet_v2_x1_0","shufflenet_v2_x1_0_quantized_fbgemm_v1","shufflenet_v2_x1_5","shufflenet_v2_x1_5_quantized_fbgemm_v1","shufflenet_v2_x2_0","shufflenet_v2_x2_0_quantized_fbgemm_v1","squeezenet1_0","squeezenet1_1","swin_b","swin_s","swin_t","vgg11","vgg11_bn","vgg13","vgg13_bn","vgg16_bn","vgg16_v1","vgg19","vgg19_bn","vit_b_16_swag_e2e_v1","vit_b_16_swag_linear_v1","vit_b_16_v1","vit_b_32","vit_h_14_swag_e2e_v1","vit_h_14_swag_linear_v1","vit_l_16_swag_e2e_v1","vit_l_16_swag_linear_v1","vit_l_16_v1","vit_l_32","wide_resnet101_2_v1","wide_resnet101_2_v2"],defaultModel:"alexnet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1},{in:"formData",type:"integer",name:"top_k",required:!1}]},{url:"/image/text/ocr/",inputType:"image",outputType:"text",taskName:"ocr",models:["easy-ocr","tesseract-default","tesseract-denoising"],defaultModel:"tesseract-denoising",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1},{in:"formData",type:"string",name:"source_language",required:!1}]},{url:"/text/image/image-generation/",inputType:"text",outputType:"image",taskName:"image-generation",models:["dream-studio","stable-diffusion"],defaultModel:"stable-diffusion",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"string",name:"prompt",required:!0},{in:"formData",type:"integer",name:"samples",required:!1},{in:"formData",type:"integer",name:"steps",required:!1},{in:"formData",type:"integer",name:"seed",required:!1}]},{url:"/text/text/ad-generation/",inputType:"text",outputType:"text",taskName:"ad-generation",models:["gpt-j"],defaultModel:"gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"array",name:"keywords",required:!1}]},{url:"/text/text/article-generation/",inputType:"text",outputType:"text",taskName:"article-generation",models:["fast-gpt-j"],defaultModel:"fast-gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"title",required:!1}]},{url:"/text/text/autocorrect/",inputType:"text",outputType:"text",taskName:"autocorrect",models:["flexudy-t5-base-multi-sentence-doctor"],defaultModel:"flexudy-t5-base-multi-sentence-doctor",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence",required:!0}]},{url:"/text/text/bullet-point-generation/",inputType:"text",outputType:"text",taskName:"bullet-point-generation",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}]},{url:"/text/text/emotion-recognition/",inputType:"text",outputType:"text",taskName:"emotion-recognition",models:["mrm8488-t5-base-finetuned-emotion"],defaultModel:"mrm8488-t5-base-finetuned-emotion",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/hate-speech-detection/",inputType:"text",outputType:"text",taskName:"hate-speech-detection",models:["Hate-speech-CNERG-dehatebert-mono-english","byt5-base-tweet-hate-detection"],defaultModel:"byt5-base-tweet-hate-detection",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/headline-generation/",inputType:"text",outputType:"text",taskName:"headline-generation",models:["t5-base-en-generate-headline"],defaultModel:"t5-base-en-generate-headline",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}]},{url:"/text/text/intent-classification/",inputType:"text",outputType:"text",taskName:"intent-classification",models:["fast-gpt-j"],defaultModel:"fast-gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}]},{url:"/text/text/keyword-extraction/",inputType:"text",outputType:"text",taskName:"keyword-extraction",models:["keybert-paraphrase-MiniLM-L6-v2","keybert-paraphrase-multilingual-MiniLM-L12-v2"],defaultModel:"keybert-paraphrase-MiniLM-L6-v2",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0},{in:"formData",type:"integer",name:"top_k",required:!1}]},{url:"/text/text/language-detection/",inputType:"text",outputType:"text",taskName:"language-detection",models:["toftrup-etal-2021","xlm-roberta-base-language-detection"],defaultModel:"xlm-roberta-base-language-detection",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/language-generation/",inputType:"text",outputType:"text",taskName:"language-generation",models:["EleutherAI-gpt-neo-2_7B","bloom-560m"],defaultModel:"bloom-560m",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/named-entity-recognition/",inputType:"text",outputType:"text",taskName:"named-entity-recognition",models:["dbmdz-bert-large-cased-finetuned-conll03-english"],defaultModel:"dbmdz-bert-large-cased-finetuned-conll03-english",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"array"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/next-sentence-prediction/",inputType:"text",outputType:"text",taskName:"next-sentence-prediction",models:["bert-base-uncased"],defaultModel:"bert-base-uncased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"number"},params:[{in:"formData",type:"string",name:"sentence_1",required:!0},{in:"formData",type:"string",name:"sentence_2",required:!0}]},{url:"/text/text/next-word-prediction/",inputType:"text",outputType:"text",taskName:"next-word-prediction",models:["albert-base-v2","bert-base-uncased","distilbert-base-uncased","roberta-base"],defaultModel:"distilbert-base-uncased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence",required:!0},{in:"formData",type:"integer",name:"top_k",required:!1}]},{url:"/text/text/plural/",inputType:"text",outputType:"text",taskName:"plural",models:["inflect"],defaultModel:"inflect",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"word",required:!0},{in:"formData",type:"integer",name:"count",required:!1}]},{url:"/text/text/programming-language-generation/",inputType:"text",outputType:"text",taskName:"programming-language-generation",models:["sentdex-GPyT"],defaultModel:"sentdex-GPyT",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"code_snippet",required:!0}]},{url:"/text/text/question-answering/",inputType:"text",outputType:"text",taskName:"question-answering",models:["deepset-roberta-base-squad2","deepset_bert-base-cased-squad2","distilbert-base-cased-distilled-squad","mfeb-albert-xxlarge-v2-squad2","mrm8488-bert-tiny-5-finetuned-squadv2"],defaultModel:"distilbert-base-cased-distilled-squad",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"context",required:!0},{in:"formData",type:"string",name:"question",required:!0},{in:"formData",type:"integer",name:"top_k",required:!1}]},{url:"/text/text/sentence-paraphraser/",inputType:"text",outputType:"text",taskName:"sentence-paraphraser",models:["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality","ramsrigouthamg-t5_sentence_paraphraser"],defaultModel:"ramsrigouthamg-t5-large-paraphraser-diverse-high-quality",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"context",required:!0}]},{url:"/text/text/sentiment-analysis/",inputType:"text",outputType:"text",taskName:"sentiment-analysis",models:["distilbert-base-uncased","distilbert-base-uncased-finetuned-sst-2-english","nlptown-bert-base-multilingual-uncased-sentiment","zero-shot-classification-facebook-bart-large-mnli"],defaultModel:"nlptown-bert-base-multilingual-uncased-sentiment",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/similarity/",inputType:"text",outputType:"text",taskName:"similarity",models:["all-MiniLM-L6-v2"],defaultModel:"all-MiniLM-L6-v2",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"number"},params:[{in:"formData",type:"string",name:"sentence_1",required:!0},{in:"formData",type:"string",name:"sentence_2",required:!0}]},{url:"/text/text/summarization/",inputType:"text",outputType:"text",taskName:"summarization",models:["bart-large-cnn"],defaultModel:"bart-large-cnn",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}]},{url:"/text/text/translation/",inputType:"text",outputType:"text",taskName:"translation",models:["nllb-200-3-3b"],defaultModel:"nllb-200-3-3b",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1},{in:"formData",type:"string",name:"source",required:!1},{in:"formData",type:"string",name:"target",required:!1}]},{url:"/text/text/word-alignment/",inputType:"text",outputType:"text",taskName:"word-alignment",models:["bert-base-multilingual-cased"],defaultModel:"bert-base-multilingual-cased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"array"},params:[{in:"formData",type:"string",name:"input_string_language_1",required:!0},{in:"formData",type:"string",name:"input_string_language_2",required:!0}]}]},3109:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getContentTypeName=void 0,t.getContentTypeName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),r=e.taskName.replace(/-/g,"_").toUpperCase();return"".concat(t,"_").concat(n,"_").concat(r,"_CONTENT_TYPE")}},7896:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getEndpointsByInputOutput=t.getEndpoints=void 0;var r=n(655),o=n(5485);function i(){return o.ENDPOINT_DEFS}t.getEndpoints=i,t.getEndpointsByInputOutput=function(){var e,t,n=i(),o={};try{for(var a=r.__values(n),u=a.next();!u.done;u=a.next()){var s=u.value;s.inputType in o||(o[s.inputType]={}),s.outputType in o[s.inputType]||(o[s.inputType][s.outputType]=[]),o[s.inputType][s.outputType].push(s)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=a.return)&&t.call(a)}finally{if(e)throw e.error}}return o}},1916:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInputModelType=void 0;var r=n(4044);t.getInputModelType=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Inputs")}},7897:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMethodName=void 0;var r=n(4044);t.getMethodName=function(e){return(0,r.kebabToCamelCase)(e.taskName)}},555:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelTypeName=void 0;var r=n(4044);t.getModelTypeName=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Model")}},797:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelValuesName=void 0;var r=n(4044);t.getModelValuesName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),o=(0,r.kebabToSnakeCase)(e.taskName).toUpperCase();return"".concat(t,"_").concat(n,"_").concat(o,"_MODELS")}},7179:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelType=void 0;var r=n(4044);t.getOutputModelType=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Outputs")}},2168:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelType=t.getInputModelType=t.getModelValuesName=t.getModelTypeName=t.getMethodName=t.getContentTypeName=t.getEndpointsByInputOutput=t.getEndpoints=void 0;var r=n(7896);Object.defineProperty(t,"getEndpoints",{enumerable:!0,get:function(){return r.getEndpoints}}),Object.defineProperty(t,"getEndpointsByInputOutput",{enumerable:!0,get:function(){return r.getEndpointsByInputOutput}});var o=n(3109);Object.defineProperty(t,"getContentTypeName",{enumerable:!0,get:function(){return o.getContentTypeName}});var i=n(7897);Object.defineProperty(t,"getMethodName",{enumerable:!0,get:function(){return i.getMethodName}});var a=n(555);Object.defineProperty(t,"getModelTypeName",{enumerable:!0,get:function(){return a.getModelTypeName}});var u=n(797);Object.defineProperty(t,"getModelValuesName",{enumerable:!0,get:function(){return u.getModelValuesName}});var s=n(1916);Object.defineProperty(t,"getInputModelType",{enumerable:!0,get:function(){return s.getInputModelType}});var p=n(7179);Object.defineProperty(t,"getOutputModelType",{enumerable:!0,get:function(){return p.getOutputModelType}})},3413:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SDK_VERSION=void 0,t.SDK_VERSION="0.3.0"},4044:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.kebabToCamelCase=t.kebabToSnakeCase=t.kebabToPascalCase=t.uncapitalizeFirst=t.capitalizeFirst=void 0;var r=n(655);function o(e){return e[0].toUpperCase()+e.substring(1)}t.capitalizeFirst=o,t.uncapitalizeFirst=function(e){return e[0].toLowerCase()+e.substring(1)},t.kebabToPascalCase=function(e){return e.split("-").map((function(e){return o(e)})).join("")},t.kebabToSnakeCase=function(e){return e.replace(/-/g,"_")},t.kebabToCamelCase=function(e){var t=e.split("-");return r.__spreadArray([t.shift()],r.__read(t.map((function(e){return o(e)}))),!1).join("")}},8778:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE=t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=t.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE=t.TEXT_TEXT_INTENT_CLASSIFICATION_MODELS=t.TEXT_TEXT_HEADLINE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_HEADLINE_GENERATION_MODELS=t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=t.TEXT_TEXT_BULLET_POINT_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_BULLET_POINT_GENERATION_MODELS=t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE=t.TEXT_TEXT_AUTOCORRECT_MODELS=t.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_ARTICLE_GENERATION_MODELS=t.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_AD_GENERATION_MODELS=t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE=t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=t.IMAGE_TEXT_OCR_CONTENT_TYPE=t.IMAGE_TEXT_OCR_MODELS=t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE=t.IMAGE_TEXT_CLASSIFICATION_MODELS=t.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE=t.IMAGE_TEXT_ASCIIFY_MODELS=t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=t.IMAGE_IMAGE_SUPER_RESOLUTION_CONTENT_TYPE=t.IMAGE_IMAGE_SUPER_RESOLUTION_MODELS=t.IMAGE_IMAGE_INPAINTING_CONTENT_TYPE=t.IMAGE_IMAGE_INPAINTING_MODELS=t.IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE=t.IMAGE_IMAGE_GUIDED_INPAINTING_MODELS=t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE=t.IMAGE_IMAGE_FACE_BLURING_MODELS=t.IMAGE_IMAGE_DEBLURRING_CONTENT_TYPE=t.IMAGE_IMAGE_DEBLURRING_MODELS=t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_COLORIZATION_MODELS=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=void 0,t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE=t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=t.TEXT_TEXT_TRANSLATION_CONTENT_TYPE=t.TEXT_TEXT_TRANSLATION_MODELS=t.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE=t.TEXT_TEXT_SUMMARIZATION_MODELS=t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE=t.TEXT_TEXT_SIMILARITY_MODELS=t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE=t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE=t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE=t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_PLURAL_CONTENT_TYPE=t.TEXT_TEXT_PLURAL_MODELS=t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=void 0,t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=["coqui_english_huge_vocab"],t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=["mobilenet","xception"],t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_COLORIZATION_MODELS=["deoldify-artistic","deoldify-stable","mlhubber_colorize"],t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_DEBLURRING_MODELS=["CMFNet"],t.IMAGE_IMAGE_DEBLURRING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_FACE_BLURING_MODELS=["ageitgey"],t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_GUIDED_INPAINTING_MODELS=["stable-diffusion"],t.IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_INPAINTING_MODELS=["fcf","lama","latent-diffusion","mat","zits"],t.IMAGE_IMAGE_INPAINTING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_SUPER_RESOLUTION_MODELS=[],t.IMAGE_IMAGE_SUPER_RESOLUTION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=["v1"],t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_ASCIIFY_MODELS=["ramesh-aditya"],t.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_CLASSIFICATION_MODELS=["alexnet","convnext_base","convnext_large","convnext_small","convnext_tiny","densenet121","densenet161","densenet169","densenet201","efficientnet_b0","efficientnet_b1_v1","efficientnet_b1_v2","efficientnet_b2","efficientnet_b3","efficientnet_b4","efficientnet_b5","efficientnet_b6","efficientnet_b7","efficientnet_v2_l","efficientnet_v2_m","efficientnet_v2_s","googlenet","googlenet_quantized_fbgemm_v1","inception_v3","inception_v3_fbgemm_v1","mnasnet0_5","mnasnet0_75","mnasnet1_0","mnasnet1_3","mobilenet_v2_quantized_qnnpack_v1","mobilenet_v2_v1","mobilenet_v2_v2","mobilenet_v3_large_quantized_qnnpack_v1","mobilenet_v3_large_v1","mobilenet_v3_large_v2","mobilenet_v3_small","regnet_x_16gf_v1","regnet_x_16gf_v2","regnet_x_1_6gf_v1","regnet_x_1_6gf_v2","regnet_x_32gf_v1","regnet_x_32gf_v2","regnet_x_3_2gf_v1","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_x_400mf_v2","regnet_x_800mf_v1","regnet_x_800mf_v2","regnet_x_8gf_v1","regnet_x_8gf_v2","regnet_y_128gf_swag_e2e_v1","regnet_y_128gf_swag_linear_v1","regnet_y_16gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","regnet_y_16gf_v1","regnet_y_16gf_v2","regnet_y_1_6gf_v1","regnet_y_1_6gf_v2","regnet_y_32gf_swag_e2e_v1","regnet_y_32gf_swag_linear_v1","regnet_y_32gf_v1","regnet_y_32gf_v2","regnet_y_3_2gf_v1","regnet_y_3_2gf_v2","regnet_y_400mf_v1","regnet_y_400mf_v2","regnet_y_8gf_v1","regnet_y_8gf_v2","resnet152_v1","resnet152_v2","resnet18","resnet18_quantized_fbgemm_v1","resnet34","resnet50_quantized_fbgemm_v1","resnet50_quantized_fbgemm_v2","resnet50_v1","resnet50_v2","resnext101_32x8d_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","resnext101_32x8d_v1","resnext101_32x8d_v2","resnext101_64x4d_quantized_fbgemm_v1","resnext101_64x4d_v1","resnext50_32x4d_v1","resnext50_32x4d_v2","shufflenet_v2_x0_5","shufflenet_v2_x0_5_quantized_fbgemm_v1","shufflenet_v2_x1_0","shufflenet_v2_x1_0_quantized_fbgemm_v1","shufflenet_v2_x1_5","shufflenet_v2_x1_5_quantized_fbgemm_v1","shufflenet_v2_x2_0","shufflenet_v2_x2_0_quantized_fbgemm_v1","squeezenet1_0","squeezenet1_1","swin_b","swin_s","swin_t","vgg11","vgg11_bn","vgg13","vgg13_bn","vgg16_bn","vgg16_v1","vgg19","vgg19_bn","vit_b_16_swag_e2e_v1","vit_b_16_swag_linear_v1","vit_b_16_v1","vit_b_32","vit_h_14_swag_e2e_v1","vit_h_14_swag_linear_v1","vit_l_16_swag_e2e_v1","vit_l_16_swag_linear_v1","vit_l_16_v1","vit_l_32","wide_resnet101_2_v1","wide_resnet101_2_v2"],t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_OCR_MODELS=["easy-ocr","tesseract-default","tesseract-denoising"],t.IMAGE_TEXT_OCR_CONTENT_TYPE="multipart/form-data",t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=["dream-studio","stable-diffusion"],t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AD_GENERATION_MODELS=["gpt-j"],t.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_ARTICLE_GENERATION_MODELS=["fast-gpt-j"],t.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AUTOCORRECT_MODELS=["flexudy-t5-base-multi-sentence-doctor"],t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_BULLET_POINT_GENERATION_MODELS=["jpt"],t.TEXT_TEXT_BULLET_POINT_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=["mrm8488-t5-base-finetuned-emotion"],t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=["Hate-speech-CNERG-dehatebert-mono-english","byt5-base-tweet-hate-detection"],t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_HEADLINE_GENERATION_MODELS=["t5-base-en-generate-headline"],t.TEXT_TEXT_HEADLINE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_INTENT_CLASSIFICATION_MODELS=["fast-gpt-j"],t.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=["keybert-paraphrase-MiniLM-L6-v2","keybert-paraphrase-multilingual-MiniLM-L12-v2"],t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=["toftrup-etal-2021","xlm-roberta-base-language-detection"],t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=["EleutherAI-gpt-neo-2_7B","bloom-560m"],t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=["dbmdz-bert-large-cased-finetuned-conll03-english"],t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=["bert-base-uncased"],t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=["albert-base-v2","bert-base-uncased","distilbert-base-uncased","roberta-base"],t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PLURAL_MODELS=["inflect"],t.TEXT_TEXT_PLURAL_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=["sentdex-GPyT"],t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=["deepset-roberta-base-squad2","deepset_bert-base-cased-squad2","distilbert-base-cased-distilled-squad","mfeb-albert-xxlarge-v2-squad2","mrm8488-bert-tiny-5-finetuned-squadv2"],t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality","ramsrigouthamg-t5_sentence_paraphraser"],t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=["distilbert-base-uncased","distilbert-base-uncased-finetuned-sst-2-english","nlptown-bert-base-multilingual-uncased-sentiment","zero-shot-classification-facebook-bart-large-mnli"],t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SIMILARITY_MODELS=["all-MiniLM-L6-v2"],t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SUMMARIZATION_MODELS=["bart-large-cnn"],t.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_TRANSLATION_MODELS=["nllb-200-3-3b"],t.TEXT_TEXT_TRANSLATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=["bert-base-multilingual-cased"],t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE="application/x-www-form-urlencoded"},2764:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(655);n(9601),n(9720),n(8559),n(8674),r.__exportStar(n(3465),t);var o=r.__importStar(n(3465));t.default=o.default},6117:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNotDefined=t.isDefined=void 0,t.isDefined=function(e){return null!=e},t.isNotDefined=function(e){return null==e}},655:function(e,t,n){"use strict";n.r(t),n.d(t,{__assign:function(){return i},__asyncDelegator:function(){return h},__asyncGenerator:function(){return v},__asyncValues:function(){return N},__await:function(){return E},__awaiter:function(){return c},__classPrivateFieldGet:function(){return C},__classPrivateFieldIn:function(){return A},__classPrivateFieldSet:function(){return w},__createBinding:function(){return l},__decorate:function(){return u},__exportStar:function(){return f},__extends:function(){return o},__generator:function(){return _},__importDefault:function(){return I},__importStar:function(){return O},__makeTemplateObject:function(){return x},__metadata:function(){return p},__param:function(){return s},__read:function(){return T},__rest:function(){return a},__spread:function(){return m},__spreadArray:function(){return y},__spreadArrays:function(){return g},__values:function(){return d}});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function u(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function s(e,t){return function(n,r){t(n,r,e)}}function p(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function c(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))}function _(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}var l=Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]};function f(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||l(t,e,n)}function d(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function T(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function m(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(T(arguments[t]));return e}function g(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r}function y(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function E(e){return this instanceof E?(this.v=e,this):new E(e)}function v(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||u(e,t)}))})}function u(e,t){try{(n=o[e](t)).value instanceof E?Promise.resolve(n.value.v).then(s,p):c(i[0][2],n)}catch(e){c(i[0][3],e)}var n}function s(e){u("next",e)}function p(e){u("throw",e)}function c(e,t){e(t),i.shift(),i.length&&u(i[0][0],i[0][1])}}function h(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:E(e[r](t)),done:"return"===r}:o?o(t):t}:o}}function N(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=d(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}function x(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var b=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function O(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&l(t,e,n);return b(t,e),t}function I(e){return e&&e.__esModule?e:{default:e}}function C(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}function w(e,t,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(e,n):o?o.value=n:t.set(e,n),n}function A(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r=n(2764);return r.default}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,