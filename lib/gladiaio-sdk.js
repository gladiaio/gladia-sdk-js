!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("gladiaio_sdk",[],t):"object"==typeof exports?exports.gladiaio_sdk=t():e.gladiaio_sdk=t()}(this,(()=>(()=>{var e={8917:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(9669),o=n.n(r),i=n(6026),a=n.n(i),s=n(5327),u=n.n(s),p=n(4097),_=n.n(p),d=n(4867);async function l(e){const t=function(e){const t=new Headers(e.headers);if(e.auth){const n=e.auth.username||"",r=e.auth.password?decodeURI(encodeURIComponent(e.auth.password)):"";t.set("Authorization",`Basic ${btoa(n+":"+r)}`)}const n=e.method.toUpperCase(),r={headers:t,method:n};"GET"!==n&&"HEAD"!==n&&(r.body=e.data),e.mode&&(r.mode=e.mode),e.cache&&(r.cache=e.cache),e.integrity&&(r.integrity=e.integrity),e.redirect&&(r.redirect=e.redirect),e.referrer&&(r.referrer=e.referrer),(0,d.isUndefined)(e.withCredentials)||(r.credentials=e.withCredentials?"include":"omit");const o=_()(e.baseURL,e.url),i=u()(o,e.params,e.paramsSerializer);return new Request(i,r)}(e),n=[c(t,e)];e.timeout&&e.timeout>0&&n.push(new Promise((n=>{setTimeout((()=>{const r=e.timeoutErrorMessage?e.timeoutErrorMessage:"timeout of "+e.timeout+"ms exceeded";n(T(r,e,"ECONNABORTED",t))}),e.timeout)})));const r=await Promise.race(n);return new Promise(((t,n)=>{r instanceof Error?n(r):"[object Function]"===Object.prototype.toString.call(e.settle)?e.settle(t,n,r):a()(t,n,r)}))}async function c(e,t){let n;try{n=await fetch(e)}catch(n){return T("Network Error",t,"ERR_NETWORK",e)}const r={ok:n.ok,status:n.status,statusText:n.statusText,headers:new Headers(n.headers),config:t,request:e};if(n.status>=200&&204!==n.status)switch(t.responseType){case"arraybuffer":r.data=await n.arrayBuffer();break;case"blob":r.data=await n.blob();break;case"json":r.data=await n.json();break;case"formData":r.data=await n.formData();break;default:r.data=await n.text()}return r}function T(e,t,n,r,i){return o().AxiosError&&"function"==typeof o().AxiosError?new(o().AxiosError)(e,o().AxiosError[n],t,r,i):function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}(new Error(e),t,n,r,i)}},9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),i=n(4372),a=n(5327),s=n(4097),u=n(4109),p=n(7985),_=n(7874),d=n(2648),l=n(644),c=n(205);e.exports=function(e){return new Promise((function(t,n){var T,f=e.data,m=e.headers,E=e.responseType;function g(){e.cancelToken&&e.cancelToken.unsubscribe(T),e.signal&&e.signal.removeEventListener("abort",T)}r.isFormData(f)&&r.isStandardBrowserEnv()&&delete m["Content-Type"];var y=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",v=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";m.Authorization="Basic "+btoa(h+":"+v)}var N=s(e.baseURL,e.url);function O(){if(y){var r="getAllResponseHeaders"in y?u(y.getAllResponseHeaders()):null,i={data:E&&"text"!==E&&"json"!==E?y.response:y.responseText,status:y.status,statusText:y.statusText,headers:r,config:e,request:y};o((function(e){t(e),g()}),(function(e){n(e),g()}),i),y=null}}if(y.open(e.method.toUpperCase(),a(N,e.params,e.paramsSerializer),!0),y.timeout=e.timeout,"onloadend"in y?y.onloadend=O:y.onreadystatechange=function(){y&&4===y.readyState&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf("file:"))&&setTimeout(O)},y.onabort=function(){y&&(n(new d("Request aborted",d.ECONNABORTED,e,y)),y=null)},y.onerror=function(){n(new d("Network Error",d.ERR_NETWORK,e,y,y)),y=null},y.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||_;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new d(t,r.clarifyTimeoutError?d.ETIMEDOUT:d.ECONNABORTED,e,y)),y=null},r.isStandardBrowserEnv()){var x=(e.withCredentials||p(N))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;x&&(m[e.xsrfHeaderName]=x)}"setRequestHeader"in y&&r.forEach(m,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete m[t]:y.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(y.withCredentials=!!e.withCredentials),E&&"json"!==E&&(y.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&y.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&y.upload&&y.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(T=function(e){y&&(n(!e||e&&e.type?new l:e),y.abort(),y=null)},e.cancelToken&&e.cancelToken.subscribe(T),e.signal&&(e.signal.aborted?T():e.signal.addEventListener("abort",T))),f||(f=null);var b=c(N);b&&-1===["http","https","file"].indexOf(b)?n(new d("Unsupported protocol "+b+":",d.ERR_BAD_REQUEST,e)):y.send(f)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),i=n(321),a=n(7185),s=function e(t){var n=new i(t),s=o(i.prototype.request,n);return r.extend(s,i.prototype,n),r.extend(s,n),s.create=function(n){return e(a(t,n))},s}(n(5546));s.Axios=i,s.CanceledError=n(644),s.CancelToken=n(4972),s.isCancel=n(6502),s.VERSION=n(7288).version,s.toFormData=n(7675),s.AxiosError=n(2648),s.Cancel=s.CanceledError,s.all=function(e){return Promise.all(e)},s.spread=n(8713),s.isAxiosError=n(6268),e.exports=s,e.exports.default=s},4972:(e,t,n)=>{"use strict";var r=n(644);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},644:(e,t,n)=>{"use strict";var r=n(2648);function o(e){r.call(this,null==e?"canceled":e,r.ERR_CANCELED),this.name="CanceledError"}n(4867).inherits(o,r,{__CANCEL__:!0}),e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),i=n(782),a=n(3572),s=n(7185),u=n(4097),p=n(4875),_=p.validators;function d(e){this.defaults=e,this.interceptors={request:new i,response:new i}}d.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=s(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&p.assertOptions(n,{silentJSONParsing:_.transitional(_.boolean),forcedJSONParsing:_.transitional(_.boolean),clarifyTimeoutError:_.transitional(_.boolean)},!1);var r=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var i,u=[];if(this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)})),!o){var d=[a,void 0];for(Array.prototype.unshift.apply(d,r),d=d.concat(u),i=Promise.resolve(t);d.length;)i=i.then(d.shift(),d.shift());return i}for(var l=t;r.length;){var c=r.shift(),T=r.shift();try{l=c(l)}catch(e){T(e);break}}try{i=a(l)}catch(e){return Promise.reject(e)}for(;u.length;)i=i.then(u.shift(),u.shift());return i},d.prototype.getUri=function(e){e=s(this.defaults,e);var t=u(e.baseURL,e.url);return o(t,e.params,e.paramsSerializer)},r.forEach(["delete","get","head","options"],(function(e){d.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(s(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}d.prototype[e]=t(),d.prototype[e+"Form"]=t(!0)})),e.exports=d},2648:(e,t,n)=>{"use strict";var r=n(4867);function o(e,t,n,r,o){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}r.inherits(o,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var i=o.prototype,a={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){a[e]={value:e}})),Object.defineProperties(o,a),Object.defineProperty(i,"isAxiosError",{value:!0}),o.from=function(e,t,n,a,s,u){var p=Object.create(i);return r.toFlatObject(e,p,(function(e){return e!==Error.prototype})),o.call(p,e.message,t,n,a,s),p.name=e.name,u&&Object.assign(p,u),p},e.exports=o},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),i=n(6502),a=n(5546),s=n(644);function u(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new s}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return u(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(u(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={};function o(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function i(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(e[n],t[n])}function a(e){if(!r.isUndefined(t[e]))return o(void 0,t[e])}function s(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(void 0,t[n])}function u(n){return n in t?o(e[n],t[n]):n in e?o(void 0,e[n]):void 0}var p={url:a,method:a,data:a,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:u};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=p[e]||i,o=t(e);r.isUndefined(o)&&t!==u||(n[e]=o)})),n}},6026:(e,t,n)=>{"use strict";var r=n(2648);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(new r("Request failed with status code "+n.status,[r.ERR_BAD_REQUEST,r.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867),o=n(5546);e.exports=function(e,t,n){var i=this||o;return r.forEach(n,(function(n){e=n.call(i,e,t)})),e}},5546:(e,t,n)=>{"use strict";var r=n(4867),o=n(6016),i=n(2648),a=n(7874),s=n(7675),u={"Content-Type":"application/x-www-form-urlencoded"};function p(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var _,d={transitional:a,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(_=n(5448)),_),transformRequest:[function(e,t){if(o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e))return e;if(r.isArrayBufferView(e))return e.buffer;if(r.isURLSearchParams(e))return p(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var n,i=r.isObject(e),a=t&&t["Content-Type"];if((n=r.isFileList(e))||i&&"multipart/form-data"===a){var u=this.env&&this.env.FormData;return s(n?{"files[]":e}:e,u&&new u)}return i||"application/json"===a?(p(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||d.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,a=!n&&"json"===this.responseType;if(a||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw i.from(e,i.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:n(1623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){d.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){d.headers[e]=r.merge(u)})),e.exports=d},7874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:e=>{e.exports={version:"0.27.2"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},1623:e=>{e.exports=null},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},205:e=>{"use strict";e.exports=function(e){var t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},7675:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||new FormData;var n=[];function o(e){return null===e?"":r.isDate(e)?e.toISOString():r.isArrayBuffer(e)||r.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(i,a){if(r.isPlainObject(i)||r.isArray(i)){if(-1!==n.indexOf(i))throw Error("Circular reference detected in "+a);n.push(i),r.forEach(i,(function(n,i){if(!r.isUndefined(n)){var s,u=a?a+"."+i:i;if(n&&!a&&"object"==typeof n)if(r.endsWith(i,"{}"))n=JSON.stringify(n);else if(r.endsWith(i,"[]")&&(s=r.toArray(n)))return void s.forEach((function(e){!r.isUndefined(e)&&t.append(u,o(e))}));e(n,u)}})),n.pop()}else t.append(a,o(i))}(e),t}},4875:(e,t,n)=>{"use strict";var r=n(7288).version,o=n(2648),i={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){i[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var a={};i.transitional=function(e,t,n){function i(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,s){if(!1===e)throw new o(i(r," has been removed"+(t?" in "+t:"")),o.ERR_DEPRECATED);return t&&!a[r]&&(a[r]=!0,console.warn(i(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,s)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new o("options must be an object",o.ERR_BAD_OPTION_VALUE);for(var r=Object.keys(e),i=r.length;i-- >0;){var a=r[i],s=t[a];if(s){var u=e[a],p=void 0===u||s(u,a,e);if(!0!==p)throw new o("option "+a+" must be "+p,o.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new o("Unknown option "+a,o.ERR_BAD_OPTION)}},validators:i}},4867:(e,t,n)=>{"use strict";var r,o=n(1849),i=Object.prototype.toString,a=(r=Object.create(null),function(e){var t=i.call(e);return r[t]||(r[t]=t.slice(8,-1).toLowerCase())});function s(e){return e=e.toLowerCase(),function(t){return a(t)===e}}function u(e){return Array.isArray(e)}function p(e){return void 0===e}var _=s("ArrayBuffer");function d(e){return null!==e&&"object"==typeof e}function l(e){if("object"!==a(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var c=s("Date"),T=s("File"),f=s("Blob"),m=s("FileList");function E(e){return"[object Function]"===i.call(e)}var g=s("URLSearchParams");function y(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),u(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}var h,v=(h="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return h&&e instanceof h});e.exports={isArray:u,isArrayBuffer:_,isBuffer:function(e){return null!==e&&!p(e)&&null!==e.constructor&&!p(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||i.call(e)===t||E(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&_(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:d,isPlainObject:l,isUndefined:p,isDate:c,isFile:T,isBlob:f,isFunction:E,isStream:function(e){return d(e)&&E(e.pipe)},isURLSearchParams:g,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:y,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):u(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)y(arguments[r],n);return t},extend:function(e,t,n){return y(t,(function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,n,r){e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,n&&Object.assign(e.prototype,n)},toFlatObject:function(e,t,n){var r,o,i,a={};t=t||{};do{for(o=(r=Object.getOwnPropertyNames(e)).length;o-- >0;)a[i=r[o]]||(t[i]=e[i],a[i]=!0);e=Object.getPrototypeOf(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:a,kindOfTest:s,endsWith:function(e,t,n){e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;var r=e.indexOf(t,n);return-1!==r&&r===n},toArray:function(e){if(!e)return null;var t=e.length;if(p(t))return null;for(var n=new Array(t);t-- >0;)n[t]=e[t];return n},isTypedArray:v,isFileList:m}},3682:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudioToText=void 0;var o=n(8778),i=n(1193),a=n(6117),s=function(){function e(e){this.params=e,this.httpClient=(0,i.getHttpClient)(this.params)}return e.prototype.audioTranscription=function(e){var t,n=new FormData;return(0,a.isDefined)(e.audio)&&n.append("audio",e.audio),(0,a.isDefined)(e.audio_url)&&n.append("audio_url",e.audio_url),(0,a.isDefined)(e.language)&&n.append("language",e.language),this.httpClient.post({url:"/audio/text/audio-transcription/",headers:r({"Content-Type":this.params.useFetch?o.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n})},e}();t.FromAudioToText=s},8490:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudio=void 0;var r=n(3682),o=function(){function e(e){this.fromAudioToTextInst=new r.FromAudioToText(e)}return e.prototype.toText=function(){return this.fromAudioToTextInst},e}();t.FromAudio=o},8814:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToImage=void 0;var o=n(8778),i=n(1193),a=n(6117),s=function(){function e(e){this.params=e,this.httpClient=(0,i.getHttpClient)(this.params)}return e.prototype.backgroundRemoval=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/background-removal/",headers:r({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.colorization=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/colorization/",headers:r({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.faceBluring=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/face-bluring/",headers:r({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.uncolorization=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/uncolorization/",headers:r({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e}();t.FromImageToImage=s},4802:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToText=void 0;var o=n(8778),i=n(1193),a=n(6117),s=function(){function e(e){this.params=e,this.httpClient=(0,i.getHttpClient)(this.params)}return e.prototype.asciify=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/text/asciify/",headers:r({"Content-Type":this.params.useFetch?o.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n})},e.prototype.classification=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),(0,a.isDefined)(e.top_k)&&n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/image/text/classification/",headers:r({"Content-Type":this.params.useFetch?o.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n})},e.prototype.ocr=function(e){var t,n=new FormData;return(0,a.isDefined)(e.image)&&n.append("image",e.image),(0,a.isDefined)(e.image_url)&&n.append("image_url",e.image_url),(0,a.isDefined)(e.source_language)&&n.append("source_language",e.source_language),this.httpClient.post({url:"/image/text/ocr/",headers:r({"Content-Type":this.params.useFetch?o.IMAGE_TEXT_OCR_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n})},e}();t.FromImageToText=s},2062:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImage=void 0;var r=n(8814),o=n(4802),i=function(){function e(e){this.fromImageToImageInst=new r.FromImageToImage(e),this.fromImageToTextInst=new o.FromImageToText(e)}return e.prototype.toImage=function(){return this.fromImageToImageInst},e.prototype.toText=function(){return this.fromImageToTextInst},e}();t.FromImage=i},4153:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToImage=void 0;var o=n(8778),i=n(1193),a=n(6117),s=n(9142),u=function(){function e(e){this.params=e,this.httpClient=(0,i.getHttpClient)(this.params)}return e.prototype.imageGeneration=function(e){var t,n=new s.UrlFormData;return n.append("prompt",e.prompt),(0,a.isDefined)(e.samples)&&n.append("samples",String(e.samples)),(0,a.isDefined)(e.steps)&&n.append("steps",String(e.steps)),(0,a.isDefined)(e.seed)&&n.append("seed",String(e.seed)),this.httpClient.post({url:"/text/image/image-generation/",headers:r({"Content-Type":o.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n.toString()})},e}();t.FromTextToImage=u},8271:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToText=void 0;var o=n(8778),i=n(1193),a=n(6117),s=n(9142),u=function(){function e(e){this.params=e,this.httpClient=(0,i.getHttpClient)(this.params)}return e.prototype.adGeneration=function(e){var t,n=new s.UrlFormData;return(0,a.isDefined)(e.keywords)&&n.append("keywords",e.keywords),this.httpClient.post({url:"/text/text/ad-generation/",headers:r({"Content-Type":o.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.articleGeneration=function(e){var t,n=new s.UrlFormData;return(0,a.isDefined)(e.title)&&n.append("title",e.title),this.httpClient.post({url:"/text/text/article-generation/",headers:r({"Content-Type":o.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.autocorrect=function(e){var t,n=new s.UrlFormData;return n.append("sentence",e.sentence),this.httpClient.post({url:"/text/text/autocorrect/",headers:r({"Content-Type":o.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.emotionRecognition=function(e){var t,n=new s.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/emotion-recognition/",headers:r({"Content-Type":o.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.hateSpeechDetection=function(e){var t,n=new s.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/hate-speech-detection/",headers:r({"Content-Type":o.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.intentClassification=function(e){var t,n=new s.UrlFormData;return(0,a.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/intent-classification/",headers:r({"Content-Type":o.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.keywordExtraction=function(e){var t,n=new s.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/keyword-extraction/",headers:r({"Content-Type":o.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.languageDetection=function(e){var t,n=new s.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-detection/",headers:r({"Content-Type":o.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.languageGeneration=function(e){var t,n=new s.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-generation/",headers:r({"Content-Type":o.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.namedEntityRecognition=function(e){var t,n=new s.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/named-entity-recognition/",headers:r({"Content-Type":o.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.nextSentencePrediction=function(e){var t,n=new s.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/next-sentence-prediction/",headers:r({"Content-Type":o.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.nextWordPrediction=function(e){var t,n=new s.UrlFormData;return n.append("sentence",e.sentence),this.httpClient.post({url:"/text/text/next-word-prediction/",headers:r({"Content-Type":o.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.plural=function(e){var t,n=new s.UrlFormData;return n.append("word",e.word),(0,a.isDefined)(e.count)&&n.append("count",String(e.count)),this.httpClient.post({url:"/text/text/plural/",headers:r({"Content-Type":o.TEXT_TEXT_PLURAL_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.programmingLanguageGeneration=function(e){var t,n=new s.UrlFormData;return n.append("code_snippet",e.code_snippet),this.httpClient.post({url:"/text/text/programming-language-generation/",headers:r({"Content-Type":o.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.questionAnswering=function(e){var t,n=new s.UrlFormData;return n.append("context",e.context),n.append("question",e.question),this.httpClient.post({url:"/text/text/question-answering/",headers:r({"Content-Type":o.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.sentenceParaphraser=function(e){var t,n=new s.UrlFormData;return n.append("context",e.context),this.httpClient.post({url:"/text/text/sentence-paraphraser/",headers:r({"Content-Type":o.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.sentimentAnalysis=function(e){var t,n=new s.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/sentiment-analysis/",headers:r({"Content-Type":o.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.similarity=function(e){var t,n=new s.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/similarity/",headers:r({"Content-Type":o.TEXT_TEXT_SIMILARITY_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.summarization=function(e){var t,n=new s.UrlFormData;return(0,a.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/summarization/",headers:r({"Content-Type":o.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.translation=function(e){var t,n=new s.UrlFormData;return(0,a.isDefined)(e.text)&&n.append("text",e.text),(0,a.isDefined)(e.source)&&n.append("source",e.source),(0,a.isDefined)(e.target)&&n.append("target",e.target),this.httpClient.post({url:"/text/text/translation/",headers:r({"Content-Type":o.TEXT_TEXT_TRANSLATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.wordAlignment=function(e){var t,n=new s.UrlFormData;return n.append("input_string_language_1",e.input_string_language_1),n.append("input_string_language_2",e.input_string_language_2),this.httpClient.post({url:"/text/text/word-alignment/",headers:r({"Content-Type":o.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r({},e.model?{model:e.model}:{}),body:n.toString()})},e}();t.FromTextToText=u},9438:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromText=void 0;var r=n(4153),o=n(8271),i=function(){function e(e){this.fromTextToImageInst=new r.FromTextToImage(e),this.fromTextToTextInst=new o.FromTextToText(e)}return e.prototype.toImage=function(){return this.fromTextToImageInst},e.prototype.toText=function(){return this.fromTextToTextInst},e}();t.FromText=i},4085:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Shortcuts=void 0;var n=function(){function e(){}return e.prototype.audioTranscription=function(e){return this.fromAudio().toText().audioTranscription(e)},e.prototype.backgroundRemoval=function(e){return this.fromImage().toImage().backgroundRemoval(e)},e.prototype.colorization=function(e){return this.fromImage().toImage().colorization(e)},e.prototype.faceBluring=function(e){return this.fromImage().toImage().faceBluring(e)},e.prototype.uncolorization=function(e){return this.fromImage().toImage().uncolorization(e)},e.prototype.asciify=function(e){return this.fromImage().toText().asciify(e)},e.prototype.classification=function(e){return this.fromImage().toText().classification(e)},e.prototype.ocr=function(e){return this.fromImage().toText().ocr(e)},e.prototype.imageGeneration=function(e){return this.fromText().toImage().imageGeneration(e)},e.prototype.adGeneration=function(e){return this.fromText().toText().adGeneration(e)},e.prototype.articleGeneration=function(e){return this.fromText().toText().articleGeneration(e)},e.prototype.autocorrect=function(e){return this.fromText().toText().autocorrect(e)},e.prototype.emotionRecognition=function(e){return this.fromText().toText().emotionRecognition(e)},e.prototype.hateSpeechDetection=function(e){return this.fromText().toText().hateSpeechDetection(e)},e.prototype.intentClassification=function(e){return this.fromText().toText().intentClassification(e)},e.prototype.keywordExtraction=function(e){return this.fromText().toText().keywordExtraction(e)},e.prototype.languageDetection=function(e){return this.fromText().toText().languageDetection(e)},e.prototype.languageGeneration=function(e){return this.fromText().toText().languageGeneration(e)},e.prototype.namedEntityRecognition=function(e){return this.fromText().toText().namedEntityRecognition(e)},e.prototype.nextSentencePrediction=function(e){return this.fromText().toText().nextSentencePrediction(e)},e.prototype.nextWordPrediction=function(e){return this.fromText().toText().nextWordPrediction(e)},e.prototype.plural=function(e){return this.fromText().toText().plural(e)},e.prototype.programmingLanguageGeneration=function(e){return this.fromText().toText().programmingLanguageGeneration(e)},e.prototype.questionAnswering=function(e){return this.fromText().toText().questionAnswering(e)},e.prototype.sentenceParaphraser=function(e){return this.fromText().toText().sentenceParaphraser(e)},e.prototype.sentimentAnalysis=function(e){return this.fromText().toText().sentimentAnalysis(e)},e.prototype.similarity=function(e){return this.fromText().toText().similarity(e)},e.prototype.summarization=function(e){return this.fromText().toText().summarization(e)},e.prototype.translation=function(e){return this.fromText().toText().translation(e)},e.prototype.wordAlignment=function(e){return this.fromText().toText().wordAlignment(e)},e}();t.Shortcuts=n},2889:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.GladiaClient=void 0;var a=n(4085),s=n(8490),u=n(2062),p=n(9438),_=function(e){function t(t){var n,r=this;r=e.call(this)||this;var o=i(i({},t),{useFetch:null!==(n=t.useFetch)&&void 0!==n&&n});return r.fromAudioInst=new s.FromAudio(o),r.fromImageInst=new u.FromImage(o),r.fromTextInst=new p.FromText(o),r}return o(t,e),t.prototype.fromAudio=function(){return this.fromAudioInst},t.prototype.fromImage=function(){return this.fromImageInst},t.prototype.fromText=function(){return this.fromTextInst},t}(a.Shortcuts);t.GladiaClient=_},3465:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.meta=t.GladiaClient=t.gladia=void 0;var s=n(2889);function u(e){return new s.GladiaClient(e)}t.gladia=u,t.default=u;var p=n(2889);Object.defineProperty(t,"GladiaClient",{enumerable:!0,get:function(){return p.GladiaClient}}),i(n(8778),t),t.meta=a(n(2168))},6976:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.axiosFetchAdapter=void 0,t.axiosFetchAdapter=function(){return Promise.resolve().then((function(){return i(n(8917))})).then((function(e){return e.default}))}},1193:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getHttpClient=void 0;var s=a(n(9669)),u=n(6976),p=n(3413),_=n(6825);t.getHttpClient=function(e){var t,n,o,i,a;return(null!==(t=e.customHttpClient)&&void 0!==t?t:d)({baseHeaders:r({"x-gladia-key":e.apiKey,"x-gladia-sdk":p.SDK_VERSION},null!==(n=e.headers)&&void 0!==n?n:{}),baseUrl:null!==(o=e.baseUrl)&&void 0!==o?o:"https://v2-api.gladia.io",useFetch:null!==(i=e.useFetch)&&void 0!==i&&i,httpClientTimeout:null!==(a=e.httpClientTimeout)&&void 0!==a?a:3e5})};var d=function(e){var t=e.baseHeaders,n=e.baseUrl,a=e.useFetch,p=e.httpClientTimeout;return{post:function(e){var d;return o(this,void 0,void 0,(function(){var o,l,c,T,f,m,E;return i(this,(function(i){switch(i.label){case 0:return o=r(r({},t),e.headers),l="".concat(n).concat(e.url).concat((0,_.searchQueryParamSerializer)(e.query)),c=null!==(d=e.responseType)&&void 0!==d?d:"json",T=null!=p?p:3e5,a?(E={},[4,(0,u.axiosFetchAdapter)()]):[3,2];case 1:return E.adapter=i.sent(),m=E,[3,3];case 2:m={},i.label=3;case 3:return f=m,[2,s.default.post(l,e.body,r(r({headers:o,responseType:c},f),{timeout:T})).then((function(e){return e.data}))]}}))}))}}}},6825:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.searchParamDeserializer=t.searchParamSerializer=t.searchQueryParamSerializer=void 0;var r=n(6117);function o(e){return Object.entries(e).map((function(e){return t=e[0],n=e[1],Array.isArray(n)?"".concat(t,"=").concat(n.map((function(e){return i(e)})).join(",")):"string"==typeof n?"".concat(t,"=").concat(i(n)):"".concat(t,"=").concat(n);var t,n})).join("&")}function i(e){return encodeURI(e).replace(/,/g,"%2C")}function a(e){return decodeURI(e).replace(/%2C/g,",")}t.searchQueryParamSerializer=function(e){if((0,r.isNotDefined)(e))return"";var t=o(e);return 0===t.length?"":"?"+t},t.searchParamSerializer=o,t.searchParamDeserializer=function(e){return(0,r.isNotDefined)(e)||0===e.length?{}:Object.fromEntries(e.split("&").map((function(e){return e.split("=")})).map((function(e){var t=e[0],n=e[1];return n.includes(",")?[t,n.split(",")]:[t,n]})).map((function(e){var t=e[0],n=e[1];return"string"==typeof n?[t,a(n)]:[t,n.map(a)]})))}},9142:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrlFormData=void 0;var r=n(6825),o=function(){function e(e){this.data={},this.data=(0,r.searchParamDeserializer)(e)}return e.prototype.append=function(e,t){this.data[e]=t},e.prototype.get=function(e){return this.data[e]},e.prototype.toString=function(){return(0,r.searchParamSerializer)(this.data)},e}();t.UrlFormData=o},5485:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ENDPOINT_DEFS=void 0,t.ENDPOINT_DEFS=[{url:"/audio/text/audio-transcription/",inputType:"audio",outputType:"text",taskName:"audio-transcription",models:["coqui_english_huge_vocab"],defaultModel:"coqui_english_huge_vocab",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"audio",name:"audio",required:!1},{in:"formData",type:"url",name:"audio_url",required:!1},{in:"formData",type:"string",name:"language",required:!1}]},{url:"/image/image/background-removal/",inputType:"image",outputType:"image",taskName:"background-removal",models:["mobilenet","xception"],defaultModel:"mobilenet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/image/colorization/",inputType:"image",outputType:"image",taskName:"colorization",models:["deoldify-artistic","deoldify-stable"],defaultModel:"deoldify-stable",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/image/face-bluring/",inputType:"image",outputType:"image",taskName:"face-bluring",models:["ageitgey"],defaultModel:"ageitgey",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/image/uncolorization/",inputType:"image",outputType:"image",taskName:"uncolorization",models:["v1"],defaultModel:"v1",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/text/asciify/",inputType:"image",outputType:"text",taskName:"asciify",models:["ramesh-aditya"],defaultModel:"ramesh-aditya",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}]},{url:"/image/text/classification/",inputType:"image",outputType:"text",taskName:"classification",models:["alexnet","convnext_base","convnext_large","convnext_small","convnext_tiny","densenet121","densenet161","densenet169","densenet201","efficientnet_b0","efficientnet_b1_v1","efficientnet_b1_v2","efficientnet_b2","efficientnet_b3","efficientnet_b4","efficientnet_b5","efficientnet_b6","efficientnet_b7","efficientnet_v2_l","efficientnet_v2_m","efficientnet_v2_s","googlenet","googlenet_quantized_fbgemm_v1","inception_v3","inception_v3_fbgemm_v1","mnasnet0_5","mnasnet0_75","mnasnet1_0","mnasnet1_3","mobilenet_v2_quantized_qnnpack_v1","mobilenet_v2_v1","mobilenet_v2_v2","mobilenet_v3_large_quantized_qnnpack_v1","mobilenet_v3_large_v1","mobilenet_v3_large_v2","mobilenet_v3_small","regnet_x_16gf_v1","regnet_x_16gf_v2","regnet_x_1_6gf_v1","regnet_x_1_6gf_v2","regnet_x_32gf_v1","regnet_x_32gf_v2","regnet_x_3_2gf_v1","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_x_400mf_v2","regnet_x_800mf_v1","regnet_x_800mf_v2","regnet_x_8gf_v1","regnet_x_8gf_v2","regnet_y_128gf_swag_e2e_v1","regnet_y_128gf_swag_linear_v1","regnet_y_16gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","regnet_y_16gf_v1","regnet_y_16gf_v2","regnet_y_1_6gf_v1","regnet_y_1_6gf_v2","regnet_y_32gf_swag_e2e_v1","regnet_y_32gf_swag_linear_v1","regnet_y_32gf_v1","regnet_y_32gf_v2","regnet_y_3_2gf_v1","regnet_y_3_2gf_v2","regnet_y_400mf_v1","regnet_y_400mf_v2","regnet_y_8gf_v1","regnet_y_8gf_v2","resnet152_v1","resnet152_v2","resnet18","resnet18_quantized_fbgemm_v1","resnet34","resnet50_quantized_fbgemm_v1","resnet50_quantized_fbgemm_v2","resnet50_v1","resnet50_v2","resnext101_32x8d_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","resnext101_32x8d_v1","resnext101_32x8d_v2","resnext101_64x4d_quantized_fbgemm_v1","resnext101_64x4d_v1","resnext50_32x4d_v1","resnext50_32x4d_v2","shufflenet_v2_x0_5","shufflenet_v2_x0_5_quantized_fbgemm_v1","shufflenet_v2_x1_0","shufflenet_v2_x1_0_quantized_fbgemm_v1","shufflenet_v2_x1_5","shufflenet_v2_x1_5_quantized_fbgemm_v1","shufflenet_v2_x2_0","shufflenet_v2_x2_0_quantized_fbgemm_v1","squeezenet1_0","squeezenet1_1","swin_b","swin_s","swin_t","vgg11","vgg11_bn","vgg13","vgg13_bn","vgg16_bn","vgg16_v1","vgg19","vgg19_bn","vit_b_16_swag_e2e_v1","vit_b_16_swag_linear_v1","vit_b_16_v1","vit_b_32","vit_h_14_swag_e2e_v1","vit_h_14_swag_linear_v1","vit_l_16_swag_e2e_v1","vit_l_16_swag_linear_v1","vit_l_16_v1","vit_l_32","wide_resnet101_2_v1","wide_resnet101_2_v2"],defaultModel:"alexnet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1},{in:"formData",type:"integer",name:"top_k",required:!1}]},{url:"/image/text/ocr/",inputType:"image",outputType:"text",taskName:"ocr",models:["easy-ocr","tesseract-default","tesseract-denoising"],defaultModel:"tesseract-denoising",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1},{in:"formData",type:"string",name:"source_language",required:!1}]},{url:"/text/image/image-generation/",inputType:"text",outputType:"image",taskName:"image-generation",models:["dream-studio","stable-diffusion"],defaultModel:"stable-diffusion",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"string",name:"prompt",required:!0},{in:"formData",type:"integer",name:"samples",required:!1},{in:"formData",type:"integer",name:"steps",required:!1},{in:"formData",type:"integer",name:"seed",required:!1}]},{url:"/text/text/ad-generation/",inputType:"text",outputType:"text",taskName:"ad-generation",models:["gpt-j"],defaultModel:"gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"array",name:"keywords",required:!1}]},{url:"/text/text/article-generation/",inputType:"text",outputType:"text",taskName:"article-generation",models:["fast-gpt-j"],defaultModel:"fast-gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"title",required:!1}]},{url:"/text/text/autocorrect/",inputType:"text",outputType:"text",taskName:"autocorrect",models:["flexudy-t5-base-multi-sentence-doctor"],defaultModel:"flexudy-t5-base-multi-sentence-doctor",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence",required:!0}]},{url:"/text/text/emotion-recognition/",inputType:"text",outputType:"text",taskName:"emotion-recognition",models:["mrm8488-t5-base-finetuned-emotion"],defaultModel:"mrm8488-t5-base-finetuned-emotion",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/hate-speech-detection/",inputType:"text",outputType:"text",taskName:"hate-speech-detection",models:["Hate-speech-CNERG-dehatebert-mono-english"],defaultModel:"Hate-speech-CNERG-dehatebert-mono-english",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/intent-classification/",inputType:"text",outputType:"text",taskName:"intent-classification",models:["fast-gpt-j"],defaultModel:"fast-gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}]},{url:"/text/text/keyword-extraction/",inputType:"text",outputType:"text",taskName:"keyword-extraction",models:["keybert-paraphrase-MiniLM-L6-v2","keybert-paraphrase-multilingual-MiniLM-L12-v2"],defaultModel:"keybert-paraphrase-MiniLM-L6-v2",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/language-detection/",inputType:"text",outputType:"text",taskName:"language-detection",models:["toftrup-etal-2021","xlm-roberta-base-language-detection"],defaultModel:"xlm-roberta-base-language-detection",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/language-generation/",inputType:"text",outputType:"text",taskName:"language-generation",models:["EleutherAI-gpt-neo-2_7B"],defaultModel:"bloom-560m",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/named-entity-recognition/",inputType:"text",outputType:"text",taskName:"named-entity-recognition",models:["dbmdz-bert-large-cased-finetuned-conll03-english"],defaultModel:"dbmdz-bert-large-cased-finetuned-conll03-english",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"array"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/next-sentence-prediction/",inputType:"text",outputType:"text",taskName:"next-sentence-prediction",models:["bert-base-uncased"],defaultModel:"bert-base-uncased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"number"},params:[{in:"formData",type:"string",name:"sentence_1",required:!0},{in:"formData",type:"string",name:"sentence_2",required:!0}]},{url:"/text/text/next-word-prediction/",inputType:"text",outputType:"text",taskName:"next-word-prediction",models:["albert-base-v2","bert-base-uncased","distilbert-base-uncased","roberta-base"],defaultModel:"distilbert-base-uncased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence",required:!0}]},{url:"/text/text/plural/",inputType:"text",outputType:"text",taskName:"plural",models:["inflect"],defaultModel:"inflect",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"word",required:!0},{in:"formData",type:"integer",name:"count",required:!1}]},{url:"/text/text/programming-language-generation/",inputType:"text",outputType:"text",taskName:"programming-language-generation",models:["sentdex-GPyT"],defaultModel:"sentdex-GPyT",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"code_snippet",required:!0}]},{url:"/text/text/question-answering/",inputType:"text",outputType:"text",taskName:"question-answering",models:["deepset-roberta-base-squad2","deepset_bert-base-cased-squad2","distilbert-base-cased-distilled-squad","mfeb-albert-xxlarge-v2-squad2","mrm8488-bert-tiny-5-finetuned-squadv2"],defaultModel:"deepset_bert-base-cased-squad2",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"context",required:!0},{in:"formData",type:"string",name:"question",required:!0}]},{url:"/text/text/sentence-paraphraser/",inputType:"text",outputType:"text",taskName:"sentence-paraphraser",models:["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality"],defaultModel:"ramsrigouthamg-t5-large-paraphraser-diverse-high-quality",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"context",required:!0}]},{url:"/text/text/sentiment-analysis/",inputType:"text",outputType:"text",taskName:"sentiment-analysis",models:["distilbert-base-uncased","distilbert-base-uncased-finetuned-sst-2-english","nlptown-bert-base-multilingual-uncased-sentiment","zero-shot-classification-facebook-bart-large-mnli"],defaultModel:"nlptown-bert-base-multilingual-uncased-sentiment",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}]},{url:"/text/text/similarity/",inputType:"text",outputType:"text",taskName:"similarity",models:["all-MiniLM-L6-v2"],defaultModel:"all-MiniLM-L6-v2",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"number"},params:[{in:"formData",type:"string",name:"sentence_1",required:!0},{in:"formData",type:"string",name:"sentence_2",required:!0}]},{url:"/text/text/summarization/",inputType:"text",outputType:"text",taskName:"summarization",models:["bart-large-cnn"],defaultModel:"bart-large-cnn",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}]},{url:"/text/text/translation/",inputType:"text",outputType:"text",taskName:"translation",models:["nllb-200-3-3b"],defaultModel:"nllb-200-3-3b",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1},{in:"formData",type:"string",name:"source",required:!1},{in:"formData",type:"string",name:"target",required:!1}]},{url:"/text/text/word-alignment/",inputType:"text",outputType:"text",taskName:"word-alignment",models:["bert-base-multilingual-cased"],defaultModel:"bert-base-multilingual-cased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"array"},params:[{in:"formData",type:"string",name:"input_string_language_1",required:!0},{in:"formData",type:"string",name:"input_string_language_2",required:!0}]}]},3109:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getContentTypeName=void 0,t.getContentTypeName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),r=e.taskName.replace(/-/g,"_").toUpperCase();return"".concat(t,"_").concat(n,"_").concat(r,"_CONTENT_TYPE")}},7896:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getEndpointsByInputOutput=t.getEndpoints=void 0;var r=n(5485);function o(){return r.ENDPOINT_DEFS}t.getEndpoints=o,t.getEndpointsByInputOutput=function(){for(var e={},t=0,n=o();t<n.length;t++){var r=n[t];r.inputType in e||(e[r.inputType]={}),r.outputType in e[r.inputType]||(e[r.inputType][r.outputType]=[]),e[r.inputType][r.outputType].push(r)}return e}},1916:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInputModelType=void 0;var r=n(4044);t.getInputModelType=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Inputs")}},7897:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMethodName=void 0;var r=n(4044);t.getMethodName=function(e){return(0,r.kebabToCamelCase)(e.taskName)}},555:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelTypeName=void 0;var r=n(4044);t.getModelTypeName=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Model")}},797:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelValuesName=void 0;var r=n(4044);t.getModelValuesName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),o=(0,r.kebabToSnakeCase)(e.taskName).toUpperCase();return"".concat(t,"_").concat(n,"_").concat(o,"_MODELS")}},7179:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelType=void 0;var r=n(4044);t.getOutputModelType=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Outputs")}},2168:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelType=t.getInputModelType=t.getModelValuesName=t.getModelTypeName=t.getMethodName=t.getContentTypeName=t.getEndpointsByInputOutput=t.getEndpoints=void 0;var r=n(7896);Object.defineProperty(t,"getEndpoints",{enumerable:!0,get:function(){return r.getEndpoints}}),Object.defineProperty(t,"getEndpointsByInputOutput",{enumerable:!0,get:function(){return r.getEndpointsByInputOutput}});var o=n(3109);Object.defineProperty(t,"getContentTypeName",{enumerable:!0,get:function(){return o.getContentTypeName}});var i=n(7897);Object.defineProperty(t,"getMethodName",{enumerable:!0,get:function(){return i.getMethodName}});var a=n(555);Object.defineProperty(t,"getModelTypeName",{enumerable:!0,get:function(){return a.getModelTypeName}});var s=n(797);Object.defineProperty(t,"getModelValuesName",{enumerable:!0,get:function(){return s.getModelValuesName}});var u=n(1916);Object.defineProperty(t,"getInputModelType",{enumerable:!0,get:function(){return u.getInputModelType}});var p=n(7179);Object.defineProperty(t,"getOutputModelType",{enumerable:!0,get:function(){return p.getOutputModelType}})},3413:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SDK_VERSION=void 0,t.SDK_VERSION="0.2.0"},4044:function(e,t){"use strict";var n=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))};function r(e){return e[0].toUpperCase()+e.substring(1)}Object.defineProperty(t,"__esModule",{value:!0}),t.kebabToCamelCase=t.kebabToSnakeCase=t.kebabToPascalCase=t.uncapitalizeFirst=t.capitalizeFirst=void 0,t.capitalizeFirst=r,t.uncapitalizeFirst=function(e){return e[0].toLowerCase()+e.substring(1)},t.kebabToPascalCase=function(e){return e.split("-").map((function(e){return r(e)})).join("")},t.kebabToSnakeCase=function(e){return e.replace(/-/g,"_")},t.kebabToCamelCase=function(e){var t=e.split("-");return n([t.shift()],t.map((function(e){return r(e)})),!0).join("")}},8778:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE=t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE=t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_PLURAL_CONTENT_TYPE=t.TEXT_TEXT_PLURAL_MODELS=t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE=t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=t.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE=t.TEXT_TEXT_INTENT_CLASSIFICATION_MODELS=t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE=t.TEXT_TEXT_AUTOCORRECT_MODELS=t.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_ARTICLE_GENERATION_MODELS=t.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_AD_GENERATION_MODELS=t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE=t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=t.IMAGE_TEXT_OCR_CONTENT_TYPE=t.IMAGE_TEXT_OCR_MODELS=t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE=t.IMAGE_TEXT_CLASSIFICATION_MODELS=t.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE=t.IMAGE_TEXT_ASCIIFY_MODELS=t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE=t.IMAGE_IMAGE_FACE_BLURING_MODELS=t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_COLORIZATION_MODELS=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=void 0,t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE=t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=t.TEXT_TEXT_TRANSLATION_CONTENT_TYPE=t.TEXT_TEXT_TRANSLATION_MODELS=t.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE=t.TEXT_TEXT_SUMMARIZATION_MODELS=t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE=t.TEXT_TEXT_SIMILARITY_MODELS=t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE=t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=void 0,t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=["coqui_english_huge_vocab"],t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=["mobilenet","xception"],t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_COLORIZATION_MODELS=["deoldify-artistic","deoldify-stable"],t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_FACE_BLURING_MODELS=["ageitgey"],t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=["v1"],t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_ASCIIFY_MODELS=["ramesh-aditya"],t.IMAGE_TEXT_ASCIIFY_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_CLASSIFICATION_MODELS=["alexnet","convnext_base","convnext_large","convnext_small","convnext_tiny","densenet121","densenet161","densenet169","densenet201","efficientnet_b0","efficientnet_b1_v1","efficientnet_b1_v2","efficientnet_b2","efficientnet_b3","efficientnet_b4","efficientnet_b5","efficientnet_b6","efficientnet_b7","efficientnet_v2_l","efficientnet_v2_m","efficientnet_v2_s","googlenet","googlenet_quantized_fbgemm_v1","inception_v3","inception_v3_fbgemm_v1","mnasnet0_5","mnasnet0_75","mnasnet1_0","mnasnet1_3","mobilenet_v2_quantized_qnnpack_v1","mobilenet_v2_v1","mobilenet_v2_v2","mobilenet_v3_large_quantized_qnnpack_v1","mobilenet_v3_large_v1","mobilenet_v3_large_v2","mobilenet_v3_small","regnet_x_16gf_v1","regnet_x_16gf_v2","regnet_x_1_6gf_v1","regnet_x_1_6gf_v2","regnet_x_32gf_v1","regnet_x_32gf_v2","regnet_x_3_2gf_v1","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_x_400mf_v2","regnet_x_800mf_v1","regnet_x_800mf_v2","regnet_x_8gf_v1","regnet_x_8gf_v2","regnet_y_128gf_swag_e2e_v1","regnet_y_128gf_swag_linear_v1","regnet_y_16gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","regnet_y_16gf_v1","regnet_y_16gf_v2","regnet_y_1_6gf_v1","regnet_y_1_6gf_v2","regnet_y_32gf_swag_e2e_v1","regnet_y_32gf_swag_linear_v1","regnet_y_32gf_v1","regnet_y_32gf_v2","regnet_y_3_2gf_v1","regnet_y_3_2gf_v2","regnet_y_400mf_v1","regnet_y_400mf_v2","regnet_y_8gf_v1","regnet_y_8gf_v2","resnet152_v1","resnet152_v2","resnet18","resnet18_quantized_fbgemm_v1","resnet34","resnet50_quantized_fbgemm_v1","resnet50_quantized_fbgemm_v2","resnet50_v1","resnet50_v2","resnext101_32x8d_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","resnext101_32x8d_v1","resnext101_32x8d_v2","resnext101_64x4d_quantized_fbgemm_v1","resnext101_64x4d_v1","resnext50_32x4d_v1","resnext50_32x4d_v2","shufflenet_v2_x0_5","shufflenet_v2_x0_5_quantized_fbgemm_v1","shufflenet_v2_x1_0","shufflenet_v2_x1_0_quantized_fbgemm_v1","shufflenet_v2_x1_5","shufflenet_v2_x1_5_quantized_fbgemm_v1","shufflenet_v2_x2_0","shufflenet_v2_x2_0_quantized_fbgemm_v1","squeezenet1_0","squeezenet1_1","swin_b","swin_s","swin_t","vgg11","vgg11_bn","vgg13","vgg13_bn","vgg16_bn","vgg16_v1","vgg19","vgg19_bn","vit_b_16_swag_e2e_v1","vit_b_16_swag_linear_v1","vit_b_16_v1","vit_b_32","vit_h_14_swag_e2e_v1","vit_h_14_swag_linear_v1","vit_l_16_swag_e2e_v1","vit_l_16_swag_linear_v1","vit_l_16_v1","vit_l_32","wide_resnet101_2_v1","wide_resnet101_2_v2"],t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_OCR_MODELS=["easy-ocr","tesseract-default","tesseract-denoising"],t.IMAGE_TEXT_OCR_CONTENT_TYPE="multipart/form-data",t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=["dream-studio","stable-diffusion"],t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AD_GENERATION_MODELS=["gpt-j"],t.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_ARTICLE_GENERATION_MODELS=["fast-gpt-j"],t.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AUTOCORRECT_MODELS=["flexudy-t5-base-multi-sentence-doctor"],t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=["mrm8488-t5-base-finetuned-emotion"],t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=["Hate-speech-CNERG-dehatebert-mono-english"],t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_INTENT_CLASSIFICATION_MODELS=["fast-gpt-j"],t.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=["keybert-paraphrase-MiniLM-L6-v2","keybert-paraphrase-multilingual-MiniLM-L12-v2"],t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=["toftrup-etal-2021","xlm-roberta-base-language-detection"],t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=["EleutherAI-gpt-neo-2_7B"],t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=["dbmdz-bert-large-cased-finetuned-conll03-english"],t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=["bert-base-uncased"],t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=["albert-base-v2","bert-base-uncased","distilbert-base-uncased","roberta-base"],t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PLURAL_MODELS=["inflect"],t.TEXT_TEXT_PLURAL_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=["sentdex-GPyT"],t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=["deepset-roberta-base-squad2","deepset_bert-base-cased-squad2","distilbert-base-cased-distilled-squad","mfeb-albert-xxlarge-v2-squad2","mrm8488-bert-tiny-5-finetuned-squadv2"],t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality"],t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=["distilbert-base-uncased","distilbert-base-uncased-finetuned-sst-2-english","nlptown-bert-base-multilingual-uncased-sentiment","zero-shot-classification-facebook-bart-large-mnli"],t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SIMILARITY_MODELS=["all-MiniLM-L6-v2"],t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SUMMARIZATION_MODELS=["bart-large-cnn"],t.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_TRANSLATION_MODELS=["nllb-200-3-3b"],t.TEXT_TEXT_TRANSLATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=["bert-base-multilingual-cased"],t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE="application/x-www-form-urlencoded"},6117:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNotDefined=t.isDefined=void 0,t.isDefined=function(e){return null!=e},t.isNotDefined=function(e){return null==e}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r=n(3465);return r.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixJQUFJQyxFQUFTOHFCLEVBQXlCRSxHQUFZLENBR2pEanJCLFFBQVMsQ0FBQyxHQU9YLE9BSEFtckIsRUFBb0JGLEdBQVUxbkIsS0FBS3RELEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNnckIsR0FHcEUvcUIsRUFBT0QsT0FDZixDQ3JCQWdyQixFQUFvQm5SLEVBQUs1WixJQUN4QixJQUFJbXJCLEVBQVNuckIsR0FBVUEsRUFBTzRpQixXQUM3QixJQUFPNWlCLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBK3FCLEVBQW9CeEosRUFBRTRKLEVBQVEsQ0FBRTFTLEVBQUcwUyxJQUM1QkEsQ0FBTSxFQ0xkSixFQUFvQnhKLEVBQUksQ0FBQ3hoQixFQUFTcXJCLEtBQ2pDLElBQUksSUFBSWxqQixLQUFPa2pCLEVBQ1hMLEVBQW9CeEksRUFBRTZJLEVBQVlsakIsS0FBUzZpQixFQUFvQnhJLEVBQUV4aUIsRUFBU21JLElBQzVFL0UsT0FBT3dLLGVBQWU1TixFQUFTbUksRUFBSyxDQUFFNmEsWUFBWSxFQUFNQyxJQUFLb0ksRUFBV2xqQixJQUUxRSxFQ05ENmlCLEVBQW9CeEksRUFBSSxDQUFDdlUsRUFBSzBCLElBQVV2TSxPQUFPQyxVQUFVMlUsZUFBZXpVLEtBQUswSyxFQUFLMEIsR0NDbEZxYixFQUFvQk0sRUFBS3RyQixJQUNILG9CQUFYNGtCLFFBQTBCQSxPQUFPMkcsYUFDMUNub0IsT0FBT3dLLGVBQWU1TixFQUFTNGtCLE9BQU8yRyxZQUFhLENBQUUxa0IsTUFBTyxXQUU3RHpELE9BQU93SyxlQUFlNU4sRUFBUyxhQUFjLENBQUU2RyxPQUFPLEdBQU8sRUNGOUQsSUFBSTJrQixFQUFzQlIsRUFBb0IsTSIsInNvdXJjZXMiOlsid2VicGFjazovL2dsYWRpYWlvX3Nkay93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vbm9kZV9tb2R1bGVzL0B2ZXNwYWlhY2gvYXhpb3MtZmV0Y2gtYWRhcHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9udWxsLmpzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vc3JjL2NsaWVudC9mcm9tLWF1ZGlvLXRvLXRleHQudHMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vc3JjL2NsaWVudC9mcm9tLWF1ZGlvLnRzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL3NyYy9jbGllbnQvZnJvbS1pbWFnZS10by1pbWFnZS50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvY2xpZW50L2Zyb20taW1hZ2UtdG8tdGV4dC50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvY2xpZW50L2Zyb20taW1hZ2UudHMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vc3JjL2NsaWVudC9mcm9tLXRleHQtdG8taW1hZ2UudHMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vc3JjL2NsaWVudC9mcm9tLXRleHQtdG8tdGV4dC50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvY2xpZW50L2Zyb20tdGV4dC50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvY2xpZW50L3Nob3J0Y3V0cy50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvZ2xhZGlhLWNsaWVudC50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vc3JjL2ludGVybmFsL2F4aW9zLWZldGNoLWFkYXB0ZXIudHMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vc3JjL2ludGVybmFsL2h0dHAtY2xpZW50LnRzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL3NyYy9pbnRlcm5hbC9zZWFyY2gtcXVlcnktcGFyYW0tc2VyaWFsaXplci50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvaW50ZXJuYWwvdXJsLWZvcm0tZGF0YS50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvbWV0YS9lbmRwb2ludC1kZWZzLnRzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL3NyYy9tZXRhL2dldC1jb250ZW50LXR5cGUtbmFtZS50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvbWV0YS9nZXQtZW5kcG9pbnRzLnRzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL3NyYy9tZXRhL2dldC1pbnB1dC1tb2RlbC10eXBlLnRzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL3NyYy9tZXRhL2dldC1tZXRob2QtbmFtZS50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvbWV0YS9nZXQtbW9kZWwtdHlwZS1uYW1lLnRzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay8uL3NyYy9tZXRhL2dldC1tb2RlbC12YWx1ZXMtbmFtZS50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvbWV0YS9nZXQtb3V0cHV0LW1vZGVsLXR5cGUudHMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vc3JjL21ldGEvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vc3JjL21ldGEvc2RrLXZlcnNpb24udHMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vc3JjL21ldGEvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrLy4vc3JjL21vZGVscy50cyIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvLi9zcmMvdXRpbHMvZnAudHMiLCJ3ZWJwYWNrOi8vZ2xhZGlhaW9fc2RrL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9nbGFkaWFpb19zZGsvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2dsYWRpYWlvX3Nkay93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2dsYWRpYWlvX3Nkay93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJnbGFkaWFpb19zZGtcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiZ2xhZGlhaW9fc2RrXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImdsYWRpYWlvX3Nka1wiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsICgpID0+IHtcbnJldHVybiAiLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHNldHRsZSBmcm9tICdheGlvcy9saWIvY29yZS9zZXR0bGUnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJ2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJ2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGgnO1xuaW1wb3J0IHsgaXNVbmRlZmluZWQgfSBmcm9tICdheGlvcy9saWIvdXRpbHMnO1xuXG4vKipcbiAqIC0gQ3JlYXRlIGEgcmVxdWVzdCBvYmplY3RcbiAqIC0gR2V0IHJlc3BvbnNlIGJvZHlcbiAqIC0gQ2hlY2sgaWYgdGltZW91dFxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBmZXRjaEFkYXB0ZXIoY29uZmlnKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3QoY29uZmlnKTtcbiAgICBjb25zdCBwcm9taXNlQ2hhaW4gPSBbZ2V0UmVzcG9uc2UocmVxdWVzdCwgY29uZmlnKV07XG5cbiAgICBpZiAoY29uZmlnLnRpbWVvdXQgJiYgY29uZmlnLnRpbWVvdXQgPiAwKSB7XG4gICAgICAgIHByb21pc2VDaGFpbi5wdXNoKFxuICAgICAgICAgICAgbmV3IFByb21pc2UoKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgICAgICAgICAgICAgICAgcmVzKGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcbiAgICAgICAgICAgICAgICB9LCBjb25maWcudGltZW91dCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBQcm9taXNlLnJhY2UocHJvbWlzZUNoYWluKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZWplY3QoZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoY29uZmlnLnNldHRsZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbiAgICAgICAgICAgICAgICA/IGNvbmZpZy5zZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkYXRhKVxuICAgICAgICAgICAgICAgIDogc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuXG4vKipcbiAqIEZldGNoIEFQSSBzdGFnZSB0d28gaXMgdG8gZ2V0IHJlc3BvbnNlIGJvZHkuIFRoaXMgZnVudGlvbiB0cmllcyB0byByZXRyaWV2ZVxuICogcmVzcG9uc2UgYm9keSBiYXNlZCBvbiByZXNwb25zZSdzIHR5cGVcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0UmVzcG9uc2UocmVxdWVzdCwgY29uZmlnKSB7XG4gICAgbGV0IHN0YWdlT25lO1xuICAgIHRyeSB7XG4gICAgICAgIHN0YWdlT25lID0gYXdhaXQgZmV0Y2gocmVxdWVzdCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsICdFUlJfTkVUV09SSycsIHJlcXVlc3QpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBvazogc3RhZ2VPbmUub2ssXG4gICAgICAgIHN0YXR1czogc3RhZ2VPbmUuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiBzdGFnZU9uZS5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyhzdGFnZU9uZS5oZWFkZXJzKSwgLy8gTWFrZSBhIGNvcHkgb2YgaGVhZGVyc1xuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCxcbiAgICB9O1xuXG4gICAgaWYgKHN0YWdlT25lLnN0YXR1cyA+PSAyMDAgJiYgc3RhZ2VPbmUuc3RhdHVzICE9PSAyMDQpIHtcbiAgICAgICAgc3dpdGNoIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdhcnJheWJ1ZmZlcic6XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IGF3YWl0IHN0YWdlT25lLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdibG9iJzpcbiAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhID0gYXdhaXQgc3RhZ2VPbmUuYmxvYigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnanNvbic6XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IGF3YWl0IHN0YWdlT25lLmpzb24oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Zvcm1EYXRhJzpcbiAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhID0gYXdhaXQgc3RhZ2VPbmUuZm9ybURhdGEoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IGF3YWl0IHN0YWdlT25lLnRleHQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgY3JlYXRlIGEgUmVxdWVzdCBvYmplY3QgYmFzZWQgb24gY29uZmlndXJhdGlvbidzIGF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3QoY29uZmlnKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKGNvbmZpZy5oZWFkZXJzKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgICAgY29uc3QgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgICAgY29uc3QgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IGRlY29kZVVSSShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgICBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsIGBCYXNpYyAke2J0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCl9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgbWV0aG9kID0gY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgIG1ldGhvZCxcbiAgICB9O1xuICAgIGlmIChtZXRob2QgIT09ICdHRVQnICYmIG1ldGhvZCAhPT0gJ0hFQUQnKSB7XG4gICAgICAgIG9wdGlvbnMuYm9keSA9IGNvbmZpZy5kYXRhO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLm1vZGUpIHtcbiAgICAgICAgb3B0aW9ucy5tb2RlID0gY29uZmlnLm1vZGU7XG4gICAgfVxuICAgIGlmIChjb25maWcuY2FjaGUpIHtcbiAgICAgICAgb3B0aW9ucy5jYWNoZSA9IGNvbmZpZy5jYWNoZTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5pbnRlZ3JpdHkpIHtcbiAgICAgICAgb3B0aW9ucy5pbnRlZ3JpdHkgPSBjb25maWcuaW50ZWdyaXR5O1xuICAgIH1cbiAgICBpZiAoY29uZmlnLnJlZGlyZWN0KSB7XG4gICAgICAgIG9wdGlvbnMucmVkaXJlY3QgPSBjb25maWcucmVkaXJlY3Q7XG4gICAgfVxuICAgIGlmIChjb25maWcucmVmZXJyZXIpIHtcbiAgICAgICAgb3B0aW9ucy5yZWZlcnJlciA9IGNvbmZpZy5yZWZlcnJlcjtcbiAgICB9XG4gICAgLy8gVGhpcyBjb25maWcgaXMgc2ltaWxhciB0byBYSFLigJlzIHdpdGhDcmVkZW50aWFscyBmbGFnLCBidXQgd2l0aCB0aHJlZSBhdmFpbGFibGUgdmFsdWVzIGluc3RlYWQgb2YgdHdvLlxuICAgIC8vIFNvIGlmIHdpdGhDcmVkZW50aWFscyBpcyBub3Qgc2V0LCBkZWZhdWx0IHZhbHVlICdzYW1lLW9yaWdpbicgd2lsbCBiZSB1c2VkXG4gICAgaWYgKCFpc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgICBvcHRpb25zLmNyZWRlbnRpYWxzID0gY29uZmlnLndpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdvbWl0JztcbiAgICB9XG5cbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIGNvbnN0IHVybCA9IGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG5cbiAgICAvLyBFeHBlY3RlZCBicm93c2VyIHRvIHRocm93IGVycm9yIGlmIHRoZXJlIGlzIGFueSB3cm9uZyBjb25maWd1cmF0aW9uIHZhbHVlXG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHVybCwgb3B0aW9ucyk7XG59XG5cblxuXG4vKipcbiAqIE5vdGU6XG4gKiBcbiAqICAgRnJvbSB2ZXJzaW9uID49IDAuMjcuMCwgY3JlYXRlRXJyb3IgZnVuY3Rpb24gaXMgcmVwbGFjZWQgYnkgQXhpb3NFcnJvciBjbGFzcy5cbiAqICAgU28gSSBjb3B5IHRoZSBvbGQgY3JlYXRlRXJyb3IgZnVuY3Rpb24gaGVyZSBmb3IgYmFja3dhcmQgY29tcGF0aWJsZS5cbiAqIFxuICogXG4gKiBcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICAgIGlmIChheGlvcy5BeGlvc0Vycm9yICYmIHR5cGVvZiBheGlvcy5BeGlvc0Vycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgYXhpb3MuQXhpb3NFcnJvcihtZXNzYWdlLCBheGlvcy5BeGlvc0Vycm9yW2NvZGVdLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuXG4vKipcbiAqIFxuICogTm90ZTpcbiAqIFxuICogICBUaGlzIGZ1bmN0aW9uIGlzIGZvciBiYWNrd2FyZCBjb21wYXRpYmxlLlxuICogXG4gKiAgXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5mdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbCcpO1xudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciBDYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3InKTtcbnZhciBwYXJzZVByb3RvY29sID0gcmVxdWlyZSgnLi4vaGVscGVycy9wYXJzZVByb3RvY29sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB2YXIgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkgJiYgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8ICByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgKGNhbmNlbCAmJiBjYW5jZWwudHlwZSkgPyBuZXcgQ2FuY2VsZWRFcnJvcigpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKGZ1bGxQYXRoKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBbICdodHRwJywgJ2h0dHBzJywgJ2ZpbGUnIF0uaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvcicpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuYXhpb3MuVkVSU0lPTiA9IHJlcXVpcmUoJy4vZW52L2RhdGEnKS52ZXJzaW9uO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHJlcXVpcmUoJy4vaGVscGVycy90b0Zvcm1EYXRhJyk7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vbGliL2NvcmUvQXhpb3NFcnJvcicpO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuL0NhbmNlbGVkRXJyb3InKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuXG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgdmFyIGk7XG4gICAgdmFyIGwgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICB9XG4gICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuID0gZnVuY3Rpb24ob25mdWxmaWxsZWQpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsZWRFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuL2J1aWxkRnVsbFBhdGgnKTtcbnZhciB2YWxpZGF0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3ZhbGlkYXRvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsO1xuXG4gIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gIHZhciByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB2YXIgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciBwcm9taXNlO1xuXG4gIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcblxuICAgIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgY2hhaW4gPSBjaGFpbi5jb25jYXQocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcblxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cblxuICB2YXIgbmV3Q29uZmlnID0gY29uZmlnO1xuICB3aGlsZSAocmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgdmFyIG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB2YXIgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdHJ5IHtcbiAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG9uUmVqZWN0ZWQoZXJyb3IpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0KG5ld0NvbmZpZyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxuXG4gIHdoaWxlIChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfSkpO1xuICAgIH07XG4gIH1cblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCgpO1xuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2QgKyAnRm9ybSddID0gZ2VuZXJhdGVIVFRQTWV0aG9kKHRydWUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH1cbn0pO1xuXG52YXIgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG52YXIgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goZnVuY3Rpb24oY29kZSkge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gZnVuY3Rpb24oZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSB7XG4gIHZhciBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBDYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3InKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcigpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtZXJnZU1hcCA9IHtcbiAgICAndXJsJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnbWV0aG9kJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnZGF0YSc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2Jhc2VVUkwnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXF1ZXN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVzcG9uc2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdwYXJhbXNTZXJpYWxpemVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXRNZXNzYWdlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnd2l0aENyZWRlbnRpYWxzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYWRhcHRlcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlVHlwZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZDb29raWVOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkhlYWRlck5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvblVwbG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25Eb3dubG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnZGVjb21wcmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhCb2R5TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYmVmb3JlUmVkaXJlY3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc3BvcnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwc0FnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnY2FuY2VsVG9rZW4nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdzb2NrZXRQYXRoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VFbmNvZGluZyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJzogbWVyZ2VEaXJlY3RLZXlzXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIHZhciBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgdmFyIGNvbmZpZ1ZhbHVlID0gbWVyZ2UocHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuL0F4aW9zRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgdmFyIGNvbnRleHQgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbnRleHQsIGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4vdHJhbnNpdGlvbmFsJyk7XG52YXIgdG9Gb3JtRGF0YSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4uL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHZhciBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcbiAgICB2YXIgY29udGVudFR5cGUgPSBoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddO1xuXG4gICAgdmFyIGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCAoaXNPYmplY3RQYXlsb2FkICYmIGNvbnRlbnRUeXBlID09PSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScpKSB7XG4gICAgICB2YXIgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG4gICAgICByZXR1cm4gdG9Gb3JtRGF0YShpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLCBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIHZhciB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgdmFyIHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICB2YXIgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIHZhciBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHN0cmljdEpTT05QYXJzaW5nIHx8IChmb3JjZWRKU09OUGFyc2luZyAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiBkYXRhLmxlbmd0aCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHJlcXVpcmUoJy4vZW52L0Zvcm1EYXRhJylcbiAgfSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4yNy4yXCJcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzdHJpY3Rcbm1vZHVsZS5leHBvcnRzID0gbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgdmFyIG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyBGb3JtRGF0YSgpO1xuXG4gIHZhciBzdGFjayA9IFtdO1xuXG4gIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICcnO1xuXG4gICAgaWYgKHV0aWxzLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgPyBuZXcgQmxvYihbdmFsdWVdKSA6IEJ1ZmZlci5mcm9tKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZChkYXRhLCBwYXJlbnRLZXkpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChkYXRhKSB8fCB1dGlscy5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihkYXRhKSAhPT0gLTEpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGFyZW50S2V5KTtcbiAgICAgIH1cblxuICAgICAgc3RhY2sucHVzaChkYXRhKTtcblxuICAgICAgdXRpbHMuZm9yRWFjaChkYXRhLCBmdW5jdGlvbiBlYWNoKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICB2YXIgZnVsbEtleSA9IHBhcmVudEtleSA/IHBhcmVudEtleSArICcuJyArIGtleSA6IGtleTtcbiAgICAgICAgdmFyIGFycjtcblxuICAgICAgICBpZiAodmFsdWUgJiYgIXBhcmVudEtleSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ3t9JykpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh1dGlscy5lbmRzV2l0aChrZXksICdbXScpICYmIChhcnIgPSB1dGlscy50b0FycmF5KHZhbHVlKSkpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAhdXRpbHMuaXNVbmRlZmluZWQoZWwpICYmIGZvcm1EYXRhLmFwcGVuZChmdWxsS2V5LCBjb252ZXJ0VmFsdWUoZWwpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJ1aWxkKHZhbHVlLCBmdWxsS2V5KTtcbiAgICAgIH0pO1xuXG4gICAgICBzdGFjay5wb3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKHBhcmVudEtleSwgY29udmVydFZhbHVlKGRhdGEpKTtcbiAgICB9XG4gIH1cblxuICBidWlsZChvYmopO1xuXG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2Vudi9kYXRhJykudmVyc2lvbjtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlLCBpKSB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG52YXIgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvcHQsIG9wdHMpIHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIHZhciBvcHQgPSBrZXlzW2ldO1xuICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG52YXIga2luZE9mID0gKGZ1bmN0aW9uKGNhY2hlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih0aGluZykge1xuICAgIHZhciBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG4gIH07XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuZnVuY3Rpb24ga2luZE9mVGVzdCh0eXBlKSB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBmdW5jdGlvbiBpc0tpbmRPZih0aGluZykge1xuICAgIHJldHVybiBraW5kT2YodGhpbmcpID09PSB0eXBlO1xuICB9O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmIChraW5kT2YodmFsKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodGhpbmcpIHtcbiAgdmFyIHBhdHRlcm4gPSAnW29iamVjdCBGb3JtRGF0YV0nO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHxcbiAgICB0b1N0cmluZy5jYWxsKHRoaW5nKSA9PT0gcGF0dGVybiB8fFxuICAgIChpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSBwYXR0ZXJuKVxuICApO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnRyaW0gPyBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqL1xuXG5mdW5jdGlvbiBpbmhlcml0cyhjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmaWx0ZXJdXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIHRvRmxhdE9iamVjdChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlcikge1xuICB2YXIgcHJvcHM7XG4gIHZhciBpO1xuICB2YXIgcHJvcDtcbiAgdmFyIG1lcmdlZCA9IHt9O1xuXG4gIGRlc3RPYmogPSBkZXN0T2JqIHx8IHt9O1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn1cblxuLypcbiAqIGRldGVybWluZXMgd2hldGhlciBhIHN0cmluZyBlbmRzIHdpdGggdGhlIGNoYXJhY3RlcnMgb2YgYSBzcGVjaWZpZWQgc3RyaW5nXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIHZhciBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3RcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KHRoaW5nKSB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICB2YXIgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKGlzVW5kZWZpbmVkKGkpKSByZXR1cm4gbnVsbDtcbiAgdmFyIGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xudmFyIGlzVHlwZWRBcnJheSA9IChmdW5jdGlvbihUeXBlZEFycmF5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NLFxuICBpbmhlcml0czogaW5oZXJpdHMsXG4gIHRvRmxhdE9iamVjdDogdG9GbGF0T2JqZWN0LFxuICBraW5kT2Y6IGtpbmRPZixcbiAga2luZE9mVGVzdDoga2luZE9mVGVzdCxcbiAgZW5kc1dpdGg6IGVuZHNXaXRoLFxuICB0b0FycmF5OiB0b0FycmF5LFxuICBpc1R5cGVkQXJyYXk6IGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdDogaXNGaWxlTGlzdFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyogR2VuZXJhdGVkIGZpbGUgd2l0aCBcInNjcmlwdHMvZ2VuZXJhdGUtc2RrLnRzXCIgKi9cbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZyb21BdWRpb1RvVGV4dCA9IHZvaWQgMDtcbnZhciBtb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbHNcIik7XG52YXIgaHR0cF9jbGllbnRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9odHRwLWNsaWVudFwiKTtcbnZhciBmcF8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2ZwXCIpO1xudmFyIEZyb21BdWRpb1RvVGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGcm9tQXVkaW9Ub1RleHQocGFyYW1zKSB7XG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSAoMCwgaHR0cF9jbGllbnRfMS5nZXRIdHRwQ2xpZW50KSh0aGlzLnBhcmFtcyk7XG4gICAgfVxuICAgIEZyb21BdWRpb1RvVGV4dC5wcm90b3R5cGUuYXVkaW9UcmFuc2NyaXB0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy5hdWRpbykpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnYXVkaW8nLCBhcmdzLmF1ZGlvKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGZwXzEuaXNEZWZpbmVkKShhcmdzLmF1ZGlvX3VybCkpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnYXVkaW9fdXJsJywgYXJncy5hdWRpb191cmwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgZnBfMS5pc0RlZmluZWQpKGFyZ3MubGFuZ3VhZ2UpKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2xhbmd1YWdlJywgYXJncy5sYW5ndWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KHtcbiAgICAgICAgICAgIHVybDogJy9hdWRpby90ZXh0L2F1ZGlvLXRyYW5zY3JpcHRpb24vJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6IHRoaXMucGFyYW1zLnVzZUZldGNoID8gbW9kZWxzXzEuQVVESU9fVEVYVF9BVURJT19UUkFOU0NSSVBUSU9OX0NPTlRFTlRfVFlQRSA6IHVuZGVmaW5lZCB9LCAoKF9hID0gYXJncy5oZWFkZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpLFxuICAgICAgICAgICAgcXVlcnk6IF9fYXNzaWduKHt9LCAoYXJncy5tb2RlbCA/IHsgbW9kZWw6IGFyZ3MubW9kZWwgfSA6IHt9KSksXG4gICAgICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gRnJvbUF1ZGlvVG9UZXh0O1xufSgpKTtcbmV4cG9ydHMuRnJvbUF1ZGlvVG9UZXh0ID0gRnJvbUF1ZGlvVG9UZXh0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBHZW5lcmF0ZWQgZmlsZSB3aXRoIFwic2NyaXB0cy9nZW5lcmF0ZS1zZGsudHNcIiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Gcm9tQXVkaW8gPSB2b2lkIDA7XG52YXIgZnJvbV9hdWRpb190b190ZXh0XzEgPSByZXF1aXJlKFwiLi9mcm9tLWF1ZGlvLXRvLXRleHRcIik7XG52YXIgRnJvbUF1ZGlvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZyb21BdWRpbyhwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5mcm9tQXVkaW9Ub1RleHRJbnN0ID0gbmV3IGZyb21fYXVkaW9fdG9fdGV4dF8xLkZyb21BdWRpb1RvVGV4dChwYXJhbXMpO1xuICAgIH1cbiAgICBGcm9tQXVkaW8ucHJvdG90eXBlLnRvVGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUF1ZGlvVG9UZXh0SW5zdDtcbiAgICB9O1xuICAgIHJldHVybiBGcm9tQXVkaW87XG59KCkpO1xuZXhwb3J0cy5Gcm9tQXVkaW8gPSBGcm9tQXVkaW87XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qIEdlbmVyYXRlZCBmaWxlIHdpdGggXCJzY3JpcHRzL2dlbmVyYXRlLXNkay50c1wiICovXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Gcm9tSW1hZ2VUb0ltYWdlID0gdm9pZCAwO1xudmFyIG1vZGVsc18xID0gcmVxdWlyZShcIi4uL21vZGVsc1wiKTtcbnZhciBodHRwX2NsaWVudF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2h0dHAtY2xpZW50XCIpO1xudmFyIGZwXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvZnBcIik7XG52YXIgRnJvbUltYWdlVG9JbWFnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGcm9tSW1hZ2VUb0ltYWdlKHBhcmFtcykge1xuICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50ID0gKDAsIGh0dHBfY2xpZW50XzEuZ2V0SHR0cENsaWVudCkodGhpcy5wYXJhbXMpO1xuICAgIH1cbiAgICBGcm9tSW1hZ2VUb0ltYWdlLnByb3RvdHlwZS5iYWNrZ3JvdW5kUmVtb3ZhbCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgIGlmICgoMCwgZnBfMS5pc0RlZmluZWQpKGFyZ3MuaW1hZ2UpKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ltYWdlJywgYXJncy5pbWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy5pbWFnZV91cmwpKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ltYWdlX3VybCcsIGFyZ3MuaW1hZ2VfdXJsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Qoe1xuICAgICAgICAgICAgdXJsOiAnL2ltYWdlL2ltYWdlL2JhY2tncm91bmQtcmVtb3ZhbC8nLFxuICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogdGhpcy5wYXJhbXMudXNlRmV0Y2ggPyBtb2RlbHNfMS5JTUFHRV9JTUFHRV9CQUNLR1JPVU5EX1JFTU9WQUxfQ09OVEVOVF9UWVBFIDogdW5kZWZpbmVkIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZyb21JbWFnZVRvSW1hZ2UucHJvdG90eXBlLmNvbG9yaXphdGlvbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgIGlmICgoMCwgZnBfMS5pc0RlZmluZWQpKGFyZ3MuaW1hZ2UpKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ltYWdlJywgYXJncy5pbWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy5pbWFnZV91cmwpKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ltYWdlX3VybCcsIGFyZ3MuaW1hZ2VfdXJsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Qoe1xuICAgICAgICAgICAgdXJsOiAnL2ltYWdlL2ltYWdlL2NvbG9yaXphdGlvbi8nLFxuICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogdGhpcy5wYXJhbXMudXNlRmV0Y2ggPyBtb2RlbHNfMS5JTUFHRV9JTUFHRV9DT0xPUklaQVRJT05fQ09OVEVOVF9UWVBFIDogdW5kZWZpbmVkIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZyb21JbWFnZVRvSW1hZ2UucHJvdG90eXBlLmZhY2VCbHVyaW5nID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy5pbWFnZSkpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnaW1hZ2UnLCBhcmdzLmltYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGZwXzEuaXNEZWZpbmVkKShhcmdzLmltYWdlX3VybCkpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnaW1hZ2VfdXJsJywgYXJncy5pbWFnZV91cmwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdCh7XG4gICAgICAgICAgICB1cmw6ICcvaW1hZ2UvaW1hZ2UvZmFjZS1ibHVyaW5nLycsXG4gICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7ICdDb250ZW50LVR5cGUnOiB0aGlzLnBhcmFtcy51c2VGZXRjaCA/IG1vZGVsc18xLklNQUdFX0lNQUdFX0ZBQ0VfQkxVUklOR19DT05URU5UX1RZUEUgOiB1bmRlZmluZWQgfSwgKChfYSA9IGFyZ3MuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKSxcbiAgICAgICAgICAgIHF1ZXJ5OiBfX2Fzc2lnbih7fSwgKGFyZ3MubW9kZWwgPyB7IG1vZGVsOiBhcmdzLm1vZGVsIH0gOiB7fSkpLFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInLFxuICAgICAgICAgICAgYm9keTogZm9ybURhdGEsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRnJvbUltYWdlVG9JbWFnZS5wcm90b3R5cGUudW5jb2xvcml6YXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICBpZiAoKDAsIGZwXzEuaXNEZWZpbmVkKShhcmdzLmltYWdlKSkge1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdpbWFnZScsIGFyZ3MuaW1hZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgZnBfMS5pc0RlZmluZWQpKGFyZ3MuaW1hZ2VfdXJsKSkge1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdpbWFnZV91cmwnLCBhcmdzLmltYWdlX3VybCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KHtcbiAgICAgICAgICAgIHVybDogJy9pbWFnZS9pbWFnZS91bmNvbG9yaXphdGlvbi8nLFxuICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogdGhpcy5wYXJhbXMudXNlRmV0Y2ggPyBtb2RlbHNfMS5JTUFHRV9JTUFHRV9VTkNPTE9SSVpBVElPTl9DT05URU5UX1RZUEUgOiB1bmRlZmluZWQgfSwgKChfYSA9IGFyZ3MuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKSxcbiAgICAgICAgICAgIHF1ZXJ5OiBfX2Fzc2lnbih7fSwgKGFyZ3MubW9kZWwgPyB7IG1vZGVsOiBhcmdzLm1vZGVsIH0gOiB7fSkpLFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInLFxuICAgICAgICAgICAgYm9keTogZm9ybURhdGEsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEZyb21JbWFnZVRvSW1hZ2U7XG59KCkpO1xuZXhwb3J0cy5Gcm9tSW1hZ2VUb0ltYWdlID0gRnJvbUltYWdlVG9JbWFnZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyogR2VuZXJhdGVkIGZpbGUgd2l0aCBcInNjcmlwdHMvZ2VuZXJhdGUtc2RrLnRzXCIgKi9cbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZyb21JbWFnZVRvVGV4dCA9IHZvaWQgMDtcbnZhciBtb2RlbHNfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbHNcIik7XG52YXIgaHR0cF9jbGllbnRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9odHRwLWNsaWVudFwiKTtcbnZhciBmcF8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2ZwXCIpO1xudmFyIEZyb21JbWFnZVRvVGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGcm9tSW1hZ2VUb1RleHQocGFyYW1zKSB7XG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSAoMCwgaHR0cF9jbGllbnRfMS5nZXRIdHRwQ2xpZW50KSh0aGlzLnBhcmFtcyk7XG4gICAgfVxuICAgIEZyb21JbWFnZVRvVGV4dC5wcm90b3R5cGUuYXNjaWlmeSA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgIGlmICgoMCwgZnBfMS5pc0RlZmluZWQpKGFyZ3MuaW1hZ2UpKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ltYWdlJywgYXJncy5pbWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy5pbWFnZV91cmwpKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ltYWdlX3VybCcsIGFyZ3MuaW1hZ2VfdXJsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Qoe1xuICAgICAgICAgICAgdXJsOiAnL2ltYWdlL3RleHQvYXNjaWlmeS8nLFxuICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogdGhpcy5wYXJhbXMudXNlRmV0Y2ggPyBtb2RlbHNfMS5JTUFHRV9URVhUX0FTQ0lJRllfQ09OVEVOVF9UWVBFIDogdW5kZWZpbmVkIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZyb21JbWFnZVRvVGV4dC5wcm90b3R5cGUuY2xhc3NpZmljYXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICBpZiAoKDAsIGZwXzEuaXNEZWZpbmVkKShhcmdzLmltYWdlKSkge1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdpbWFnZScsIGFyZ3MuaW1hZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgZnBfMS5pc0RlZmluZWQpKGFyZ3MuaW1hZ2VfdXJsKSkge1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdpbWFnZV91cmwnLCBhcmdzLmltYWdlX3VybCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy50b3BfaykpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndG9wX2snLCBTdHJpbmcoYXJncy50b3BfaykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdCh7XG4gICAgICAgICAgICB1cmw6ICcvaW1hZ2UvdGV4dC9jbGFzc2lmaWNhdGlvbi8nLFxuICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogdGhpcy5wYXJhbXMudXNlRmV0Y2ggPyBtb2RlbHNfMS5JTUFHRV9URVhUX0NMQVNTSUZJQ0FUSU9OX0NPTlRFTlRfVFlQRSA6IHVuZGVmaW5lZCB9LCAoKF9hID0gYXJncy5oZWFkZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpLFxuICAgICAgICAgICAgcXVlcnk6IF9fYXNzaWduKHt9LCAoYXJncy5tb2RlbCA/IHsgbW9kZWw6IGFyZ3MubW9kZWwgfSA6IHt9KSksXG4gICAgICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcm9tSW1hZ2VUb1RleHQucHJvdG90eXBlLm9jciA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgIGlmICgoMCwgZnBfMS5pc0RlZmluZWQpKGFyZ3MuaW1hZ2UpKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ltYWdlJywgYXJncy5pbWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy5pbWFnZV91cmwpKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ltYWdlX3VybCcsIGFyZ3MuaW1hZ2VfdXJsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGZwXzEuaXNEZWZpbmVkKShhcmdzLnNvdXJjZV9sYW5ndWFnZSkpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnc291cmNlX2xhbmd1YWdlJywgYXJncy5zb3VyY2VfbGFuZ3VhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdCh7XG4gICAgICAgICAgICB1cmw6ICcvaW1hZ2UvdGV4dC9vY3IvJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6IHRoaXMucGFyYW1zLnVzZUZldGNoID8gbW9kZWxzXzEuSU1BR0VfVEVYVF9PQ1JfQ09OVEVOVF9UWVBFIDogdW5kZWZpbmVkIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBGcm9tSW1hZ2VUb1RleHQ7XG59KCkpO1xuZXhwb3J0cy5Gcm9tSW1hZ2VUb1RleHQgPSBGcm9tSW1hZ2VUb1RleHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qIEdlbmVyYXRlZCBmaWxlIHdpdGggXCJzY3JpcHRzL2dlbmVyYXRlLXNkay50c1wiICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZyb21JbWFnZSA9IHZvaWQgMDtcbnZhciBmcm9tX2ltYWdlX3RvX2ltYWdlXzEgPSByZXF1aXJlKFwiLi9mcm9tLWltYWdlLXRvLWltYWdlXCIpO1xudmFyIGZyb21faW1hZ2VfdG9fdGV4dF8xID0gcmVxdWlyZShcIi4vZnJvbS1pbWFnZS10by10ZXh0XCIpO1xudmFyIEZyb21JbWFnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGcm9tSW1hZ2UocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuZnJvbUltYWdlVG9JbWFnZUluc3QgPSBuZXcgZnJvbV9pbWFnZV90b19pbWFnZV8xLkZyb21JbWFnZVRvSW1hZ2UocGFyYW1zKTtcbiAgICAgICAgdGhpcy5mcm9tSW1hZ2VUb1RleHRJbnN0ID0gbmV3IGZyb21faW1hZ2VfdG9fdGV4dF8xLkZyb21JbWFnZVRvVGV4dChwYXJhbXMpO1xuICAgIH1cbiAgICBGcm9tSW1hZ2UucHJvdG90eXBlLnRvSW1hZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21JbWFnZVRvSW1hZ2VJbnN0O1xuICAgIH07XG4gICAgRnJvbUltYWdlLnByb3RvdHlwZS50b1RleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21JbWFnZVRvVGV4dEluc3Q7XG4gICAgfTtcbiAgICByZXR1cm4gRnJvbUltYWdlO1xufSgpKTtcbmV4cG9ydHMuRnJvbUltYWdlID0gRnJvbUltYWdlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBHZW5lcmF0ZWQgZmlsZSB3aXRoIFwic2NyaXB0cy9nZW5lcmF0ZS1zZGsudHNcIiAqL1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRnJvbVRleHRUb0ltYWdlID0gdm9pZCAwO1xudmFyIG1vZGVsc18xID0gcmVxdWlyZShcIi4uL21vZGVsc1wiKTtcbnZhciBodHRwX2NsaWVudF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2h0dHAtY2xpZW50XCIpO1xudmFyIGZwXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvZnBcIik7XG52YXIgdXJsX2Zvcm1fZGF0YV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL3VybC1mb3JtLWRhdGFcIik7XG52YXIgRnJvbVRleHRUb0ltYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZyb21UZXh0VG9JbWFnZShwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gICAgICAgIHRoaXMuaHR0cENsaWVudCA9ICgwLCBodHRwX2NsaWVudF8xLmdldEh0dHBDbGllbnQpKHRoaXMucGFyYW1zKTtcbiAgICB9XG4gICAgRnJvbVRleHRUb0ltYWdlLnByb3RvdHlwZS5pbWFnZUdlbmVyYXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyB1cmxfZm9ybV9kYXRhXzEuVXJsRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdwcm9tcHQnLCBhcmdzLnByb21wdCk7XG4gICAgICAgIGlmICgoMCwgZnBfMS5pc0RlZmluZWQpKGFyZ3Muc2FtcGxlcykpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnc2FtcGxlcycsIFN0cmluZyhhcmdzLnNhbXBsZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGZwXzEuaXNEZWZpbmVkKShhcmdzLnN0ZXBzKSkge1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdzdGVwcycsIFN0cmluZyhhcmdzLnN0ZXBzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy5zZWVkKSkge1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdzZWVkJywgU3RyaW5nKGFyZ3Muc2VlZCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdCh7XG4gICAgICAgICAgICB1cmw6ICcvdGV4dC9pbWFnZS9pbWFnZS1nZW5lcmF0aW9uLycsXG4gICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7ICdDb250ZW50LVR5cGUnOiBtb2RlbHNfMS5URVhUX0lNQUdFX0lNQUdFX0dFTkVSQVRJT05fQ09OVEVOVF9UWVBFIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLnRvU3RyaW5nKCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEZyb21UZXh0VG9JbWFnZTtcbn0oKSk7XG5leHBvcnRzLkZyb21UZXh0VG9JbWFnZSA9IEZyb21UZXh0VG9JbWFnZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyogR2VuZXJhdGVkIGZpbGUgd2l0aCBcInNjcmlwdHMvZ2VuZXJhdGUtc2RrLnRzXCIgKi9cbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZyb21UZXh0VG9UZXh0ID0gdm9pZCAwO1xudmFyIG1vZGVsc18xID0gcmVxdWlyZShcIi4uL21vZGVsc1wiKTtcbnZhciBodHRwX2NsaWVudF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2h0dHAtY2xpZW50XCIpO1xudmFyIGZwXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvZnBcIik7XG52YXIgdXJsX2Zvcm1fZGF0YV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL3VybC1mb3JtLWRhdGFcIik7XG52YXIgRnJvbVRleHRUb1RleHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnJvbVRleHRUb1RleHQocGFyYW1zKSB7XG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSAoMCwgaHR0cF9jbGllbnRfMS5nZXRIdHRwQ2xpZW50KSh0aGlzLnBhcmFtcyk7XG4gICAgfVxuICAgIEZyb21UZXh0VG9UZXh0LnByb3RvdHlwZS5hZEdlbmVyYXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyB1cmxfZm9ybV9kYXRhXzEuVXJsRm9ybURhdGEoKTtcbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy5rZXl3b3JkcykpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgna2V5d29yZHMnLCBhcmdzLmtleXdvcmRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Qoe1xuICAgICAgICAgICAgdXJsOiAnL3RleHQvdGV4dC9hZC1nZW5lcmF0aW9uLycsXG4gICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7ICdDb250ZW50LVR5cGUnOiBtb2RlbHNfMS5URVhUX1RFWFRfQURfR0VORVJBVElPTl9DT05URU5UX1RZUEUgfSwgKChfYSA9IGFyZ3MuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKSxcbiAgICAgICAgICAgIHF1ZXJ5OiBfX2Fzc2lnbih7fSwgKGFyZ3MubW9kZWwgPyB7IG1vZGVsOiBhcmdzLm1vZGVsIH0gOiB7fSkpLFxuICAgICAgICAgICAgYm9keTogZm9ybURhdGEudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcm9tVGV4dFRvVGV4dC5wcm90b3R5cGUuYXJ0aWNsZUdlbmVyYXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyB1cmxfZm9ybV9kYXRhXzEuVXJsRm9ybURhdGEoKTtcbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy50aXRsZSkpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndGl0bGUnLCBhcmdzLnRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Qoe1xuICAgICAgICAgICAgdXJsOiAnL3RleHQvdGV4dC9hcnRpY2xlLWdlbmVyYXRpb24vJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6IG1vZGVsc18xLlRFWFRfVEVYVF9BUlRJQ0xFX0dFTkVSQVRJT05fQ09OVEVOVF9UWVBFIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLnRvU3RyaW5nKCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRnJvbVRleHRUb1RleHQucHJvdG90eXBlLmF1dG9jb3JyZWN0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgdXJsX2Zvcm1fZGF0YV8xLlVybEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnc2VudGVuY2UnLCBhcmdzLnNlbnRlbmNlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KHtcbiAgICAgICAgICAgIHVybDogJy90ZXh0L3RleHQvYXV0b2NvcnJlY3QvJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6IG1vZGVsc18xLlRFWFRfVEVYVF9BVVRPQ09SUkVDVF9DT05URU5UX1RZUEUgfSwgKChfYSA9IGFyZ3MuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKSxcbiAgICAgICAgICAgIHF1ZXJ5OiBfX2Fzc2lnbih7fSwgKGFyZ3MubW9kZWwgPyB7IG1vZGVsOiBhcmdzLm1vZGVsIH0gOiB7fSkpLFxuICAgICAgICAgICAgYm9keTogZm9ybURhdGEudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcm9tVGV4dFRvVGV4dC5wcm90b3R5cGUuZW1vdGlvblJlY29nbml0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgdXJsX2Zvcm1fZGF0YV8xLlVybEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndGV4dCcsIGFyZ3MudGV4dCk7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdCh7XG4gICAgICAgICAgICB1cmw6ICcvdGV4dC90ZXh0L2Vtb3Rpb24tcmVjb2duaXRpb24vJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6IG1vZGVsc18xLlRFWFRfVEVYVF9FTU9USU9OX1JFQ09HTklUSU9OX0NPTlRFTlRfVFlQRSB9LCAoKF9hID0gYXJncy5oZWFkZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpLFxuICAgICAgICAgICAgcXVlcnk6IF9fYXNzaWduKHt9LCAoYXJncy5tb2RlbCA/IHsgbW9kZWw6IGFyZ3MubW9kZWwgfSA6IHt9KSksXG4gICAgICAgICAgICBib2R5OiBmb3JtRGF0YS50b1N0cmluZygpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZyb21UZXh0VG9UZXh0LnByb3RvdHlwZS5oYXRlU3BlZWNoRGV0ZWN0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgdXJsX2Zvcm1fZGF0YV8xLlVybEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndGV4dCcsIGFyZ3MudGV4dCk7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdCh7XG4gICAgICAgICAgICB1cmw6ICcvdGV4dC90ZXh0L2hhdGUtc3BlZWNoLWRldGVjdGlvbi8nLFxuICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogbW9kZWxzXzEuVEVYVF9URVhUX0hBVEVfU1BFRUNIX0RFVEVDVElPTl9DT05URU5UX1RZUEUgfSwgKChfYSA9IGFyZ3MuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKSxcbiAgICAgICAgICAgIHF1ZXJ5OiBfX2Fzc2lnbih7fSwgKGFyZ3MubW9kZWwgPyB7IG1vZGVsOiBhcmdzLm1vZGVsIH0gOiB7fSkpLFxuICAgICAgICAgICAgYm9keTogZm9ybURhdGEudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcm9tVGV4dFRvVGV4dC5wcm90b3R5cGUuaW50ZW50Q2xhc3NpZmljYXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyB1cmxfZm9ybV9kYXRhXzEuVXJsRm9ybURhdGEoKTtcbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy50ZXh0KSkge1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd0ZXh0JywgYXJncy50ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Qoe1xuICAgICAgICAgICAgdXJsOiAnL3RleHQvdGV4dC9pbnRlbnQtY2xhc3NpZmljYXRpb24vJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6IG1vZGVsc18xLlRFWFRfVEVYVF9JTlRFTlRfQ0xBU1NJRklDQVRJT05fQ09OVEVOVF9UWVBFIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLnRvU3RyaW5nKCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRnJvbVRleHRUb1RleHQucHJvdG90eXBlLmtleXdvcmRFeHRyYWN0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgdXJsX2Zvcm1fZGF0YV8xLlVybEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndGV4dCcsIGFyZ3MudGV4dCk7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdCh7XG4gICAgICAgICAgICB1cmw6ICcvdGV4dC90ZXh0L2tleXdvcmQtZXh0cmFjdGlvbi8nLFxuICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogbW9kZWxzXzEuVEVYVF9URVhUX0tFWVdPUkRfRVhUUkFDVElPTl9DT05URU5UX1RZUEUgfSwgKChfYSA9IGFyZ3MuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKSxcbiAgICAgICAgICAgIHF1ZXJ5OiBfX2Fzc2lnbih7fSwgKGFyZ3MubW9kZWwgPyB7IG1vZGVsOiBhcmdzLm1vZGVsIH0gOiB7fSkpLFxuICAgICAgICAgICAgYm9keTogZm9ybURhdGEudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcm9tVGV4dFRvVGV4dC5wcm90b3R5cGUubGFuZ3VhZ2VEZXRlY3Rpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyB1cmxfZm9ybV9kYXRhXzEuVXJsRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd0ZXh0JywgYXJncy50ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KHtcbiAgICAgICAgICAgIHVybDogJy90ZXh0L3RleHQvbGFuZ3VhZ2UtZGV0ZWN0aW9uLycsXG4gICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7ICdDb250ZW50LVR5cGUnOiBtb2RlbHNfMS5URVhUX1RFWFRfTEFOR1VBR0VfREVURUNUSU9OX0NPTlRFTlRfVFlQRSB9LCAoKF9hID0gYXJncy5oZWFkZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpLFxuICAgICAgICAgICAgcXVlcnk6IF9fYXNzaWduKHt9LCAoYXJncy5tb2RlbCA/IHsgbW9kZWw6IGFyZ3MubW9kZWwgfSA6IHt9KSksXG4gICAgICAgICAgICBib2R5OiBmb3JtRGF0YS50b1N0cmluZygpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZyb21UZXh0VG9UZXh0LnByb3RvdHlwZS5sYW5ndWFnZUdlbmVyYXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyB1cmxfZm9ybV9kYXRhXzEuVXJsRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd0ZXh0JywgYXJncy50ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KHtcbiAgICAgICAgICAgIHVybDogJy90ZXh0L3RleHQvbGFuZ3VhZ2UtZ2VuZXJhdGlvbi8nLFxuICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogbW9kZWxzXzEuVEVYVF9URVhUX0xBTkdVQUdFX0dFTkVSQVRJT05fQ09OVEVOVF9UWVBFIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLnRvU3RyaW5nKCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRnJvbVRleHRUb1RleHQucHJvdG90eXBlLm5hbWVkRW50aXR5UmVjb2duaXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyB1cmxfZm9ybV9kYXRhXzEuVXJsRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd0ZXh0JywgYXJncy50ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KHtcbiAgICAgICAgICAgIHVybDogJy90ZXh0L3RleHQvbmFtZWQtZW50aXR5LXJlY29nbml0aW9uLycsXG4gICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7ICdDb250ZW50LVR5cGUnOiBtb2RlbHNfMS5URVhUX1RFWFRfTkFNRURfRU5USVRZX1JFQ09HTklUSU9OX0NPTlRFTlRfVFlQRSB9LCAoKF9hID0gYXJncy5oZWFkZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpLFxuICAgICAgICAgICAgcXVlcnk6IF9fYXNzaWduKHt9LCAoYXJncy5tb2RlbCA/IHsgbW9kZWw6IGFyZ3MubW9kZWwgfSA6IHt9KSksXG4gICAgICAgICAgICBib2R5OiBmb3JtRGF0YS50b1N0cmluZygpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZyb21UZXh0VG9UZXh0LnByb3RvdHlwZS5uZXh0U2VudGVuY2VQcmVkaWN0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgdXJsX2Zvcm1fZGF0YV8xLlVybEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnc2VudGVuY2VfMScsIGFyZ3Muc2VudGVuY2VfMSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnc2VudGVuY2VfMicsIGFyZ3Muc2VudGVuY2VfMik7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdCh7XG4gICAgICAgICAgICB1cmw6ICcvdGV4dC90ZXh0L25leHQtc2VudGVuY2UtcHJlZGljdGlvbi8nLFxuICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogbW9kZWxzXzEuVEVYVF9URVhUX05FWFRfU0VOVEVOQ0VfUFJFRElDVElPTl9DT05URU5UX1RZUEUgfSwgKChfYSA9IGFyZ3MuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKSxcbiAgICAgICAgICAgIHF1ZXJ5OiBfX2Fzc2lnbih7fSwgKGFyZ3MubW9kZWwgPyB7IG1vZGVsOiBhcmdzLm1vZGVsIH0gOiB7fSkpLFxuICAgICAgICAgICAgYm9keTogZm9ybURhdGEudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcm9tVGV4dFRvVGV4dC5wcm90b3R5cGUubmV4dFdvcmRQcmVkaWN0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgdXJsX2Zvcm1fZGF0YV8xLlVybEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnc2VudGVuY2UnLCBhcmdzLnNlbnRlbmNlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KHtcbiAgICAgICAgICAgIHVybDogJy90ZXh0L3RleHQvbmV4dC13b3JkLXByZWRpY3Rpb24vJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6IG1vZGVsc18xLlRFWFRfVEVYVF9ORVhUX1dPUkRfUFJFRElDVElPTl9DT05URU5UX1RZUEUgfSwgKChfYSA9IGFyZ3MuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKSxcbiAgICAgICAgICAgIHF1ZXJ5OiBfX2Fzc2lnbih7fSwgKGFyZ3MubW9kZWwgPyB7IG1vZGVsOiBhcmdzLm1vZGVsIH0gOiB7fSkpLFxuICAgICAgICAgICAgYm9keTogZm9ybURhdGEudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcm9tVGV4dFRvVGV4dC5wcm90b3R5cGUucGx1cmFsID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgdXJsX2Zvcm1fZGF0YV8xLlVybEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnd29yZCcsIGFyZ3Mud29yZCk7XG4gICAgICAgIGlmICgoMCwgZnBfMS5pc0RlZmluZWQpKGFyZ3MuY291bnQpKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2NvdW50JywgU3RyaW5nKGFyZ3MuY291bnQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Qoe1xuICAgICAgICAgICAgdXJsOiAnL3RleHQvdGV4dC9wbHVyYWwvJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6IG1vZGVsc18xLlRFWFRfVEVYVF9QTFVSQUxfQ09OVEVOVF9UWVBFIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLnRvU3RyaW5nKCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRnJvbVRleHRUb1RleHQucHJvdG90eXBlLnByb2dyYW1taW5nTGFuZ3VhZ2VHZW5lcmF0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgdXJsX2Zvcm1fZGF0YV8xLlVybEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnY29kZV9zbmlwcGV0JywgYXJncy5jb2RlX3NuaXBwZXQpO1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Qoe1xuICAgICAgICAgICAgdXJsOiAnL3RleHQvdGV4dC9wcm9ncmFtbWluZy1sYW5ndWFnZS1nZW5lcmF0aW9uLycsXG4gICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7ICdDb250ZW50LVR5cGUnOiBtb2RlbHNfMS5URVhUX1RFWFRfUFJPR1JBTU1JTkdfTEFOR1VBR0VfR0VORVJBVElPTl9DT05URU5UX1RZUEUgfSwgKChfYSA9IGFyZ3MuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKSxcbiAgICAgICAgICAgIHF1ZXJ5OiBfX2Fzc2lnbih7fSwgKGFyZ3MubW9kZWwgPyB7IG1vZGVsOiBhcmdzLm1vZGVsIH0gOiB7fSkpLFxuICAgICAgICAgICAgYm9keTogZm9ybURhdGEudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcm9tVGV4dFRvVGV4dC5wcm90b3R5cGUucXVlc3Rpb25BbnN3ZXJpbmcgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyB1cmxfZm9ybV9kYXRhXzEuVXJsRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdjb250ZXh0JywgYXJncy5jb250ZXh0KTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdxdWVzdGlvbicsIGFyZ3MucXVlc3Rpb24pO1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Qoe1xuICAgICAgICAgICAgdXJsOiAnL3RleHQvdGV4dC9xdWVzdGlvbi1hbnN3ZXJpbmcvJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6IG1vZGVsc18xLlRFWFRfVEVYVF9RVUVTVElPTl9BTlNXRVJJTkdfQ09OVEVOVF9UWVBFIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLnRvU3RyaW5nKCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRnJvbVRleHRUb1RleHQucHJvdG90eXBlLnNlbnRlbmNlUGFyYXBocmFzZXIgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyB1cmxfZm9ybV9kYXRhXzEuVXJsRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdjb250ZXh0JywgYXJncy5jb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KHtcbiAgICAgICAgICAgIHVybDogJy90ZXh0L3RleHQvc2VudGVuY2UtcGFyYXBocmFzZXIvJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6IG1vZGVsc18xLlRFWFRfVEVYVF9TRU5URU5DRV9QQVJBUEhSQVNFUl9DT05URU5UX1RZUEUgfSwgKChfYSA9IGFyZ3MuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKSxcbiAgICAgICAgICAgIHF1ZXJ5OiBfX2Fzc2lnbih7fSwgKGFyZ3MubW9kZWwgPyB7IG1vZGVsOiBhcmdzLm1vZGVsIH0gOiB7fSkpLFxuICAgICAgICAgICAgYm9keTogZm9ybURhdGEudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGcm9tVGV4dFRvVGV4dC5wcm90b3R5cGUuc2VudGltZW50QW5hbHlzaXMgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyB1cmxfZm9ybV9kYXRhXzEuVXJsRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd0ZXh0JywgYXJncy50ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KHtcbiAgICAgICAgICAgIHVybDogJy90ZXh0L3RleHQvc2VudGltZW50LWFuYWx5c2lzLycsXG4gICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7ICdDb250ZW50LVR5cGUnOiBtb2RlbHNfMS5URVhUX1RFWFRfU0VOVElNRU5UX0FOQUxZU0lTX0NPTlRFTlRfVFlQRSB9LCAoKF9hID0gYXJncy5oZWFkZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpLFxuICAgICAgICAgICAgcXVlcnk6IF9fYXNzaWduKHt9LCAoYXJncy5tb2RlbCA/IHsgbW9kZWw6IGFyZ3MubW9kZWwgfSA6IHt9KSksXG4gICAgICAgICAgICBib2R5OiBmb3JtRGF0YS50b1N0cmluZygpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZyb21UZXh0VG9UZXh0LnByb3RvdHlwZS5zaW1pbGFyaXR5ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgdXJsX2Zvcm1fZGF0YV8xLlVybEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnc2VudGVuY2VfMScsIGFyZ3Muc2VudGVuY2VfMSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnc2VudGVuY2VfMicsIGFyZ3Muc2VudGVuY2VfMik7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdCh7XG4gICAgICAgICAgICB1cmw6ICcvdGV4dC90ZXh0L3NpbWlsYXJpdHkvJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IF9fYXNzaWduKHsgJ0NvbnRlbnQtVHlwZSc6IG1vZGVsc18xLlRFWFRfVEVYVF9TSU1JTEFSSVRZX0NPTlRFTlRfVFlQRSB9LCAoKF9hID0gYXJncy5oZWFkZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpLFxuICAgICAgICAgICAgcXVlcnk6IF9fYXNzaWduKHt9LCAoYXJncy5tb2RlbCA/IHsgbW9kZWw6IGFyZ3MubW9kZWwgfSA6IHt9KSksXG4gICAgICAgICAgICBib2R5OiBmb3JtRGF0YS50b1N0cmluZygpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZyb21UZXh0VG9UZXh0LnByb3RvdHlwZS5zdW1tYXJpemF0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgdXJsX2Zvcm1fZGF0YV8xLlVybEZvcm1EYXRhKCk7XG4gICAgICAgIGlmICgoMCwgZnBfMS5pc0RlZmluZWQpKGFyZ3MudGV4dCkpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndGV4dCcsIGFyZ3MudGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KHtcbiAgICAgICAgICAgIHVybDogJy90ZXh0L3RleHQvc3VtbWFyaXphdGlvbi8nLFxuICAgICAgICAgICAgaGVhZGVyczogX19hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogbW9kZWxzXzEuVEVYVF9URVhUX1NVTU1BUklaQVRJT05fQ09OVEVOVF9UWVBFIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLnRvU3RyaW5nKCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRnJvbVRleHRUb1RleHQucHJvdG90eXBlLnRyYW5zbGF0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgdXJsX2Zvcm1fZGF0YV8xLlVybEZvcm1EYXRhKCk7XG4gICAgICAgIGlmICgoMCwgZnBfMS5pc0RlZmluZWQpKGFyZ3MudGV4dCkpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndGV4dCcsIGFyZ3MudGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBmcF8xLmlzRGVmaW5lZCkoYXJncy5zb3VyY2UpKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ3NvdXJjZScsIGFyZ3Muc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGZwXzEuaXNEZWZpbmVkKShhcmdzLnRhcmdldCkpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndGFyZ2V0JywgYXJncy50YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdCh7XG4gICAgICAgICAgICB1cmw6ICcvdGV4dC90ZXh0L3RyYW5zbGF0aW9uLycsXG4gICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7ICdDb250ZW50LVR5cGUnOiBtb2RlbHNfMS5URVhUX1RFWFRfVFJBTlNMQVRJT05fQ09OVEVOVF9UWVBFIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLnRvU3RyaW5nKCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRnJvbVRleHRUb1RleHQucHJvdG90eXBlLndvcmRBbGlnbm1lbnQgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyB1cmxfZm9ybV9kYXRhXzEuVXJsRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdpbnB1dF9zdHJpbmdfbGFuZ3VhZ2VfMScsIGFyZ3MuaW5wdXRfc3RyaW5nX2xhbmd1YWdlXzEpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2lucHV0X3N0cmluZ19sYW5ndWFnZV8yJywgYXJncy5pbnB1dF9zdHJpbmdfbGFuZ3VhZ2VfMik7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdCh7XG4gICAgICAgICAgICB1cmw6ICcvdGV4dC90ZXh0L3dvcmQtYWxpZ25tZW50LycsXG4gICAgICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbih7ICdDb250ZW50LVR5cGUnOiBtb2RlbHNfMS5URVhUX1RFWFRfV09SRF9BTElHTk1FTlRfQ09OVEVOVF9UWVBFIH0sICgoX2EgPSBhcmdzLmhlYWRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9KSksXG4gICAgICAgICAgICBxdWVyeTogX19hc3NpZ24oe30sIChhcmdzLm1vZGVsID8geyBtb2RlbDogYXJncy5tb2RlbCB9IDoge30pKSxcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLnRvU3RyaW5nKCksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEZyb21UZXh0VG9UZXh0O1xufSgpKTtcbmV4cG9ydHMuRnJvbVRleHRUb1RleHQgPSBGcm9tVGV4dFRvVGV4dDtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyogR2VuZXJhdGVkIGZpbGUgd2l0aCBcInNjcmlwdHMvZ2VuZXJhdGUtc2RrLnRzXCIgKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRnJvbVRleHQgPSB2b2lkIDA7XG52YXIgZnJvbV90ZXh0X3RvX2ltYWdlXzEgPSByZXF1aXJlKFwiLi9mcm9tLXRleHQtdG8taW1hZ2VcIik7XG52YXIgZnJvbV90ZXh0X3RvX3RleHRfMSA9IHJlcXVpcmUoXCIuL2Zyb20tdGV4dC10by10ZXh0XCIpO1xudmFyIEZyb21UZXh0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZyb21UZXh0KHBhcmFtcykge1xuICAgICAgICB0aGlzLmZyb21UZXh0VG9JbWFnZUluc3QgPSBuZXcgZnJvbV90ZXh0X3RvX2ltYWdlXzEuRnJvbVRleHRUb0ltYWdlKHBhcmFtcyk7XG4gICAgICAgIHRoaXMuZnJvbVRleHRUb1RleHRJbnN0ID0gbmV3IGZyb21fdGV4dF90b190ZXh0XzEuRnJvbVRleHRUb1RleHQocGFyYW1zKTtcbiAgICB9XG4gICAgRnJvbVRleHQucHJvdG90eXBlLnRvSW1hZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21UZXh0VG9JbWFnZUluc3Q7XG4gICAgfTtcbiAgICBGcm9tVGV4dC5wcm90b3R5cGUudG9UZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tVGV4dFRvVGV4dEluc3Q7XG4gICAgfTtcbiAgICByZXR1cm4gRnJvbVRleHQ7XG59KCkpO1xuZXhwb3J0cy5Gcm9tVGV4dCA9IEZyb21UZXh0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBHZW5lcmF0ZWQgZmlsZSB3aXRoIFwic2NyaXB0cy9nZW5lcmF0ZS1zZGsudHNcIiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaG9ydGN1dHMgPSB2b2lkIDA7XG52YXIgU2hvcnRjdXRzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNob3J0Y3V0cygpIHtcbiAgICB9XG4gICAgLy8gQVVESU8gPT4gVEVYVFxuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUuYXVkaW9UcmFuc2NyaXB0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUF1ZGlvKCkudG9UZXh0KCkuYXVkaW9UcmFuc2NyaXB0aW9uKGFyZ3MpO1xuICAgIH07XG4gICAgLy8gSU1BR0UgPT4gSU1BR0VcbiAgICBTaG9ydGN1dHMucHJvdG90eXBlLmJhY2tncm91bmRSZW1vdmFsID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUltYWdlKCkudG9JbWFnZSgpLmJhY2tncm91bmRSZW1vdmFsKGFyZ3MpO1xuICAgIH07XG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS5jb2xvcml6YXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tSW1hZ2UoKS50b0ltYWdlKCkuY29sb3JpemF0aW9uKGFyZ3MpO1xuICAgIH07XG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS5mYWNlQmx1cmluZyA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21JbWFnZSgpLnRvSW1hZ2UoKS5mYWNlQmx1cmluZyhhcmdzKTtcbiAgICB9O1xuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUudW5jb2xvcml6YXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tSW1hZ2UoKS50b0ltYWdlKCkudW5jb2xvcml6YXRpb24oYXJncyk7XG4gICAgfTtcbiAgICAvLyBJTUFHRSA9PiBURVhUXG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS5hc2NpaWZ5ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUltYWdlKCkudG9UZXh0KCkuYXNjaWlmeShhcmdzKTtcbiAgICB9O1xuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUuY2xhc3NpZmljYXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tSW1hZ2UoKS50b1RleHQoKS5jbGFzc2lmaWNhdGlvbihhcmdzKTtcbiAgICB9O1xuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUub2NyID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUltYWdlKCkudG9UZXh0KCkub2NyKGFyZ3MpO1xuICAgIH07XG4gICAgLy8gVEVYVCA9PiBJTUFHRVxuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUuaW1hZ2VHZW5lcmF0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVRleHQoKS50b0ltYWdlKCkuaW1hZ2VHZW5lcmF0aW9uKGFyZ3MpO1xuICAgIH07XG4gICAgLy8gVEVYVCA9PiBURVhUXG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS5hZEdlbmVyYXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tVGV4dCgpLnRvVGV4dCgpLmFkR2VuZXJhdGlvbihhcmdzKTtcbiAgICB9O1xuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUuYXJ0aWNsZUdlbmVyYXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tVGV4dCgpLnRvVGV4dCgpLmFydGljbGVHZW5lcmF0aW9uKGFyZ3MpO1xuICAgIH07XG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS5hdXRvY29ycmVjdCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21UZXh0KCkudG9UZXh0KCkuYXV0b2NvcnJlY3QoYXJncyk7XG4gICAgfTtcbiAgICBTaG9ydGN1dHMucHJvdG90eXBlLmVtb3Rpb25SZWNvZ25pdGlvbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21UZXh0KCkudG9UZXh0KCkuZW1vdGlvblJlY29nbml0aW9uKGFyZ3MpO1xuICAgIH07XG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS5oYXRlU3BlZWNoRGV0ZWN0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVRleHQoKS50b1RleHQoKS5oYXRlU3BlZWNoRGV0ZWN0aW9uKGFyZ3MpO1xuICAgIH07XG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS5pbnRlbnRDbGFzc2lmaWNhdGlvbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21UZXh0KCkudG9UZXh0KCkuaW50ZW50Q2xhc3NpZmljYXRpb24oYXJncyk7XG4gICAgfTtcbiAgICBTaG9ydGN1dHMucHJvdG90eXBlLmtleXdvcmRFeHRyYWN0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVRleHQoKS50b1RleHQoKS5rZXl3b3JkRXh0cmFjdGlvbihhcmdzKTtcbiAgICB9O1xuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUubGFuZ3VhZ2VEZXRlY3Rpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tVGV4dCgpLnRvVGV4dCgpLmxhbmd1YWdlRGV0ZWN0aW9uKGFyZ3MpO1xuICAgIH07XG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS5sYW5ndWFnZUdlbmVyYXRpb24gPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tVGV4dCgpLnRvVGV4dCgpLmxhbmd1YWdlR2VuZXJhdGlvbihhcmdzKTtcbiAgICB9O1xuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUubmFtZWRFbnRpdHlSZWNvZ25pdGlvbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21UZXh0KCkudG9UZXh0KCkubmFtZWRFbnRpdHlSZWNvZ25pdGlvbihhcmdzKTtcbiAgICB9O1xuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUubmV4dFNlbnRlbmNlUHJlZGljdGlvbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21UZXh0KCkudG9UZXh0KCkubmV4dFNlbnRlbmNlUHJlZGljdGlvbihhcmdzKTtcbiAgICB9O1xuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUubmV4dFdvcmRQcmVkaWN0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVRleHQoKS50b1RleHQoKS5uZXh0V29yZFByZWRpY3Rpb24oYXJncyk7XG4gICAgfTtcbiAgICBTaG9ydGN1dHMucHJvdG90eXBlLnBsdXJhbCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21UZXh0KCkudG9UZXh0KCkucGx1cmFsKGFyZ3MpO1xuICAgIH07XG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS5wcm9ncmFtbWluZ0xhbmd1YWdlR2VuZXJhdGlvbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21UZXh0KCkudG9UZXh0KCkucHJvZ3JhbW1pbmdMYW5ndWFnZUdlbmVyYXRpb24oYXJncyk7XG4gICAgfTtcbiAgICBTaG9ydGN1dHMucHJvdG90eXBlLnF1ZXN0aW9uQW5zd2VyaW5nID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVRleHQoKS50b1RleHQoKS5xdWVzdGlvbkFuc3dlcmluZyhhcmdzKTtcbiAgICB9O1xuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUuc2VudGVuY2VQYXJhcGhyYXNlciA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21UZXh0KCkudG9UZXh0KCkuc2VudGVuY2VQYXJhcGhyYXNlcihhcmdzKTtcbiAgICB9O1xuICAgIFNob3J0Y3V0cy5wcm90b3R5cGUuc2VudGltZW50QW5hbHlzaXMgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tVGV4dCgpLnRvVGV4dCgpLnNlbnRpbWVudEFuYWx5c2lzKGFyZ3MpO1xuICAgIH07XG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS5zaW1pbGFyaXR5ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVRleHQoKS50b1RleHQoKS5zaW1pbGFyaXR5KGFyZ3MpO1xuICAgIH07XG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS5zdW1tYXJpemF0aW9uID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVRleHQoKS50b1RleHQoKS5zdW1tYXJpemF0aW9uKGFyZ3MpO1xuICAgIH07XG4gICAgU2hvcnRjdXRzLnByb3RvdHlwZS50cmFuc2xhdGlvbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21UZXh0KCkudG9UZXh0KCkudHJhbnNsYXRpb24oYXJncyk7XG4gICAgfTtcbiAgICBTaG9ydGN1dHMucHJvdG90eXBlLndvcmRBbGlnbm1lbnQgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tVGV4dCgpLnRvVGV4dCgpLndvcmRBbGlnbm1lbnQoYXJncyk7XG4gICAgfTtcbiAgICByZXR1cm4gU2hvcnRjdXRzO1xufSgpKTtcbmV4cG9ydHMuU2hvcnRjdXRzID0gU2hvcnRjdXRzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBHZW5lcmF0ZWQgZmlsZSB3aXRoIFwic2NyaXB0cy9nZW5lcmF0ZS1zZGsudHNcIiAqL1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdsYWRpYUNsaWVudCA9IHZvaWQgMDtcbnZhciBzaG9ydGN1dHNfMSA9IHJlcXVpcmUoXCIuL2NsaWVudC9zaG9ydGN1dHNcIik7XG52YXIgZnJvbV9hdWRpb18xID0gcmVxdWlyZShcIi4vY2xpZW50L2Zyb20tYXVkaW9cIik7XG52YXIgZnJvbV9pbWFnZV8xID0gcmVxdWlyZShcIi4vY2xpZW50L2Zyb20taW1hZ2VcIik7XG52YXIgZnJvbV90ZXh0XzEgPSByZXF1aXJlKFwiLi9jbGllbnQvZnJvbS10ZXh0XCIpO1xudmFyIEdsYWRpYUNsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoR2xhZGlhQ2xpZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEdsYWRpYUNsaWVudChwYXJhbXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHZhciB2YWxpZGF0ZWRQYXJhbXMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcGFyYW1zKSwgeyB1c2VGZXRjaDogKF9hID0gcGFyYW1zLnVzZUZldGNoKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZSB9KTtcbiAgICAgICAgX3RoaXMuZnJvbUF1ZGlvSW5zdCA9IG5ldyBmcm9tX2F1ZGlvXzEuRnJvbUF1ZGlvKHZhbGlkYXRlZFBhcmFtcyk7XG4gICAgICAgIF90aGlzLmZyb21JbWFnZUluc3QgPSBuZXcgZnJvbV9pbWFnZV8xLkZyb21JbWFnZSh2YWxpZGF0ZWRQYXJhbXMpO1xuICAgICAgICBfdGhpcy5mcm9tVGV4dEluc3QgPSBuZXcgZnJvbV90ZXh0XzEuRnJvbVRleHQodmFsaWRhdGVkUGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBHbGFkaWFDbGllbnQucHJvdG90eXBlLmZyb21BdWRpbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUF1ZGlvSW5zdDtcbiAgICB9O1xuICAgIEdsYWRpYUNsaWVudC5wcm90b3R5cGUuZnJvbUltYWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tSW1hZ2VJbnN0O1xuICAgIH07XG4gICAgR2xhZGlhQ2xpZW50LnByb3RvdHlwZS5mcm9tVGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVRleHRJbnN0O1xuICAgIH07XG4gICAgcmV0dXJuIEdsYWRpYUNsaWVudDtcbn0oc2hvcnRjdXRzXzEuU2hvcnRjdXRzKSk7XG5leHBvcnRzLkdsYWRpYUNsaWVudCA9IEdsYWRpYUNsaWVudDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXRhID0gZXhwb3J0cy5HbGFkaWFDbGllbnQgPSBleHBvcnRzLmdsYWRpYSA9IHZvaWQgMDtcbnZhciBnbGFkaWFfY2xpZW50XzEgPSByZXF1aXJlKFwiLi9nbGFkaWEtY2xpZW50XCIpO1xuZnVuY3Rpb24gZ2xhZGlhKHBhcmFtcykge1xuICAgIHJldHVybiBuZXcgZ2xhZGlhX2NsaWVudF8xLkdsYWRpYUNsaWVudChwYXJhbXMpO1xufVxuZXhwb3J0cy5nbGFkaWEgPSBnbGFkaWE7XG5leHBvcnRzLmRlZmF1bHQgPSBnbGFkaWE7XG52YXIgZ2xhZGlhX2NsaWVudF8yID0gcmVxdWlyZShcIi4vZ2xhZGlhLWNsaWVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdsYWRpYUNsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2xhZGlhX2NsaWVudF8yLkdsYWRpYUNsaWVudDsgfSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tb2RlbHNcIiksIGV4cG9ydHMpO1xuZXhwb3J0cy5tZXRhID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL21ldGFcIikpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXhpb3NGZXRjaEFkYXB0ZXIgPSB2b2lkIDA7XG5mdW5jdGlvbiBheGlvc0ZldGNoQWRhcHRlcigpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfX2ltcG9ydFN0YXIocmVxdWlyZSgnQHZlc3BhaWFjaC9heGlvcy1mZXRjaC1hZGFwdGVyJykpOyB9KS50aGVuKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLmRlZmF1bHQ7IH0pO1xufVxuZXhwb3J0cy5heGlvc0ZldGNoQWRhcHRlciA9IGF4aW9zRmV0Y2hBZGFwdGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0SHR0cENsaWVudCA9IHZvaWQgMDtcbnZhciBheGlvc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJheGlvc1wiKSk7XG52YXIgYXhpb3NfZmV0Y2hfYWRhcHRlcl8xID0gcmVxdWlyZShcIi4vYXhpb3MtZmV0Y2gtYWRhcHRlclwiKTtcbnZhciBzZGtfdmVyc2lvbl8xID0gcmVxdWlyZShcIi4uL21ldGEvc2RrLXZlcnNpb25cIik7XG52YXIgc2VhcmNoX3F1ZXJ5X3BhcmFtX3NlcmlhbGl6ZXJfMSA9IHJlcXVpcmUoXCIuL3NlYXJjaC1xdWVyeS1wYXJhbS1zZXJpYWxpemVyXCIpO1xuZnVuY3Rpb24gZ2V0SHR0cENsaWVudChwYXJhbXMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgIHZhciBmYWN0b3J5ID0gKF9hID0gcGFyYW1zLmN1c3RvbUh0dHBDbGllbnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IEF4aW9zSHR0cENsaWVudDtcbiAgICB2YXIgYmFzZUhlYWRlcnMgPSBfX2Fzc2lnbih7ICd4LWdsYWRpYS1rZXknOiBwYXJhbXMuYXBpS2V5LCAneC1nbGFkaWEtc2RrJzogc2RrX3ZlcnNpb25fMS5TREtfVkVSU0lPTiB9LCAoKF9iID0gcGFyYW1zLmhlYWRlcnMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHt9KSk7XG4gICAgcmV0dXJuIGZhY3Rvcnkoe1xuICAgICAgICBiYXNlSGVhZGVyczogYmFzZUhlYWRlcnMsXG4gICAgICAgIGJhc2VVcmw6IChfYyA9IHBhcmFtcy5iYXNlVXJsKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnaHR0cHM6Ly92Mi1hcGkuZ2xhZGlhLmlvJyxcbiAgICAgICAgdXNlRmV0Y2g6IChfZCA9IHBhcmFtcy51c2VGZXRjaCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogZmFsc2UsXG4gICAgICAgIGh0dHBDbGllbnRUaW1lb3V0OiAoX2UgPSBwYXJhbXMuaHR0cENsaWVudFRpbWVvdXQpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IDMwMDAwMCxcbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0SHR0cENsaWVudCA9IGdldEh0dHBDbGllbnQ7XG52YXIgQXhpb3NIdHRwQ2xpZW50ID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGJhc2VIZWFkZXJzID0gX2EuYmFzZUhlYWRlcnMsIGJhc2VVcmwgPSBfYS5iYXNlVXJsLCB1c2VGZXRjaCA9IF9hLnVzZUZldGNoLCBodHRwQ2xpZW50VGltZW91dCA9IF9hLmh0dHBDbGllbnRUaW1lb3V0O1xuICAgIHJldHVybiB7XG4gICAgICAgIHBvc3Q6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVycywgdXJsLCByZXNwb25zZVR5cGUsIHRpbWVvdXQsIGFkYXB0ZXIsIF9iO1xuICAgICAgICAgICAgICAgIHZhciBfYztcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9kKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2QubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGJhc2VIZWFkZXJzKSwgcGFyYW1zLmhlYWRlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IFwiXCIuY29uY2F0KGJhc2VVcmwpLmNvbmNhdChwYXJhbXMudXJsKS5jb25jYXQoKDAsIHNlYXJjaF9xdWVyeV9wYXJhbV9zZXJpYWxpemVyXzEuc2VhcmNoUXVlcnlQYXJhbVNlcmlhbGl6ZXIpKHBhcmFtcy5xdWVyeSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9IChfYSA9IHBhcmFtcy5yZXNwb25zZVR5cGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICdqc29uJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gaHR0cENsaWVudFRpbWVvdXQgIT09IG51bGwgJiYgaHR0cENsaWVudFRpbWVvdXQgIT09IHZvaWQgMCA/IGh0dHBDbGllbnRUaW1lb3V0IDogMzAwMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXNlRmV0Y2gpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgKDAsIGF4aW9zX2ZldGNoX2FkYXB0ZXJfMS5heGlvc0ZldGNoQWRhcHRlcikoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSAoX2MuYWRhcHRlciA9IF9kLnNlbnQoKSwgX2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2QubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkYXB0ZXIgPSBfYjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgYXhpb3NfMS5kZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucG9zdCh1cmwsIHBhcmFtcy5ib2R5LCBfX2Fzc2lnbihfX2Fzc2lnbih7IGhlYWRlcnM6IGhlYWRlcnMsIHJlc3BvbnNlVHlwZTogcmVzcG9uc2VUeXBlIH0sIGFkYXB0ZXIpLCB7IHRpbWVvdXQ6IHRpbWVvdXQgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLmRhdGE7IH0pXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2VhcmNoUGFyYW1EZXNlcmlhbGl6ZXIgPSBleHBvcnRzLnNlYXJjaFBhcmFtU2VyaWFsaXplciA9IGV4cG9ydHMuc2VhcmNoUXVlcnlQYXJhbVNlcmlhbGl6ZXIgPSB2b2lkIDA7XG52YXIgZnBfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9mcFwiKTtcbmZ1bmN0aW9uIHNlYXJjaFF1ZXJ5UGFyYW1TZXJpYWxpemVyKHBhcmFtcykge1xuICAgIGlmICgoMCwgZnBfMS5pc05vdERlZmluZWQpKHBhcmFtcykpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgc2VyaWFsaXplZFBhcmFtID0gc2VhcmNoUGFyYW1TZXJpYWxpemVyKHBhcmFtcyk7XG4gICAgaWYgKHNlcmlhbGl6ZWRQYXJhbS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICc/JyArIHNlcmlhbGl6ZWRQYXJhbTtcbiAgICB9XG59XG5leHBvcnRzLnNlYXJjaFF1ZXJ5UGFyYW1TZXJpYWxpemVyID0gc2VhcmNoUXVlcnlQYXJhbVNlcmlhbGl6ZXI7XG5mdW5jdGlvbiBzZWFyY2hQYXJhbVNlcmlhbGl6ZXIocGFyYW1zKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHBhcmFtcylcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGtleSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplRm9yVXJpKGtleSwgdmFsdWUpO1xuICAgIH0pXG4gICAgICAgIC5qb2luKCcmJyk7XG59XG5leHBvcnRzLnNlYXJjaFBhcmFtU2VyaWFsaXplciA9IHNlYXJjaFBhcmFtU2VyaWFsaXplcjtcbmZ1bmN0aW9uIHNlYXJjaFBhcmFtRGVzZXJpYWxpemVyKHN0cikge1xuICAgIGlmICgoMCwgZnBfMS5pc05vdERlZmluZWQpKHN0cikgfHwgc3RyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoc3RyXG4gICAgICAgIC5zcGxpdCgnJicpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc3BsaXQoJz0nKTsgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGsgPSBfYVswXSwgdiA9IF9hWzFdO1xuICAgICAgICByZXR1cm4gKHYuaW5jbHVkZXMoJywnKSA/IFtrLCB2LnNwbGl0KCcsJyldIDogW2ssIHZdKTtcbiAgICB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgayA9IF9hWzBdLCB2ID0gX2FbMV07XG4gICAgICAgIHJldHVybiAodHlwZW9mIHYgPT09ICdzdHJpbmcnID8gW2ssIGRlY29kZSh2KV0gOiBbaywgdi5tYXAoZGVjb2RlKV0pO1xuICAgIH0pKTtcbn1cbmV4cG9ydHMuc2VhcmNoUGFyYW1EZXNlcmlhbGl6ZXIgPSBzZWFyY2hQYXJhbURlc2VyaWFsaXplcjtcbmZ1bmN0aW9uIHNlcmlhbGl6ZUZvclVyaShrZXksIHZhbHVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChrZXksIFwiPVwiKS5jb25jYXQodmFsdWUubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiBlbmNvZGUodik7IH0pLmpvaW4oJywnKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGtleSwgXCI9XCIpLmNvbmNhdChlbmNvZGUodmFsdWUpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChrZXksIFwiPVwiKS5jb25jYXQodmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVuY29kZShzdHIpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvLC9nLCAnJTJDJyk7XG59XG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSShzdHIpLnJlcGxhY2UoLyUyQy9nLCAnLCcpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVybEZvcm1EYXRhID0gdm9pZCAwO1xudmFyIHNlYXJjaF9xdWVyeV9wYXJhbV9zZXJpYWxpemVyXzEgPSByZXF1aXJlKFwiLi9zZWFyY2gtcXVlcnktcGFyYW0tc2VyaWFsaXplclwiKTtcbnZhciBVcmxGb3JtRGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBVcmxGb3JtRGF0YShmcm9tU3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLmRhdGEgPSAoMCwgc2VhcmNoX3F1ZXJ5X3BhcmFtX3NlcmlhbGl6ZXJfMS5zZWFyY2hQYXJhbURlc2VyaWFsaXplcikoZnJvbVN0cmluZyk7XG4gICAgfVxuICAgIFVybEZvcm1EYXRhLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmRhdGFba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gICAgVXJsRm9ybURhdGEucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldO1xuICAgIH07XG4gICAgVXJsRm9ybURhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIHNlYXJjaF9xdWVyeV9wYXJhbV9zZXJpYWxpemVyXzEuc2VhcmNoUGFyYW1TZXJpYWxpemVyKSh0aGlzLmRhdGEpO1xuICAgIH07XG4gICAgcmV0dXJuIFVybEZvcm1EYXRhO1xufSgpKTtcbmV4cG9ydHMuVXJsRm9ybURhdGEgPSBVcmxGb3JtRGF0YTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyogR2VuZXJhdGVkIGZpbGUgd2l0aCBcInNjcmlwdHMvZ2VuZXJhdGUtbWV0YXNkay50c1wiICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVORFBPSU5UX0RFRlMgPSB2b2lkIDA7XG5leHBvcnRzLkVORFBPSU5UX0RFRlMgPSBbXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi9hdWRpby90ZXh0L2F1ZGlvLXRyYW5zY3JpcHRpb24vXCIsXG4gICAgICAgIFwiaW5wdXRUeXBlXCI6IFwiYXVkaW9cIixcbiAgICAgICAgXCJvdXRwdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwiYXVkaW8tdHJhbnNjcmlwdGlvblwiLFxuICAgICAgICBcIm1vZGVsc1wiOiBbXG4gICAgICAgICAgICBcImNvcXVpX2VuZ2xpc2hfaHVnZV92b2NhYlwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGVmYXVsdE1vZGVsXCI6IFwiY29xdWlfZW5nbGlzaF9odWdlX3ZvY2FiXCIsXG4gICAgICAgIFwiaW5wdXRCb2R5Q29udGVudFR5cGVcIjogXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIsXG4gICAgICAgIFwib3V0cHV0Qm9keUNvbnRlbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInByZWRpY3Rpb24tc3RhbmRhcmQtb3V0cHV0XCIsXG4gICAgICAgICAgICBcInByZWRpY3Rpb25UeXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbXNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImF1ZGlvXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYXVkaW9cIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVybFwiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImF1ZGlvX3VybFwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwibGFuZ3VhZ2VcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ1cmxcIjogXCIvaW1hZ2UvaW1hZ2UvYmFja2dyb3VuZC1yZW1vdmFsL1wiLFxuICAgICAgICBcImlucHV0VHlwZVwiOiBcImltYWdlXCIsXG4gICAgICAgIFwib3V0cHV0VHlwZVwiOiBcImltYWdlXCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJiYWNrZ3JvdW5kLXJlbW92YWxcIixcbiAgICAgICAgXCJtb2RlbHNcIjogW1xuICAgICAgICAgICAgXCJtb2JpbGVuZXRcIixcbiAgICAgICAgICAgIFwieGNlcHRpb25cIlxuICAgICAgICBdLFxuICAgICAgICBcImRlZmF1bHRNb2RlbFwiOiBcIm1vYmlsZW5ldFwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLFxuICAgICAgICBcIm91dHB1dEJvZHlDb250ZW50VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJiaW5hcnlcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpbWFnZVwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidXJsXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaW1hZ2VfdXJsXCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL2ltYWdlL2ltYWdlL2NvbG9yaXphdGlvbi9cIixcbiAgICAgICAgXCJpbnB1dFR5cGVcIjogXCJpbWFnZVwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJpbWFnZVwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwiY29sb3JpemF0aW9uXCIsXG4gICAgICAgIFwibW9kZWxzXCI6IFtcbiAgICAgICAgICAgIFwiZGVvbGRpZnktYXJ0aXN0aWNcIixcbiAgICAgICAgICAgIFwiZGVvbGRpZnktc3RhYmxlXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJkZW9sZGlmeS1zdGFibGVcIixcbiAgICAgICAgXCJpbnB1dEJvZHlDb250ZW50VHlwZVwiOiBcIm11bHRpcGFydC9mb3JtLWRhdGFcIixcbiAgICAgICAgXCJvdXRwdXRCb2R5Q29udGVudFR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYmluYXJ5XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbXNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImltYWdlXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVybFwiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImltYWdlX3VybFwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi9pbWFnZS9pbWFnZS9mYWNlLWJsdXJpbmcvXCIsXG4gICAgICAgIFwiaW5wdXRUeXBlXCI6IFwiaW1hZ2VcIixcbiAgICAgICAgXCJvdXRwdXRUeXBlXCI6IFwiaW1hZ2VcIixcbiAgICAgICAgXCJ0YXNrTmFtZVwiOiBcImZhY2UtYmx1cmluZ1wiLFxuICAgICAgICBcIm1vZGVsc1wiOiBbXG4gICAgICAgICAgICBcImFnZWl0Z2V5XCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJhZ2VpdGdleVwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLFxuICAgICAgICBcIm91dHB1dEJvZHlDb250ZW50VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJiaW5hcnlcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpbWFnZVwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidXJsXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaW1hZ2VfdXJsXCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL2ltYWdlL2ltYWdlL3VuY29sb3JpemF0aW9uL1wiLFxuICAgICAgICBcImlucHV0VHlwZVwiOiBcImltYWdlXCIsXG4gICAgICAgIFwib3V0cHV0VHlwZVwiOiBcImltYWdlXCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJ1bmNvbG9yaXphdGlvblwiLFxuICAgICAgICBcIm1vZGVsc1wiOiBbXG4gICAgICAgICAgICBcInYxXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJ2MVwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLFxuICAgICAgICBcIm91dHB1dEJvZHlDb250ZW50VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJiaW5hcnlcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpbWFnZVwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidXJsXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaW1hZ2VfdXJsXCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL2ltYWdlL3RleHQvYXNjaWlmeS9cIixcbiAgICAgICAgXCJpbnB1dFR5cGVcIjogXCJpbWFnZVwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJhc2NpaWZ5XCIsXG4gICAgICAgIFwibW9kZWxzXCI6IFtcbiAgICAgICAgICAgIFwicmFtZXNoLWFkaXR5YVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGVmYXVsdE1vZGVsXCI6IFwicmFtZXNoLWFkaXR5YVwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLFxuICAgICAgICBcIm91dHB1dEJvZHlDb250ZW50VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJwcmVkaWN0aW9uLXN0YW5kYXJkLW91dHB1dFwiLFxuICAgICAgICAgICAgXCJwcmVkaWN0aW9uVHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbWFnZVwiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImltYWdlXCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1cmxcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpbWFnZV91cmxcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ1cmxcIjogXCIvaW1hZ2UvdGV4dC9jbGFzc2lmaWNhdGlvbi9cIixcbiAgICAgICAgXCJpbnB1dFR5cGVcIjogXCJpbWFnZVwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJjbGFzc2lmaWNhdGlvblwiLFxuICAgICAgICBcIm1vZGVsc1wiOiBbXG4gICAgICAgICAgICBcImFsZXhuZXRcIixcbiAgICAgICAgICAgIFwiY29udm5leHRfYmFzZVwiLFxuICAgICAgICAgICAgXCJjb252bmV4dF9sYXJnZVwiLFxuICAgICAgICAgICAgXCJjb252bmV4dF9zbWFsbFwiLFxuICAgICAgICAgICAgXCJjb252bmV4dF90aW55XCIsXG4gICAgICAgICAgICBcImRlbnNlbmV0MTIxXCIsXG4gICAgICAgICAgICBcImRlbnNlbmV0MTYxXCIsXG4gICAgICAgICAgICBcImRlbnNlbmV0MTY5XCIsXG4gICAgICAgICAgICBcImRlbnNlbmV0MjAxXCIsXG4gICAgICAgICAgICBcImVmZmljaWVudG5ldF9iMFwiLFxuICAgICAgICAgICAgXCJlZmZpY2llbnRuZXRfYjFfdjFcIixcbiAgICAgICAgICAgIFwiZWZmaWNpZW50bmV0X2IxX3YyXCIsXG4gICAgICAgICAgICBcImVmZmljaWVudG5ldF9iMlwiLFxuICAgICAgICAgICAgXCJlZmZpY2llbnRuZXRfYjNcIixcbiAgICAgICAgICAgIFwiZWZmaWNpZW50bmV0X2I0XCIsXG4gICAgICAgICAgICBcImVmZmljaWVudG5ldF9iNVwiLFxuICAgICAgICAgICAgXCJlZmZpY2llbnRuZXRfYjZcIixcbiAgICAgICAgICAgIFwiZWZmaWNpZW50bmV0X2I3XCIsXG4gICAgICAgICAgICBcImVmZmljaWVudG5ldF92Ml9sXCIsXG4gICAgICAgICAgICBcImVmZmljaWVudG5ldF92Ml9tXCIsXG4gICAgICAgICAgICBcImVmZmljaWVudG5ldF92Ml9zXCIsXG4gICAgICAgICAgICBcImdvb2dsZW5ldFwiLFxuICAgICAgICAgICAgXCJnb29nbGVuZXRfcXVhbnRpemVkX2ZiZ2VtbV92MVwiLFxuICAgICAgICAgICAgXCJpbmNlcHRpb25fdjNcIixcbiAgICAgICAgICAgIFwiaW5jZXB0aW9uX3YzX2ZiZ2VtbV92MVwiLFxuICAgICAgICAgICAgXCJtbmFzbmV0MF81XCIsXG4gICAgICAgICAgICBcIm1uYXNuZXQwXzc1XCIsXG4gICAgICAgICAgICBcIm1uYXNuZXQxXzBcIixcbiAgICAgICAgICAgIFwibW5hc25ldDFfM1wiLFxuICAgICAgICAgICAgXCJtb2JpbGVuZXRfdjJfcXVhbnRpemVkX3FubnBhY2tfdjFcIixcbiAgICAgICAgICAgIFwibW9iaWxlbmV0X3YyX3YxXCIsXG4gICAgICAgICAgICBcIm1vYmlsZW5ldF92Ml92MlwiLFxuICAgICAgICAgICAgXCJtb2JpbGVuZXRfdjNfbGFyZ2VfcXVhbnRpemVkX3FubnBhY2tfdjFcIixcbiAgICAgICAgICAgIFwibW9iaWxlbmV0X3YzX2xhcmdlX3YxXCIsXG4gICAgICAgICAgICBcIm1vYmlsZW5ldF92M19sYXJnZV92MlwiLFxuICAgICAgICAgICAgXCJtb2JpbGVuZXRfdjNfc21hbGxcIixcbiAgICAgICAgICAgIFwicmVnbmV0X3hfMTZnZl92MVwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeF8xNmdmX3YyXCIsXG4gICAgICAgICAgICBcInJlZ25ldF94XzFfNmdmX3YxXCIsXG4gICAgICAgICAgICBcInJlZ25ldF94XzFfNmdmX3YyXCIsXG4gICAgICAgICAgICBcInJlZ25ldF94XzMyZ2ZfdjFcIixcbiAgICAgICAgICAgIFwicmVnbmV0X3hfMzJnZl92MlwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeF8zXzJnZl92MVwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeF8zXzJnZl92MlwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeF80MDBtZl92MVwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeF80MDBtZl92MlwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeF84MDBtZl92MVwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeF84MDBtZl92MlwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeF84Z2ZfdjFcIixcbiAgICAgICAgICAgIFwicmVnbmV0X3hfOGdmX3YyXCIsXG4gICAgICAgICAgICBcInJlZ25ldF95XzEyOGdmX3N3YWdfZTJlX3YxXCIsXG4gICAgICAgICAgICBcInJlZ25ldF95XzEyOGdmX3N3YWdfbGluZWFyX3YxXCIsXG4gICAgICAgICAgICBcInJlZ25ldF95XzE2Z2Zfc3dhZ19lMmVfdjFcIixcbiAgICAgICAgICAgIFwicmVnbmV0X3lfMTZnZl9zd2FnX2xpbmVhcl92MVwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeV8xNmdmX3YxXCIsXG4gICAgICAgICAgICBcInJlZ25ldF95XzE2Z2ZfdjJcIixcbiAgICAgICAgICAgIFwicmVnbmV0X3lfMV82Z2ZfdjFcIixcbiAgICAgICAgICAgIFwicmVnbmV0X3lfMV82Z2ZfdjJcIixcbiAgICAgICAgICAgIFwicmVnbmV0X3lfMzJnZl9zd2FnX2UyZV92MVwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeV8zMmdmX3N3YWdfbGluZWFyX3YxXCIsXG4gICAgICAgICAgICBcInJlZ25ldF95XzMyZ2ZfdjFcIixcbiAgICAgICAgICAgIFwicmVnbmV0X3lfMzJnZl92MlwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeV8zXzJnZl92MVwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeV8zXzJnZl92MlwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeV80MDBtZl92MVwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeV80MDBtZl92MlwiLFxuICAgICAgICAgICAgXCJyZWduZXRfeV84Z2ZfdjFcIixcbiAgICAgICAgICAgIFwicmVnbmV0X3lfOGdmX3YyXCIsXG4gICAgICAgICAgICBcInJlc25ldDE1Ml92MVwiLFxuICAgICAgICAgICAgXCJyZXNuZXQxNTJfdjJcIixcbiAgICAgICAgICAgIFwicmVzbmV0MThcIixcbiAgICAgICAgICAgIFwicmVzbmV0MThfcXVhbnRpemVkX2ZiZ2VtbV92MVwiLFxuICAgICAgICAgICAgXCJyZXNuZXQzNFwiLFxuICAgICAgICAgICAgXCJyZXNuZXQ1MF9xdWFudGl6ZWRfZmJnZW1tX3YxXCIsXG4gICAgICAgICAgICBcInJlc25ldDUwX3F1YW50aXplZF9mYmdlbW1fdjJcIixcbiAgICAgICAgICAgIFwicmVzbmV0NTBfdjFcIixcbiAgICAgICAgICAgIFwicmVzbmV0NTBfdjJcIixcbiAgICAgICAgICAgIFwicmVzbmV4dDEwMV8zMng4ZF9xdWFudGl6ZWRfZmJnZW1tX3YxXCIsXG4gICAgICAgICAgICBcInJlc25leHQxMDFfMzJ4OGRfcXVhbnRpemVkX2ZiZ2VtbV92MlwiLFxuICAgICAgICAgICAgXCJyZXNuZXh0MTAxXzMyeDhkX3YxXCIsXG4gICAgICAgICAgICBcInJlc25leHQxMDFfMzJ4OGRfdjJcIixcbiAgICAgICAgICAgIFwicmVzbmV4dDEwMV82NHg0ZF9xdWFudGl6ZWRfZmJnZW1tX3YxXCIsXG4gICAgICAgICAgICBcInJlc25leHQxMDFfNjR4NGRfdjFcIixcbiAgICAgICAgICAgIFwicmVzbmV4dDUwXzMyeDRkX3YxXCIsXG4gICAgICAgICAgICBcInJlc25leHQ1MF8zMng0ZF92MlwiLFxuICAgICAgICAgICAgXCJzaHVmZmxlbmV0X3YyX3gwXzVcIixcbiAgICAgICAgICAgIFwic2h1ZmZsZW5ldF92Ml94MF81X3F1YW50aXplZF9mYmdlbW1fdjFcIixcbiAgICAgICAgICAgIFwic2h1ZmZsZW5ldF92Ml94MV8wXCIsXG4gICAgICAgICAgICBcInNodWZmbGVuZXRfdjJfeDFfMF9xdWFudGl6ZWRfZmJnZW1tX3YxXCIsXG4gICAgICAgICAgICBcInNodWZmbGVuZXRfdjJfeDFfNVwiLFxuICAgICAgICAgICAgXCJzaHVmZmxlbmV0X3YyX3gxXzVfcXVhbnRpemVkX2ZiZ2VtbV92MVwiLFxuICAgICAgICAgICAgXCJzaHVmZmxlbmV0X3YyX3gyXzBcIixcbiAgICAgICAgICAgIFwic2h1ZmZsZW5ldF92Ml94Ml8wX3F1YW50aXplZF9mYmdlbW1fdjFcIixcbiAgICAgICAgICAgIFwic3F1ZWV6ZW5ldDFfMFwiLFxuICAgICAgICAgICAgXCJzcXVlZXplbmV0MV8xXCIsXG4gICAgICAgICAgICBcInN3aW5fYlwiLFxuICAgICAgICAgICAgXCJzd2luX3NcIixcbiAgICAgICAgICAgIFwic3dpbl90XCIsXG4gICAgICAgICAgICBcInZnZzExXCIsXG4gICAgICAgICAgICBcInZnZzExX2JuXCIsXG4gICAgICAgICAgICBcInZnZzEzXCIsXG4gICAgICAgICAgICBcInZnZzEzX2JuXCIsXG4gICAgICAgICAgICBcInZnZzE2X2JuXCIsXG4gICAgICAgICAgICBcInZnZzE2X3YxXCIsXG4gICAgICAgICAgICBcInZnZzE5XCIsXG4gICAgICAgICAgICBcInZnZzE5X2JuXCIsXG4gICAgICAgICAgICBcInZpdF9iXzE2X3N3YWdfZTJlX3YxXCIsXG4gICAgICAgICAgICBcInZpdF9iXzE2X3N3YWdfbGluZWFyX3YxXCIsXG4gICAgICAgICAgICBcInZpdF9iXzE2X3YxXCIsXG4gICAgICAgICAgICBcInZpdF9iXzMyXCIsXG4gICAgICAgICAgICBcInZpdF9oXzE0X3N3YWdfZTJlX3YxXCIsXG4gICAgICAgICAgICBcInZpdF9oXzE0X3N3YWdfbGluZWFyX3YxXCIsXG4gICAgICAgICAgICBcInZpdF9sXzE2X3N3YWdfZTJlX3YxXCIsXG4gICAgICAgICAgICBcInZpdF9sXzE2X3N3YWdfbGluZWFyX3YxXCIsXG4gICAgICAgICAgICBcInZpdF9sXzE2X3YxXCIsXG4gICAgICAgICAgICBcInZpdF9sXzMyXCIsXG4gICAgICAgICAgICBcIndpZGVfcmVzbmV0MTAxXzJfdjFcIixcbiAgICAgICAgICAgIFwid2lkZV9yZXNuZXQxMDFfMl92MlwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGVmYXVsdE1vZGVsXCI6IFwiYWxleG5ldFwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLFxuICAgICAgICBcIm91dHB1dEJvZHlDb250ZW50VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJwcmVkaWN0aW9uLXN0YW5kYXJkLW91dHB1dFwiLFxuICAgICAgICAgICAgXCJwcmVkaWN0aW9uVHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbWFnZVwiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImltYWdlXCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1cmxcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpbWFnZV91cmxcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0b3Bfa1wiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi9pbWFnZS90ZXh0L29jci9cIixcbiAgICAgICAgXCJpbnB1dFR5cGVcIjogXCJpbWFnZVwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJvY3JcIixcbiAgICAgICAgXCJtb2RlbHNcIjogW1xuICAgICAgICAgICAgXCJlYXN5LW9jclwiLFxuICAgICAgICAgICAgXCJ0ZXNzZXJhY3QtZGVmYXVsdFwiLFxuICAgICAgICAgICAgXCJ0ZXNzZXJhY3QtZGVub2lzaW5nXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJ0ZXNzZXJhY3QtZGVub2lzaW5nXCIsXG4gICAgICAgIFwiaW5wdXRCb2R5Q29udGVudFR5cGVcIjogXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIsXG4gICAgICAgIFwib3V0cHV0Qm9keUNvbnRlbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInByZWRpY3Rpb24tc3RhbmRhcmQtb3V0cHV0XCIsXG4gICAgICAgICAgICBcInByZWRpY3Rpb25UeXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbXNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImltYWdlXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVybFwiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImltYWdlX3VybFwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic291cmNlX2xhbmd1YWdlXCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL3RleHQvaW1hZ2UvaW1hZ2UtZ2VuZXJhdGlvbi9cIixcbiAgICAgICAgXCJpbnB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwib3V0cHV0VHlwZVwiOiBcImltYWdlXCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJpbWFnZS1nZW5lcmF0aW9uXCIsXG4gICAgICAgIFwibW9kZWxzXCI6IFtcbiAgICAgICAgICAgIFwiZHJlYW0tc3R1ZGlvXCIsXG4gICAgICAgICAgICBcInN0YWJsZS1kaWZmdXNpb25cIlxuICAgICAgICBdLFxuICAgICAgICBcImRlZmF1bHRNb2RlbFwiOiBcInN0YWJsZS1kaWZmdXNpb25cIixcbiAgICAgICAgXCJpbnB1dEJvZHlDb250ZW50VHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgICAgICBcIm91dHB1dEJvZHlDb250ZW50VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJiaW5hcnlcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicHJvbXB0XCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJzYW1wbGVzXCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic3RlcHNcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJzZWVkXCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL3RleHQvdGV4dC9hZC1nZW5lcmF0aW9uL1wiLFxuICAgICAgICBcImlucHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJvdXRwdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwiYWQtZ2VuZXJhdGlvblwiLFxuICAgICAgICBcIm1vZGVsc1wiOiBbXG4gICAgICAgICAgICBcImdwdC1qXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJncHQtalwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIFwib3V0cHV0Qm9keUNvbnRlbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVua25vd25cIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJrZXl3b3Jkc1wiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi90ZXh0L3RleHQvYXJ0aWNsZS1nZW5lcmF0aW9uL1wiLFxuICAgICAgICBcImlucHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJvdXRwdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwiYXJ0aWNsZS1nZW5lcmF0aW9uXCIsXG4gICAgICAgIFwibW9kZWxzXCI6IFtcbiAgICAgICAgICAgIFwiZmFzdC1ncHQtalwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGVmYXVsdE1vZGVsXCI6IFwiZmFzdC1ncHQtalwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIFwib3V0cHV0Qm9keUNvbnRlbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVua25vd25cIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGl0bGVcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ1cmxcIjogXCIvdGV4dC90ZXh0L2F1dG9jb3JyZWN0L1wiLFxuICAgICAgICBcImlucHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJvdXRwdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwiYXV0b2NvcnJlY3RcIixcbiAgICAgICAgXCJtb2RlbHNcIjogW1xuICAgICAgICAgICAgXCJmbGV4dWR5LXQ1LWJhc2UtbXVsdGktc2VudGVuY2UtZG9jdG9yXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJmbGV4dWR5LXQ1LWJhc2UtbXVsdGktc2VudGVuY2UtZG9jdG9yXCIsXG4gICAgICAgIFwiaW5wdXRCb2R5Q29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgXCJvdXRwdXRCb2R5Q29udGVudFR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJlZGljdGlvbi1zdGFuZGFyZC1vdXRwdXRcIixcbiAgICAgICAgICAgIFwicHJlZGljdGlvblR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic2VudGVuY2VcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi90ZXh0L3RleHQvZW1vdGlvbi1yZWNvZ25pdGlvbi9cIixcbiAgICAgICAgXCJpbnB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwib3V0cHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJ0YXNrTmFtZVwiOiBcImVtb3Rpb24tcmVjb2duaXRpb25cIixcbiAgICAgICAgXCJtb2RlbHNcIjogW1xuICAgICAgICAgICAgXCJtcm04NDg4LXQ1LWJhc2UtZmluZXR1bmVkLWVtb3Rpb25cIlxuICAgICAgICBdLFxuICAgICAgICBcImRlZmF1bHRNb2RlbFwiOiBcIm1ybTg0ODgtdDUtYmFzZS1maW5ldHVuZWQtZW1vdGlvblwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIFwib3V0cHV0Qm9keUNvbnRlbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInByZWRpY3Rpb24tc3RhbmRhcmQtb3V0cHV0XCIsXG4gICAgICAgICAgICBcInByZWRpY3Rpb25UeXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbXNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi90ZXh0L3RleHQvaGF0ZS1zcGVlY2gtZGV0ZWN0aW9uL1wiLFxuICAgICAgICBcImlucHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJvdXRwdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwiaGF0ZS1zcGVlY2gtZGV0ZWN0aW9uXCIsXG4gICAgICAgIFwibW9kZWxzXCI6IFtcbiAgICAgICAgICAgIFwiSGF0ZS1zcGVlY2gtQ05FUkctZGVoYXRlYmVydC1tb25vLWVuZ2xpc2hcIlxuICAgICAgICBdLFxuICAgICAgICBcImRlZmF1bHRNb2RlbFwiOiBcIkhhdGUtc3BlZWNoLUNORVJHLWRlaGF0ZWJlcnQtbW9uby1lbmdsaXNoXCIsXG4gICAgICAgIFwiaW5wdXRCb2R5Q29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgXCJvdXRwdXRCb2R5Q29udGVudFR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJlZGljdGlvbi1zdGFuZGFyZC1vdXRwdXRcIixcbiAgICAgICAgICAgIFwicHJlZGljdGlvblR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL3RleHQvdGV4dC9pbnRlbnQtY2xhc3NpZmljYXRpb24vXCIsXG4gICAgICAgIFwiaW5wdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJpbnRlbnQtY2xhc3NpZmljYXRpb25cIixcbiAgICAgICAgXCJtb2RlbHNcIjogW1xuICAgICAgICAgICAgXCJmYXN0LWdwdC1qXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJmYXN0LWdwdC1qXCIsXG4gICAgICAgIFwiaW5wdXRCb2R5Q29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgXCJvdXRwdXRCb2R5Q29udGVudFR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidW5rbm93blwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL3RleHQvdGV4dC9rZXl3b3JkLWV4dHJhY3Rpb24vXCIsXG4gICAgICAgIFwiaW5wdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJrZXl3b3JkLWV4dHJhY3Rpb25cIixcbiAgICAgICAgXCJtb2RlbHNcIjogW1xuICAgICAgICAgICAgXCJrZXliZXJ0LXBhcmFwaHJhc2UtTWluaUxNLUw2LXYyXCIsXG4gICAgICAgICAgICBcImtleWJlcnQtcGFyYXBocmFzZS1tdWx0aWxpbmd1YWwtTWluaUxNLUwxMi12MlwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGVmYXVsdE1vZGVsXCI6IFwia2V5YmVydC1wYXJhcGhyYXNlLU1pbmlMTS1MNi12MlwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIFwib3V0cHV0Qm9keUNvbnRlbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInByZWRpY3Rpb24tc3RhbmRhcmQtb3V0cHV0XCIsXG4gICAgICAgICAgICBcInByZWRpY3Rpb25UeXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbXNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi90ZXh0L3RleHQvbGFuZ3VhZ2UtZGV0ZWN0aW9uL1wiLFxuICAgICAgICBcImlucHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJvdXRwdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwibGFuZ3VhZ2UtZGV0ZWN0aW9uXCIsXG4gICAgICAgIFwibW9kZWxzXCI6IFtcbiAgICAgICAgICAgIFwidG9mdHJ1cC1ldGFsLTIwMjFcIixcbiAgICAgICAgICAgIFwieGxtLXJvYmVydGEtYmFzZS1sYW5ndWFnZS1kZXRlY3Rpb25cIlxuICAgICAgICBdLFxuICAgICAgICBcImRlZmF1bHRNb2RlbFwiOiBcInhsbS1yb2JlcnRhLWJhc2UtbGFuZ3VhZ2UtZGV0ZWN0aW9uXCIsXG4gICAgICAgIFwiaW5wdXRCb2R5Q29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgXCJvdXRwdXRCb2R5Q29udGVudFR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJlZGljdGlvbi1zdGFuZGFyZC1vdXRwdXRcIixcbiAgICAgICAgICAgIFwicHJlZGljdGlvblR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL3RleHQvdGV4dC9sYW5ndWFnZS1nZW5lcmF0aW9uL1wiLFxuICAgICAgICBcImlucHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJvdXRwdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwibGFuZ3VhZ2UtZ2VuZXJhdGlvblwiLFxuICAgICAgICBcIm1vZGVsc1wiOiBbXG4gICAgICAgICAgICBcIkVsZXV0aGVyQUktZ3B0LW5lby0yXzdCXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJibG9vbS01NjBtXCIsXG4gICAgICAgIFwiaW5wdXRCb2R5Q29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgXCJvdXRwdXRCb2R5Q29udGVudFR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJlZGljdGlvbi1zdGFuZGFyZC1vdXRwdXRcIixcbiAgICAgICAgICAgIFwicHJlZGljdGlvblR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL3RleHQvdGV4dC9uYW1lZC1lbnRpdHktcmVjb2duaXRpb24vXCIsXG4gICAgICAgIFwiaW5wdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJuYW1lZC1lbnRpdHktcmVjb2duaXRpb25cIixcbiAgICAgICAgXCJtb2RlbHNcIjogW1xuICAgICAgICAgICAgXCJkYm1kei1iZXJ0LWxhcmdlLWNhc2VkLWZpbmV0dW5lZC1jb25sbDAzLWVuZ2xpc2hcIlxuICAgICAgICBdLFxuICAgICAgICBcImRlZmF1bHRNb2RlbFwiOiBcImRibWR6LWJlcnQtbGFyZ2UtY2FzZWQtZmluZXR1bmVkLWNvbmxsMDMtZW5nbGlzaFwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIFwib3V0cHV0Qm9keUNvbnRlbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInByZWRpY3Rpb24tc3RhbmRhcmQtb3V0cHV0XCIsXG4gICAgICAgICAgICBcInByZWRpY3Rpb25UeXBlXCI6IFwiYXJyYXlcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL3RleHQvdGV4dC9uZXh0LXNlbnRlbmNlLXByZWRpY3Rpb24vXCIsXG4gICAgICAgIFwiaW5wdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJuZXh0LXNlbnRlbmNlLXByZWRpY3Rpb25cIixcbiAgICAgICAgXCJtb2RlbHNcIjogW1xuICAgICAgICAgICAgXCJiZXJ0LWJhc2UtdW5jYXNlZFwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGVmYXVsdE1vZGVsXCI6IFwiYmVydC1iYXNlLXVuY2FzZWRcIixcbiAgICAgICAgXCJpbnB1dEJvZHlDb250ZW50VHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgICAgICBcIm91dHB1dEJvZHlDb250ZW50VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJwcmVkaWN0aW9uLXN0YW5kYXJkLW91dHB1dFwiLFxuICAgICAgICAgICAgXCJwcmVkaWN0aW9uVHlwZVwiOiBcIm51bWJlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJzZW50ZW5jZV8xXCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInNlbnRlbmNlXzJcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi90ZXh0L3RleHQvbmV4dC13b3JkLXByZWRpY3Rpb24vXCIsXG4gICAgICAgIFwiaW5wdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJuZXh0LXdvcmQtcHJlZGljdGlvblwiLFxuICAgICAgICBcIm1vZGVsc1wiOiBbXG4gICAgICAgICAgICBcImFsYmVydC1iYXNlLXYyXCIsXG4gICAgICAgICAgICBcImJlcnQtYmFzZS11bmNhc2VkXCIsXG4gICAgICAgICAgICBcImRpc3RpbGJlcnQtYmFzZS11bmNhc2VkXCIsXG4gICAgICAgICAgICBcInJvYmVydGEtYmFzZVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGVmYXVsdE1vZGVsXCI6IFwiZGlzdGlsYmVydC1iYXNlLXVuY2FzZWRcIixcbiAgICAgICAgXCJpbnB1dEJvZHlDb250ZW50VHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgICAgICBcIm91dHB1dEJvZHlDb250ZW50VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJwcmVkaWN0aW9uLXN0YW5kYXJkLW91dHB1dFwiLFxuICAgICAgICAgICAgXCJwcmVkaWN0aW9uVHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJzZW50ZW5jZVwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL3RleHQvdGV4dC9wbHVyYWwvXCIsXG4gICAgICAgIFwiaW5wdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJwbHVyYWxcIixcbiAgICAgICAgXCJtb2RlbHNcIjogW1xuICAgICAgICAgICAgXCJpbmZsZWN0XCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJpbmZsZWN0XCIsXG4gICAgICAgIFwiaW5wdXRCb2R5Q29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgXCJvdXRwdXRCb2R5Q29udGVudFR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJlZGljdGlvbi1zdGFuZGFyZC1vdXRwdXRcIixcbiAgICAgICAgICAgIFwicHJlZGljdGlvblR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwid29yZFwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY291bnRcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ1cmxcIjogXCIvdGV4dC90ZXh0L3Byb2dyYW1taW5nLWxhbmd1YWdlLWdlbmVyYXRpb24vXCIsXG4gICAgICAgIFwiaW5wdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJwcm9ncmFtbWluZy1sYW5ndWFnZS1nZW5lcmF0aW9uXCIsXG4gICAgICAgIFwibW9kZWxzXCI6IFtcbiAgICAgICAgICAgIFwic2VudGRleC1HUHlUXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJzZW50ZGV4LUdQeVRcIixcbiAgICAgICAgXCJpbnB1dEJvZHlDb250ZW50VHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgICAgICBcIm91dHB1dEJvZHlDb250ZW50VHlwZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJwcmVkaWN0aW9uLXN0YW5kYXJkLW91dHB1dFwiLFxuICAgICAgICAgICAgXCJwcmVkaWN0aW9uVHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjb2RlX3NuaXBwZXRcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi90ZXh0L3RleHQvcXVlc3Rpb24tYW5zd2VyaW5nL1wiLFxuICAgICAgICBcImlucHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJvdXRwdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwicXVlc3Rpb24tYW5zd2VyaW5nXCIsXG4gICAgICAgIFwibW9kZWxzXCI6IFtcbiAgICAgICAgICAgIFwiZGVlcHNldC1yb2JlcnRhLWJhc2Utc3F1YWQyXCIsXG4gICAgICAgICAgICBcImRlZXBzZXRfYmVydC1iYXNlLWNhc2VkLXNxdWFkMlwiLFxuICAgICAgICAgICAgXCJkaXN0aWxiZXJ0LWJhc2UtY2FzZWQtZGlzdGlsbGVkLXNxdWFkXCIsXG4gICAgICAgICAgICBcIm1mZWItYWxiZXJ0LXh4bGFyZ2UtdjItc3F1YWQyXCIsXG4gICAgICAgICAgICBcIm1ybTg0ODgtYmVydC10aW55LTUtZmluZXR1bmVkLXNxdWFkdjJcIlxuICAgICAgICBdLFxuICAgICAgICBcImRlZmF1bHRNb2RlbFwiOiBcImRlZXBzZXRfYmVydC1iYXNlLWNhc2VkLXNxdWFkMlwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIFwib3V0cHV0Qm9keUNvbnRlbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInByZWRpY3Rpb24tc3RhbmRhcmQtb3V0cHV0XCIsXG4gICAgICAgICAgICBcInByZWRpY3Rpb25UeXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbXNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNvbnRleHRcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicXVlc3Rpb25cIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi90ZXh0L3RleHQvc2VudGVuY2UtcGFyYXBocmFzZXIvXCIsXG4gICAgICAgIFwiaW5wdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJzZW50ZW5jZS1wYXJhcGhyYXNlclwiLFxuICAgICAgICBcIm1vZGVsc1wiOiBbXG4gICAgICAgICAgICBcInJhbXNyaWdvdXRoYW1nLXQ1LWxhcmdlLXBhcmFwaHJhc2VyLWRpdmVyc2UtaGlnaC1xdWFsaXR5XCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJyYW1zcmlnb3V0aGFtZy10NS1sYXJnZS1wYXJhcGhyYXNlci1kaXZlcnNlLWhpZ2gtcXVhbGl0eVwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIFwib3V0cHV0Qm9keUNvbnRlbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInByZWRpY3Rpb24tc3RhbmRhcmQtb3V0cHV0XCIsXG4gICAgICAgICAgICBcInByZWRpY3Rpb25UeXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbXNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNvbnRleHRcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi90ZXh0L3RleHQvc2VudGltZW50LWFuYWx5c2lzL1wiLFxuICAgICAgICBcImlucHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJvdXRwdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwic2VudGltZW50LWFuYWx5c2lzXCIsXG4gICAgICAgIFwibW9kZWxzXCI6IFtcbiAgICAgICAgICAgIFwiZGlzdGlsYmVydC1iYXNlLXVuY2FzZWRcIixcbiAgICAgICAgICAgIFwiZGlzdGlsYmVydC1iYXNlLXVuY2FzZWQtZmluZXR1bmVkLXNzdC0yLWVuZ2xpc2hcIixcbiAgICAgICAgICAgIFwibmxwdG93bi1iZXJ0LWJhc2UtbXVsdGlsaW5ndWFsLXVuY2FzZWQtc2VudGltZW50XCIsXG4gICAgICAgICAgICBcInplcm8tc2hvdC1jbGFzc2lmaWNhdGlvbi1mYWNlYm9vay1iYXJ0LWxhcmdlLW1ubGlcIlxuICAgICAgICBdLFxuICAgICAgICBcImRlZmF1bHRNb2RlbFwiOiBcIm5scHRvd24tYmVydC1iYXNlLW11bHRpbGluZ3VhbC11bmNhc2VkLXNlbnRpbWVudFwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIFwib3V0cHV0Qm9keUNvbnRlbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInByZWRpY3Rpb24tc3RhbmRhcmQtb3V0cHV0XCIsXG4gICAgICAgICAgICBcInByZWRpY3Rpb25UeXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbXNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiaW5cIjogXCJmb3JtRGF0YVwiLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInVybFwiOiBcIi90ZXh0L3RleHQvc2ltaWxhcml0eS9cIixcbiAgICAgICAgXCJpbnB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwib3V0cHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJ0YXNrTmFtZVwiOiBcInNpbWlsYXJpdHlcIixcbiAgICAgICAgXCJtb2RlbHNcIjogW1xuICAgICAgICAgICAgXCJhbGwtTWluaUxNLUw2LXYyXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJhbGwtTWluaUxNLUw2LXYyXCIsXG4gICAgICAgIFwiaW5wdXRCb2R5Q29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgXCJvdXRwdXRCb2R5Q29udGVudFR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJlZGljdGlvbi1zdGFuZGFyZC1vdXRwdXRcIixcbiAgICAgICAgICAgIFwicHJlZGljdGlvblR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic2VudGVuY2VfMVwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJzZW50ZW5jZV8yXCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ1cmxcIjogXCIvdGV4dC90ZXh0L3N1bW1hcml6YXRpb24vXCIsXG4gICAgICAgIFwiaW5wdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcIm91dHB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwidGFza05hbWVcIjogXCJzdW1tYXJpemF0aW9uXCIsXG4gICAgICAgIFwibW9kZWxzXCI6IFtcbiAgICAgICAgICAgIFwiYmFydC1sYXJnZS1jbm5cIlxuICAgICAgICBdLFxuICAgICAgICBcImRlZmF1bHRNb2RlbFwiOiBcImJhcnQtbGFyZ2UtY25uXCIsXG4gICAgICAgIFwiaW5wdXRCb2R5Q29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgXCJvdXRwdXRCb2R5Q29udGVudFR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidW5rbm93blwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwidXJsXCI6IFwiL3RleHQvdGV4dC90cmFuc2xhdGlvbi9cIixcbiAgICAgICAgXCJpbnB1dFR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgIFwib3V0cHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJ0YXNrTmFtZVwiOiBcInRyYW5zbGF0aW9uXCIsXG4gICAgICAgIFwibW9kZWxzXCI6IFtcbiAgICAgICAgICAgIFwibmxsYi0yMDAtMy0zYlwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiZGVmYXVsdE1vZGVsXCI6IFwibmxsYi0yMDAtMy0zYlwiLFxuICAgICAgICBcImlucHV0Qm9keUNvbnRlbnRUeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIFwib3V0cHV0Qm9keUNvbnRlbnRUeXBlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVua25vd25cIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJpblwiOiBcImZvcm1EYXRhXCIsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic291cmNlXCIsXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0YXJnZXRcIixcbiAgICAgICAgICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ1cmxcIjogXCIvdGV4dC90ZXh0L3dvcmQtYWxpZ25tZW50L1wiLFxuICAgICAgICBcImlucHV0VHlwZVwiOiBcInRleHRcIixcbiAgICAgICAgXCJvdXRwdXRUeXBlXCI6IFwidGV4dFwiLFxuICAgICAgICBcInRhc2tOYW1lXCI6IFwid29yZC1hbGlnbm1lbnRcIixcbiAgICAgICAgXCJtb2RlbHNcIjogW1xuICAgICAgICAgICAgXCJiZXJ0LWJhc2UtbXVsdGlsaW5ndWFsLWNhc2VkXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJkZWZhdWx0TW9kZWxcIjogXCJiZXJ0LWJhc2UtbXVsdGlsaW5ndWFsLWNhc2VkXCIsXG4gICAgICAgIFwiaW5wdXRCb2R5Q29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgXCJvdXRwdXRCb2R5Q29udGVudFR5cGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwicHJlZGljdGlvbi1zdGFuZGFyZC1vdXRwdXRcIixcbiAgICAgICAgICAgIFwicHJlZGljdGlvblR5cGVcIjogXCJhcnJheVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpbnB1dF9zdHJpbmdfbGFuZ3VhZ2VfMVwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImluXCI6IFwiZm9ybURhdGFcIixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpbnB1dF9zdHJpbmdfbGFuZ3VhZ2VfMlwiLFxuICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfVxuXTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDb250ZW50VHlwZU5hbWUgPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXRDb250ZW50VHlwZU5hbWUoZW5kcG9pbnQpIHtcbiAgICB2YXIgaW5wdXRUeXBlID0gZW5kcG9pbnQuaW5wdXRUeXBlLnRvVXBwZXJDYXNlKCk7XG4gICAgdmFyIG91dHB1dFR5cGUgPSBlbmRwb2ludC5vdXRwdXRUeXBlLnRvVXBwZXJDYXNlKCk7XG4gICAgdmFyIHRhc2tOYW1lID0gZW5kcG9pbnQudGFza05hbWUucmVwbGFjZSgvLS9nLCAnXycpLnRvVXBwZXJDYXNlKCk7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGlucHV0VHlwZSwgXCJfXCIpLmNvbmNhdChvdXRwdXRUeXBlLCBcIl9cIikuY29uY2F0KHRhc2tOYW1lLCBcIl9DT05URU5UX1RZUEVcIik7XG59XG5leHBvcnRzLmdldENvbnRlbnRUeXBlTmFtZSA9IGdldENvbnRlbnRUeXBlTmFtZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRFbmRwb2ludHNCeUlucHV0T3V0cHV0ID0gZXhwb3J0cy5nZXRFbmRwb2ludHMgPSB2b2lkIDA7XG52YXIgZW5kcG9pbnRfZGVmc18xID0gcmVxdWlyZShcIi4vZW5kcG9pbnQtZGVmc1wiKTtcbmZ1bmN0aW9uIGdldEVuZHBvaW50cygpIHtcbiAgICByZXR1cm4gZW5kcG9pbnRfZGVmc18xLkVORFBPSU5UX0RFRlM7XG59XG5leHBvcnRzLmdldEVuZHBvaW50cyA9IGdldEVuZHBvaW50cztcbmZ1bmN0aW9uIGdldEVuZHBvaW50c0J5SW5wdXRPdXRwdXQoKSB7XG4gICAgdmFyIGVuZHBvaW50cyA9IGdldEVuZHBvaW50cygpO1xuICAgIHZhciBieSA9IHt9O1xuICAgIGZvciAodmFyIF9pID0gMCwgZW5kcG9pbnRzXzEgPSBlbmRwb2ludHM7IF9pIDwgZW5kcG9pbnRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBlbmRwb2ludCA9IGVuZHBvaW50c18xW19pXTtcbiAgICAgICAgaWYgKCEoZW5kcG9pbnQuaW5wdXRUeXBlIGluIGJ5KSkge1xuICAgICAgICAgICAgYnlbZW5kcG9pbnQuaW5wdXRUeXBlXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGVuZHBvaW50Lm91dHB1dFR5cGUgaW4gYnlbZW5kcG9pbnQuaW5wdXRUeXBlXSkpIHtcbiAgICAgICAgICAgIGJ5W2VuZHBvaW50LmlucHV0VHlwZV1bZW5kcG9pbnQub3V0cHV0VHlwZV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBieVtlbmRwb2ludC5pbnB1dFR5cGVdW2VuZHBvaW50Lm91dHB1dFR5cGVdLnB1c2goZW5kcG9pbnQpO1xuICAgIH1cbiAgICByZXR1cm4gYnk7XG59XG5leHBvcnRzLmdldEVuZHBvaW50c0J5SW5wdXRPdXRwdXQgPSBnZXRFbmRwb2ludHNCeUlucHV0T3V0cHV0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldElucHV0TW9kZWxUeXBlID0gdm9pZCAwO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGdldElucHV0TW9kZWxUeXBlKGVuZHBvaW50KSB7XG4gICAgdmFyIGlucHV0VHlwZSA9ICgwLCB1dGlsc18xLmNhcGl0YWxpemVGaXJzdCkoZW5kcG9pbnQuaW5wdXRUeXBlKTtcbiAgICB2YXIgb3V0cHV0VHlwZSA9ICgwLCB1dGlsc18xLmNhcGl0YWxpemVGaXJzdCkoZW5kcG9pbnQub3V0cHV0VHlwZSk7XG4gICAgdmFyIHRhc2tOYW1lID0gKDAsIHV0aWxzXzEua2ViYWJUb1Bhc2NhbENhc2UpKGVuZHBvaW50LnRhc2tOYW1lKTtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoaW5wdXRUeXBlKS5jb25jYXQob3V0cHV0VHlwZSkuY29uY2F0KHRhc2tOYW1lLCBcIklucHV0c1wiKTtcbn1cbmV4cG9ydHMuZ2V0SW5wdXRNb2RlbFR5cGUgPSBnZXRJbnB1dE1vZGVsVHlwZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRNZXRob2ROYW1lID0gdm9pZCAwO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGdldE1ldGhvZE5hbWUoZW5kcG9pbnQpIHtcbiAgICByZXR1cm4gKDAsIHV0aWxzXzEua2ViYWJUb0NhbWVsQ2FzZSkoZW5kcG9pbnQudGFza05hbWUpO1xufVxuZXhwb3J0cy5nZXRNZXRob2ROYW1lID0gZ2V0TWV0aG9kTmFtZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRNb2RlbFR5cGVOYW1lID0gdm9pZCAwO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGdldE1vZGVsVHlwZU5hbWUoZW5kcG9pbnQpIHtcbiAgICB2YXIgaW5wdXRUeXBlID0gKDAsIHV0aWxzXzEuY2FwaXRhbGl6ZUZpcnN0KShlbmRwb2ludC5pbnB1dFR5cGUpO1xuICAgIHZhciBvdXRwdXRUeXBlID0gKDAsIHV0aWxzXzEuY2FwaXRhbGl6ZUZpcnN0KShlbmRwb2ludC5vdXRwdXRUeXBlKTtcbiAgICB2YXIgZW5kcG9pbnROYW1lID0gKDAsIHV0aWxzXzEua2ViYWJUb1Bhc2NhbENhc2UpKGVuZHBvaW50LnRhc2tOYW1lKTtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoaW5wdXRUeXBlKS5jb25jYXQob3V0cHV0VHlwZSkuY29uY2F0KGVuZHBvaW50TmFtZSwgXCJNb2RlbFwiKTtcbn1cbmV4cG9ydHMuZ2V0TW9kZWxUeXBlTmFtZSA9IGdldE1vZGVsVHlwZU5hbWU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0TW9kZWxWYWx1ZXNOYW1lID0gdm9pZCAwO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGdldE1vZGVsVmFsdWVzTmFtZShlbmRwb2ludCkge1xuICAgIHZhciBpbnB1dFR5cGUgPSBlbmRwb2ludC5pbnB1dFR5cGUudG9VcHBlckNhc2UoKTtcbiAgICB2YXIgb3V0cHV0VHlwZSA9IGVuZHBvaW50Lm91dHB1dFR5cGUudG9VcHBlckNhc2UoKTtcbiAgICB2YXIgdGFza05hbWUgPSAoMCwgdXRpbHNfMS5rZWJhYlRvU25ha2VDYXNlKShlbmRwb2ludC50YXNrTmFtZSkudG9VcHBlckNhc2UoKTtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoaW5wdXRUeXBlLCBcIl9cIikuY29uY2F0KG91dHB1dFR5cGUsIFwiX1wiKS5jb25jYXQodGFza05hbWUsIFwiX01PREVMU1wiKTtcbn1cbmV4cG9ydHMuZ2V0TW9kZWxWYWx1ZXNOYW1lID0gZ2V0TW9kZWxWYWx1ZXNOYW1lO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldE91dHB1dE1vZGVsVHlwZSA9IHZvaWQgMDtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5mdW5jdGlvbiBnZXRPdXRwdXRNb2RlbFR5cGUoZW5kcG9pbnQpIHtcbiAgICB2YXIgaW5wdXRUeXBlID0gKDAsIHV0aWxzXzEuY2FwaXRhbGl6ZUZpcnN0KShlbmRwb2ludC5pbnB1dFR5cGUpO1xuICAgIHZhciBvdXRwdXRUeXBlID0gKDAsIHV0aWxzXzEuY2FwaXRhbGl6ZUZpcnN0KShlbmRwb2ludC5vdXRwdXRUeXBlKTtcbiAgICB2YXIgdGFza05hbWUgPSAoMCwgdXRpbHNfMS5rZWJhYlRvUGFzY2FsQ2FzZSkoZW5kcG9pbnQudGFza05hbWUpO1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChpbnB1dFR5cGUpLmNvbmNhdChvdXRwdXRUeXBlKS5jb25jYXQodGFza05hbWUsIFwiT3V0cHV0c1wiKTtcbn1cbmV4cG9ydHMuZ2V0T3V0cHV0TW9kZWxUeXBlID0gZ2V0T3V0cHV0TW9kZWxUeXBlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldE91dHB1dE1vZGVsVHlwZSA9IGV4cG9ydHMuZ2V0SW5wdXRNb2RlbFR5cGUgPSBleHBvcnRzLmdldE1vZGVsVmFsdWVzTmFtZSA9IGV4cG9ydHMuZ2V0TW9kZWxUeXBlTmFtZSA9IGV4cG9ydHMuZ2V0TWV0aG9kTmFtZSA9IGV4cG9ydHMuZ2V0Q29udGVudFR5cGVOYW1lID0gZXhwb3J0cy5nZXRFbmRwb2ludHNCeUlucHV0T3V0cHV0ID0gZXhwb3J0cy5nZXRFbmRwb2ludHMgPSB2b2lkIDA7XG52YXIgZ2V0X2VuZHBvaW50c18xID0gcmVxdWlyZShcIi4vZ2V0LWVuZHBvaW50c1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEVuZHBvaW50c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0X2VuZHBvaW50c18xLmdldEVuZHBvaW50czsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEVuZHBvaW50c0J5SW5wdXRPdXRwdXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldF9lbmRwb2ludHNfMS5nZXRFbmRwb2ludHNCeUlucHV0T3V0cHV0OyB9IH0pO1xudmFyIGdldF9jb250ZW50X3R5cGVfbmFtZV8xID0gcmVxdWlyZShcIi4vZ2V0LWNvbnRlbnQtdHlwZS1uYW1lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0Q29udGVudFR5cGVOYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRfY29udGVudF90eXBlX25hbWVfMS5nZXRDb250ZW50VHlwZU5hbWU7IH0gfSk7XG52YXIgZ2V0X21ldGhvZF9uYW1lXzEgPSByZXF1aXJlKFwiLi9nZXQtbWV0aG9kLW5hbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRNZXRob2ROYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRfbWV0aG9kX25hbWVfMS5nZXRNZXRob2ROYW1lOyB9IH0pO1xudmFyIGdldF9tb2RlbF90eXBlX25hbWVfMSA9IHJlcXVpcmUoXCIuL2dldC1tb2RlbC10eXBlLW5hbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRNb2RlbFR5cGVOYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRfbW9kZWxfdHlwZV9uYW1lXzEuZ2V0TW9kZWxUeXBlTmFtZTsgfSB9KTtcbnZhciBnZXRfbW9kZWxfdmFsdWVzX25hbWVfMSA9IHJlcXVpcmUoXCIuL2dldC1tb2RlbC12YWx1ZXMtbmFtZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldE1vZGVsVmFsdWVzTmFtZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0X21vZGVsX3ZhbHVlc19uYW1lXzEuZ2V0TW9kZWxWYWx1ZXNOYW1lOyB9IH0pO1xudmFyIGdldF9pbnB1dF9tb2RlbF90eXBlXzEgPSByZXF1aXJlKFwiLi9nZXQtaW5wdXQtbW9kZWwtdHlwZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldElucHV0TW9kZWxUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRfaW5wdXRfbW9kZWxfdHlwZV8xLmdldElucHV0TW9kZWxUeXBlOyB9IH0pO1xudmFyIGdldF9vdXRwdXRfbW9kZWxfdHlwZV8xID0gcmVxdWlyZShcIi4vZ2V0LW91dHB1dC1tb2RlbC10eXBlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0T3V0cHV0TW9kZWxUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRfb3V0cHV0X21vZGVsX3R5cGVfMS5nZXRPdXRwdXRNb2RlbFR5cGU7IH0gfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qIEdlbmVyYXRlZCBmaWxlIHdpdGggXCJzY3JpcHRzL2dlbmVyYXRlLW1ldGFzZGsudHNcIiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TREtfVkVSU0lPTiA9IHZvaWQgMDtcbmV4cG9ydHMuU0RLX1ZFUlNJT04gPSBcIjAuMi4wXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMua2ViYWJUb0NhbWVsQ2FzZSA9IGV4cG9ydHMua2ViYWJUb1NuYWtlQ2FzZSA9IGV4cG9ydHMua2ViYWJUb1Bhc2NhbENhc2UgPSBleHBvcnRzLnVuY2FwaXRhbGl6ZUZpcnN0ID0gZXhwb3J0cy5jYXBpdGFsaXplRmlyc3QgPSB2b2lkIDA7XG5mdW5jdGlvbiBjYXBpdGFsaXplRmlyc3Qoc3RyKSB7XG4gICAgcmV0dXJuIHN0clswXS50b1VwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cmluZygxKTtcbn1cbmV4cG9ydHMuY2FwaXRhbGl6ZUZpcnN0ID0gY2FwaXRhbGl6ZUZpcnN0O1xuZnVuY3Rpb24gdW5jYXBpdGFsaXplRmlyc3Qoc3RyKSB7XG4gICAgcmV0dXJuIHN0clswXS50b0xvd2VyQ2FzZSgpICsgc3RyLnN1YnN0cmluZygxKTtcbn1cbmV4cG9ydHMudW5jYXBpdGFsaXplRmlyc3QgPSB1bmNhcGl0YWxpemVGaXJzdDtcbmZ1bmN0aW9uIGtlYmFiVG9QYXNjYWxDYXNlKHN0cikge1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnNwbGl0KCctJylcbiAgICAgICAgLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gY2FwaXRhbGl6ZUZpcnN0KHMpOyB9KVxuICAgICAgICAuam9pbignJyk7XG59XG5leHBvcnRzLmtlYmFiVG9QYXNjYWxDYXNlID0ga2ViYWJUb1Bhc2NhbENhc2U7XG5mdW5jdGlvbiBrZWJhYlRvU25ha2VDYXNlKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvLS9nLCAnXycpO1xufVxuZXhwb3J0cy5rZWJhYlRvU25ha2VDYXNlID0ga2ViYWJUb1NuYWtlQ2FzZTtcbmZ1bmN0aW9uIGtlYmFiVG9DYW1lbENhc2Uoc3RyKSB7XG4gICAgdmFyIHdvcmRzID0gc3RyLnNwbGl0KCctJyk7XG4gICAgcmV0dXJuIF9fc3ByZWFkQXJyYXkoW3dvcmRzLnNoaWZ0KCldLCB3b3Jkcy5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGNhcGl0YWxpemVGaXJzdChzKTsgfSksIHRydWUpLmpvaW4oJycpO1xufVxuZXhwb3J0cy5rZWJhYlRvQ2FtZWxDYXNlID0ga2ViYWJUb0NhbWVsQ2FzZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyogR2VuZXJhdGVkIGZpbGUgd2l0aCBcInNjcmlwdHMvZ2VuZXJhdGUtc2RrLnRzXCIgKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVEVYVF9URVhUX1NFTlRFTkNFX1BBUkFQSFJBU0VSX0NPTlRFTlRfVFlQRSA9IGV4cG9ydHMuVEVYVF9URVhUX1NFTlRFTkNFX1BBUkFQSFJBU0VSX01PREVMUyA9IGV4cG9ydHMuVEVYVF9URVhUX1FVRVNUSU9OX0FOU1dFUklOR19DT05URU5UX1RZUEUgPSBleHBvcnRzLlRFWFRfVEVYVF9RVUVTVElPTl9BTlNXRVJJTkdfTU9ERUxTID0gZXhwb3J0cy5URVhUX1RFWFRfUFJPR1JBTU1JTkdfTEFOR1VBR0VfR0VORVJBVElPTl9DT05URU5UX1RZUEUgPSBleHBvcnRzLlRFWFRfVEVYVF9QUk9HUkFNTUlOR19MQU5HVUFHRV9HRU5FUkFUSU9OX01PREVMUyA9IGV4cG9ydHMuVEVYVF9URVhUX1BMVVJBTF9DT05URU5UX1RZUEUgPSBleHBvcnRzLlRFWFRfVEVYVF9QTFVSQUxfTU9ERUxTID0gZXhwb3J0cy5URVhUX1RFWFRfTkVYVF9XT1JEX1BSRURJQ1RJT05fQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfTkVYVF9XT1JEX1BSRURJQ1RJT05fTU9ERUxTID0gZXhwb3J0cy5URVhUX1RFWFRfTkVYVF9TRU5URU5DRV9QUkVESUNUSU9OX0NPTlRFTlRfVFlQRSA9IGV4cG9ydHMuVEVYVF9URVhUX05FWFRfU0VOVEVOQ0VfUFJFRElDVElPTl9NT0RFTFMgPSBleHBvcnRzLlRFWFRfVEVYVF9OQU1FRF9FTlRJVFlfUkVDT0dOSVRJT05fQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfTkFNRURfRU5USVRZX1JFQ09HTklUSU9OX01PREVMUyA9IGV4cG9ydHMuVEVYVF9URVhUX0xBTkdVQUdFX0dFTkVSQVRJT05fQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfTEFOR1VBR0VfR0VORVJBVElPTl9NT0RFTFMgPSBleHBvcnRzLlRFWFRfVEVYVF9MQU5HVUFHRV9ERVRFQ1RJT05fQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfTEFOR1VBR0VfREVURUNUSU9OX01PREVMUyA9IGV4cG9ydHMuVEVYVF9URVhUX0tFWVdPUkRfRVhUUkFDVElPTl9DT05URU5UX1RZUEUgPSBleHBvcnRzLlRFWFRfVEVYVF9LRVlXT1JEX0VYVFJBQ1RJT05fTU9ERUxTID0gZXhwb3J0cy5URVhUX1RFWFRfSU5URU5UX0NMQVNTSUZJQ0FUSU9OX0NPTlRFTlRfVFlQRSA9IGV4cG9ydHMuVEVYVF9URVhUX0lOVEVOVF9DTEFTU0lGSUNBVElPTl9NT0RFTFMgPSBleHBvcnRzLlRFWFRfVEVYVF9IQVRFX1NQRUVDSF9ERVRFQ1RJT05fQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfSEFURV9TUEVFQ0hfREVURUNUSU9OX01PREVMUyA9IGV4cG9ydHMuVEVYVF9URVhUX0VNT1RJT05fUkVDT0dOSVRJT05fQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfRU1PVElPTl9SRUNPR05JVElPTl9NT0RFTFMgPSBleHBvcnRzLlRFWFRfVEVYVF9BVVRPQ09SUkVDVF9DT05URU5UX1RZUEUgPSBleHBvcnRzLlRFWFRfVEVYVF9BVVRPQ09SUkVDVF9NT0RFTFMgPSBleHBvcnRzLlRFWFRfVEVYVF9BUlRJQ0xFX0dFTkVSQVRJT05fQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfQVJUSUNMRV9HRU5FUkFUSU9OX01PREVMUyA9IGV4cG9ydHMuVEVYVF9URVhUX0FEX0dFTkVSQVRJT05fQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfQURfR0VORVJBVElPTl9NT0RFTFMgPSBleHBvcnRzLlRFWFRfSU1BR0VfSU1BR0VfR0VORVJBVElPTl9DT05URU5UX1RZUEUgPSBleHBvcnRzLlRFWFRfSU1BR0VfSU1BR0VfR0VORVJBVElPTl9NT0RFTFMgPSBleHBvcnRzLklNQUdFX1RFWFRfT0NSX0NPTlRFTlRfVFlQRSA9IGV4cG9ydHMuSU1BR0VfVEVYVF9PQ1JfTU9ERUxTID0gZXhwb3J0cy5JTUFHRV9URVhUX0NMQVNTSUZJQ0FUSU9OX0NPTlRFTlRfVFlQRSA9IGV4cG9ydHMuSU1BR0VfVEVYVF9DTEFTU0lGSUNBVElPTl9NT0RFTFMgPSBleHBvcnRzLklNQUdFX1RFWFRfQVNDSUlGWV9DT05URU5UX1RZUEUgPSBleHBvcnRzLklNQUdFX1RFWFRfQVNDSUlGWV9NT0RFTFMgPSBleHBvcnRzLklNQUdFX0lNQUdFX1VOQ09MT1JJWkFUSU9OX0NPTlRFTlRfVFlQRSA9IGV4cG9ydHMuSU1BR0VfSU1BR0VfVU5DT0xPUklaQVRJT05fTU9ERUxTID0gZXhwb3J0cy5JTUFHRV9JTUFHRV9GQUNFX0JMVVJJTkdfQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5JTUFHRV9JTUFHRV9GQUNFX0JMVVJJTkdfTU9ERUxTID0gZXhwb3J0cy5JTUFHRV9JTUFHRV9DT0xPUklaQVRJT05fQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5JTUFHRV9JTUFHRV9DT0xPUklaQVRJT05fTU9ERUxTID0gZXhwb3J0cy5JTUFHRV9JTUFHRV9CQUNLR1JPVU5EX1JFTU9WQUxfQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5JTUFHRV9JTUFHRV9CQUNLR1JPVU5EX1JFTU9WQUxfTU9ERUxTID0gZXhwb3J0cy5BVURJT19URVhUX0FVRElPX1RSQU5TQ1JJUFRJT05fQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5BVURJT19URVhUX0FVRElPX1RSQU5TQ1JJUFRJT05fTU9ERUxTID0gdm9pZCAwO1xuZXhwb3J0cy5URVhUX1RFWFRfV09SRF9BTElHTk1FTlRfQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfV09SRF9BTElHTk1FTlRfTU9ERUxTID0gZXhwb3J0cy5URVhUX1RFWFRfVFJBTlNMQVRJT05fQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfVFJBTlNMQVRJT05fTU9ERUxTID0gZXhwb3J0cy5URVhUX1RFWFRfU1VNTUFSSVpBVElPTl9DT05URU5UX1RZUEUgPSBleHBvcnRzLlRFWFRfVEVYVF9TVU1NQVJJWkFUSU9OX01PREVMUyA9IGV4cG9ydHMuVEVYVF9URVhUX1NJTUlMQVJJVFlfQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfU0lNSUxBUklUWV9NT0RFTFMgPSBleHBvcnRzLlRFWFRfVEVYVF9TRU5USU1FTlRfQU5BTFlTSVNfQ09OVEVOVF9UWVBFID0gZXhwb3J0cy5URVhUX1RFWFRfU0VOVElNRU5UX0FOQUxZU0lTX01PREVMUyA9IHZvaWQgMDtcbmV4cG9ydHMuQVVESU9fVEVYVF9BVURJT19UUkFOU0NSSVBUSU9OX01PREVMUyA9IFtcbiAgICAnY29xdWlfZW5nbGlzaF9odWdlX3ZvY2FiJyxcbl07XG5leHBvcnRzLkFVRElPX1RFWFRfQVVESU9fVFJBTlNDUklQVElPTl9DT05URU5UX1RZUEUgPSBcIm11bHRpcGFydC9mb3JtLWRhdGFcIjtcbmV4cG9ydHMuSU1BR0VfSU1BR0VfQkFDS0dST1VORF9SRU1PVkFMX01PREVMUyA9IFtcbiAgICAnbW9iaWxlbmV0JyxcbiAgICAneGNlcHRpb24nLFxuXTtcbmV4cG9ydHMuSU1BR0VfSU1BR0VfQkFDS0dST1VORF9SRU1PVkFMX0NPTlRFTlRfVFlQRSA9IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiO1xuZXhwb3J0cy5JTUFHRV9JTUFHRV9DT0xPUklaQVRJT05fTU9ERUxTID0gW1xuICAgICdkZW9sZGlmeS1hcnRpc3RpYycsXG4gICAgJ2Rlb2xkaWZ5LXN0YWJsZScsXG5dO1xuZXhwb3J0cy5JTUFHRV9JTUFHRV9DT0xPUklaQVRJT05fQ09OVEVOVF9UWVBFID0gXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCI7XG5leHBvcnRzLklNQUdFX0lNQUdFX0ZBQ0VfQkxVUklOR19NT0RFTFMgPSBbXG4gICAgJ2FnZWl0Z2V5Jyxcbl07XG5leHBvcnRzLklNQUdFX0lNQUdFX0ZBQ0VfQkxVUklOR19DT05URU5UX1RZUEUgPSBcIm11bHRpcGFydC9mb3JtLWRhdGFcIjtcbmV4cG9ydHMuSU1BR0VfSU1BR0VfVU5DT0xPUklaQVRJT05fTU9ERUxTID0gW1xuICAgICd2MScsXG5dO1xuZXhwb3J0cy5JTUFHRV9JTUFHRV9VTkNPTE9SSVpBVElPTl9DT05URU5UX1RZUEUgPSBcIm11bHRpcGFydC9mb3JtLWRhdGFcIjtcbmV4cG9ydHMuSU1BR0VfVEVYVF9BU0NJSUZZX01PREVMUyA9IFtcbiAgICAncmFtZXNoLWFkaXR5YScsXG5dO1xuZXhwb3J0cy5JTUFHRV9URVhUX0FTQ0lJRllfQ09OVEVOVF9UWVBFID0gXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCI7XG5leHBvcnRzLklNQUdFX1RFWFRfQ0xBU1NJRklDQVRJT05fTU9ERUxTID0gW1xuICAgICdhbGV4bmV0JyxcbiAgICAnY29udm5leHRfYmFzZScsXG4gICAgJ2NvbnZuZXh0X2xhcmdlJyxcbiAgICAnY29udm5leHRfc21hbGwnLFxuICAgICdjb252bmV4dF90aW55JyxcbiAgICAnZGVuc2VuZXQxMjEnLFxuICAgICdkZW5zZW5ldDE2MScsXG4gICAgJ2RlbnNlbmV0MTY5JyxcbiAgICAnZGVuc2VuZXQyMDEnLFxuICAgICdlZmZpY2llbnRuZXRfYjAnLFxuICAgICdlZmZpY2llbnRuZXRfYjFfdjEnLFxuICAgICdlZmZpY2llbnRuZXRfYjFfdjInLFxuICAgICdlZmZpY2llbnRuZXRfYjInLFxuICAgICdlZmZpY2llbnRuZXRfYjMnLFxuICAgICdlZmZpY2llbnRuZXRfYjQnLFxuICAgICdlZmZpY2llbnRuZXRfYjUnLFxuICAgICdlZmZpY2llbnRuZXRfYjYnLFxuICAgICdlZmZpY2llbnRuZXRfYjcnLFxuICAgICdlZmZpY2llbnRuZXRfdjJfbCcsXG4gICAgJ2VmZmljaWVudG5ldF92Ml9tJyxcbiAgICAnZWZmaWNpZW50bmV0X3YyX3MnLFxuICAgICdnb29nbGVuZXQnLFxuICAgICdnb29nbGVuZXRfcXVhbnRpemVkX2ZiZ2VtbV92MScsXG4gICAgJ2luY2VwdGlvbl92MycsXG4gICAgJ2luY2VwdGlvbl92M19mYmdlbW1fdjEnLFxuICAgICdtbmFzbmV0MF81JyxcbiAgICAnbW5hc25ldDBfNzUnLFxuICAgICdtbmFzbmV0MV8wJyxcbiAgICAnbW5hc25ldDFfMycsXG4gICAgJ21vYmlsZW5ldF92Ml9xdWFudGl6ZWRfcW5ucGFja192MScsXG4gICAgJ21vYmlsZW5ldF92Ml92MScsXG4gICAgJ21vYmlsZW5ldF92Ml92MicsXG4gICAgJ21vYmlsZW5ldF92M19sYXJnZV9xdWFudGl6ZWRfcW5ucGFja192MScsXG4gICAgJ21vYmlsZW5ldF92M19sYXJnZV92MScsXG4gICAgJ21vYmlsZW5ldF92M19sYXJnZV92MicsXG4gICAgJ21vYmlsZW5ldF92M19zbWFsbCcsXG4gICAgJ3JlZ25ldF94XzE2Z2ZfdjEnLFxuICAgICdyZWduZXRfeF8xNmdmX3YyJyxcbiAgICAncmVnbmV0X3hfMV82Z2ZfdjEnLFxuICAgICdyZWduZXRfeF8xXzZnZl92MicsXG4gICAgJ3JlZ25ldF94XzMyZ2ZfdjEnLFxuICAgICdyZWduZXRfeF8zMmdmX3YyJyxcbiAgICAncmVnbmV0X3hfM18yZ2ZfdjEnLFxuICAgICdyZWduZXRfeF8zXzJnZl92MicsXG4gICAgJ3JlZ25ldF94XzQwMG1mX3YxJyxcbiAgICAncmVnbmV0X3hfNDAwbWZfdjInLFxuICAgICdyZWduZXRfeF84MDBtZl92MScsXG4gICAgJ3JlZ25ldF94XzgwMG1mX3YyJyxcbiAgICAncmVnbmV0X3hfOGdmX3YxJyxcbiAgICAncmVnbmV0X3hfOGdmX3YyJyxcbiAgICAncmVnbmV0X3lfMTI4Z2Zfc3dhZ19lMmVfdjEnLFxuICAgICdyZWduZXRfeV8xMjhnZl9zd2FnX2xpbmVhcl92MScsXG4gICAgJ3JlZ25ldF95XzE2Z2Zfc3dhZ19lMmVfdjEnLFxuICAgICdyZWduZXRfeV8xNmdmX3N3YWdfbGluZWFyX3YxJyxcbiAgICAncmVnbmV0X3lfMTZnZl92MScsXG4gICAgJ3JlZ25ldF95XzE2Z2ZfdjInLFxuICAgICdyZWduZXRfeV8xXzZnZl92MScsXG4gICAgJ3JlZ25ldF95XzFfNmdmX3YyJyxcbiAgICAncmVnbmV0X3lfMzJnZl9zd2FnX2UyZV92MScsXG4gICAgJ3JlZ25ldF95XzMyZ2Zfc3dhZ19saW5lYXJfdjEnLFxuICAgICdyZWduZXRfeV8zMmdmX3YxJyxcbiAgICAncmVnbmV0X3lfMzJnZl92MicsXG4gICAgJ3JlZ25ldF95XzNfMmdmX3YxJyxcbiAgICAncmVnbmV0X3lfM18yZ2ZfdjInLFxuICAgICdyZWduZXRfeV80MDBtZl92MScsXG4gICAgJ3JlZ25ldF95XzQwMG1mX3YyJyxcbiAgICAncmVnbmV0X3lfOGdmX3YxJyxcbiAgICAncmVnbmV0X3lfOGdmX3YyJyxcbiAgICAncmVzbmV0MTUyX3YxJyxcbiAgICAncmVzbmV0MTUyX3YyJyxcbiAgICAncmVzbmV0MTgnLFxuICAgICdyZXNuZXQxOF9xdWFudGl6ZWRfZmJnZW1tX3YxJyxcbiAgICAncmVzbmV0MzQnLFxuICAgICdyZXNuZXQ1MF9xdWFudGl6ZWRfZmJnZW1tX3YxJyxcbiAgICAncmVzbmV0NTBfcXVhbnRpemVkX2ZiZ2VtbV92MicsXG4gICAgJ3Jlc25ldDUwX3YxJyxcbiAgICAncmVzbmV0NTBfdjInLFxuICAgICdyZXNuZXh0MTAxXzMyeDhkX3F1YW50aXplZF9mYmdlbW1fdjEnLFxuICAgICdyZXNuZXh0MTAxXzMyeDhkX3F1YW50aXplZF9mYmdlbW1fdjInLFxuICAgICdyZXNuZXh0MTAxXzMyeDhkX3YxJyxcbiAgICAncmVzbmV4dDEwMV8zMng4ZF92MicsXG4gICAgJ3Jlc25leHQxMDFfNjR4NGRfcXVhbnRpemVkX2ZiZ2VtbV92MScsXG4gICAgJ3Jlc25leHQxMDFfNjR4NGRfdjEnLFxuICAgICdyZXNuZXh0NTBfMzJ4NGRfdjEnLFxuICAgICdyZXNuZXh0NTBfMzJ4NGRfdjInLFxuICAgICdzaHVmZmxlbmV0X3YyX3gwXzUnLFxuICAgICdzaHVmZmxlbmV0X3YyX3gwXzVfcXVhbnRpemVkX2ZiZ2VtbV92MScsXG4gICAgJ3NodWZmbGVuZXRfdjJfeDFfMCcsXG4gICAgJ3NodWZmbGVuZXRfdjJfeDFfMF9xdWFudGl6ZWRfZmJnZW1tX3YxJyxcbiAgICAnc2h1ZmZsZW5ldF92Ml94MV81JyxcbiAgICAnc2h1ZmZsZW5ldF92Ml94MV81X3F1YW50aXplZF9mYmdlbW1fdjEnLFxuICAgICdzaHVmZmxlbmV0X3YyX3gyXzAnLFxuICAgICdzaHVmZmxlbmV0X3YyX3gyXzBfcXVhbnRpemVkX2ZiZ2VtbV92MScsXG4gICAgJ3NxdWVlemVuZXQxXzAnLFxuICAgICdzcXVlZXplbmV0MV8xJyxcbiAgICAnc3dpbl9iJyxcbiAgICAnc3dpbl9zJyxcbiAgICAnc3dpbl90JyxcbiAgICAndmdnMTEnLFxuICAgICd2Z2cxMV9ibicsXG4gICAgJ3ZnZzEzJyxcbiAgICAndmdnMTNfYm4nLFxuICAgICd2Z2cxNl9ibicsXG4gICAgJ3ZnZzE2X3YxJyxcbiAgICAndmdnMTknLFxuICAgICd2Z2cxOV9ibicsXG4gICAgJ3ZpdF9iXzE2X3N3YWdfZTJlX3YxJyxcbiAgICAndml0X2JfMTZfc3dhZ19saW5lYXJfdjEnLFxuICAgICd2aXRfYl8xNl92MScsXG4gICAgJ3ZpdF9iXzMyJyxcbiAgICAndml0X2hfMTRfc3dhZ19lMmVfdjEnLFxuICAgICd2aXRfaF8xNF9zd2FnX2xpbmVhcl92MScsXG4gICAgJ3ZpdF9sXzE2X3N3YWdfZTJlX3YxJyxcbiAgICAndml0X2xfMTZfc3dhZ19saW5lYXJfdjEnLFxuICAgICd2aXRfbF8xNl92MScsXG4gICAgJ3ZpdF9sXzMyJyxcbiAgICAnd2lkZV9yZXNuZXQxMDFfMl92MScsXG4gICAgJ3dpZGVfcmVzbmV0MTAxXzJfdjInLFxuXTtcbmV4cG9ydHMuSU1BR0VfVEVYVF9DTEFTU0lGSUNBVElPTl9DT05URU5UX1RZUEUgPSBcIm11bHRpcGFydC9mb3JtLWRhdGFcIjtcbmV4cG9ydHMuSU1BR0VfVEVYVF9PQ1JfTU9ERUxTID0gW1xuICAgICdlYXN5LW9jcicsXG4gICAgJ3Rlc3NlcmFjdC1kZWZhdWx0JyxcbiAgICAndGVzc2VyYWN0LWRlbm9pc2luZycsXG5dO1xuZXhwb3J0cy5JTUFHRV9URVhUX09DUl9DT05URU5UX1RZUEUgPSBcIm11bHRpcGFydC9mb3JtLWRhdGFcIjtcbmV4cG9ydHMuVEVYVF9JTUFHRV9JTUFHRV9HRU5FUkFUSU9OX01PREVMUyA9IFtcbiAgICAnZHJlYW0tc3R1ZGlvJyxcbiAgICAnc3RhYmxlLWRpZmZ1c2lvbicsXG5dO1xuZXhwb3J0cy5URVhUX0lNQUdFX0lNQUdFX0dFTkVSQVRJT05fQ09OVEVOVF9UWVBFID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmV4cG9ydHMuVEVYVF9URVhUX0FEX0dFTkVSQVRJT05fTU9ERUxTID0gW1xuICAgICdncHQtaicsXG5dO1xuZXhwb3J0cy5URVhUX1RFWFRfQURfR0VORVJBVElPTl9DT05URU5UX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZXhwb3J0cy5URVhUX1RFWFRfQVJUSUNMRV9HRU5FUkFUSU9OX01PREVMUyA9IFtcbiAgICAnZmFzdC1ncHQtaicsXG5dO1xuZXhwb3J0cy5URVhUX1RFWFRfQVJUSUNMRV9HRU5FUkFUSU9OX0NPTlRFTlRfVFlQRSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5leHBvcnRzLlRFWFRfVEVYVF9BVVRPQ09SUkVDVF9NT0RFTFMgPSBbXG4gICAgJ2ZsZXh1ZHktdDUtYmFzZS1tdWx0aS1zZW50ZW5jZS1kb2N0b3InLFxuXTtcbmV4cG9ydHMuVEVYVF9URVhUX0FVVE9DT1JSRUNUX0NPTlRFTlRfVFlQRSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5leHBvcnRzLlRFWFRfVEVYVF9FTU9USU9OX1JFQ09HTklUSU9OX01PREVMUyA9IFtcbiAgICAnbXJtODQ4OC10NS1iYXNlLWZpbmV0dW5lZC1lbW90aW9uJyxcbl07XG5leHBvcnRzLlRFWFRfVEVYVF9FTU9USU9OX1JFQ09HTklUSU9OX0NPTlRFTlRfVFlQRSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5leHBvcnRzLlRFWFRfVEVYVF9IQVRFX1NQRUVDSF9ERVRFQ1RJT05fTU9ERUxTID0gW1xuICAgICdIYXRlLXNwZWVjaC1DTkVSRy1kZWhhdGViZXJ0LW1vbm8tZW5nbGlzaCcsXG5dO1xuZXhwb3J0cy5URVhUX1RFWFRfSEFURV9TUEVFQ0hfREVURUNUSU9OX0NPTlRFTlRfVFlQRSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5leHBvcnRzLlRFWFRfVEVYVF9JTlRFTlRfQ0xBU1NJRklDQVRJT05fTU9ERUxTID0gW1xuICAgICdmYXN0LWdwdC1qJyxcbl07XG5leHBvcnRzLlRFWFRfVEVYVF9JTlRFTlRfQ0xBU1NJRklDQVRJT05fQ09OVEVOVF9UWVBFID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmV4cG9ydHMuVEVYVF9URVhUX0tFWVdPUkRfRVhUUkFDVElPTl9NT0RFTFMgPSBbXG4gICAgJ2tleWJlcnQtcGFyYXBocmFzZS1NaW5pTE0tTDYtdjInLFxuICAgICdrZXliZXJ0LXBhcmFwaHJhc2UtbXVsdGlsaW5ndWFsLU1pbmlMTS1MMTItdjInLFxuXTtcbmV4cG9ydHMuVEVYVF9URVhUX0tFWVdPUkRfRVhUUkFDVElPTl9DT05URU5UX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZXhwb3J0cy5URVhUX1RFWFRfTEFOR1VBR0VfREVURUNUSU9OX01PREVMUyA9IFtcbiAgICAndG9mdHJ1cC1ldGFsLTIwMjEnLFxuICAgICd4bG0tcm9iZXJ0YS1iYXNlLWxhbmd1YWdlLWRldGVjdGlvbicsXG5dO1xuZXhwb3J0cy5URVhUX1RFWFRfTEFOR1VBR0VfREVURUNUSU9OX0NPTlRFTlRfVFlQRSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5leHBvcnRzLlRFWFRfVEVYVF9MQU5HVUFHRV9HRU5FUkFUSU9OX01PREVMUyA9IFtcbiAgICAnRWxldXRoZXJBSS1ncHQtbmVvLTJfN0InLFxuXTtcbmV4cG9ydHMuVEVYVF9URVhUX0xBTkdVQUdFX0dFTkVSQVRJT05fQ09OVEVOVF9UWVBFID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmV4cG9ydHMuVEVYVF9URVhUX05BTUVEX0VOVElUWV9SRUNPR05JVElPTl9NT0RFTFMgPSBbXG4gICAgJ2RibWR6LWJlcnQtbGFyZ2UtY2FzZWQtZmluZXR1bmVkLWNvbmxsMDMtZW5nbGlzaCcsXG5dO1xuZXhwb3J0cy5URVhUX1RFWFRfTkFNRURfRU5USVRZX1JFQ09HTklUSU9OX0NPTlRFTlRfVFlQRSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5leHBvcnRzLlRFWFRfVEVYVF9ORVhUX1NFTlRFTkNFX1BSRURJQ1RJT05fTU9ERUxTID0gW1xuICAgICdiZXJ0LWJhc2UtdW5jYXNlZCcsXG5dO1xuZXhwb3J0cy5URVhUX1RFWFRfTkVYVF9TRU5URU5DRV9QUkVESUNUSU9OX0NPTlRFTlRfVFlQRSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5leHBvcnRzLlRFWFRfVEVYVF9ORVhUX1dPUkRfUFJFRElDVElPTl9NT0RFTFMgPSBbXG4gICAgJ2FsYmVydC1iYXNlLXYyJyxcbiAgICAnYmVydC1iYXNlLXVuY2FzZWQnLFxuICAgICdkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZCcsXG4gICAgJ3JvYmVydGEtYmFzZScsXG5dO1xuZXhwb3J0cy5URVhUX1RFWFRfTkVYVF9XT1JEX1BSRURJQ1RJT05fQ09OVEVOVF9UWVBFID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmV4cG9ydHMuVEVYVF9URVhUX1BMVVJBTF9NT0RFTFMgPSBbXG4gICAgJ2luZmxlY3QnLFxuXTtcbmV4cG9ydHMuVEVYVF9URVhUX1BMVVJBTF9DT05URU5UX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZXhwb3J0cy5URVhUX1RFWFRfUFJPR1JBTU1JTkdfTEFOR1VBR0VfR0VORVJBVElPTl9NT0RFTFMgPSBbXG4gICAgJ3NlbnRkZXgtR1B5VCcsXG5dO1xuZXhwb3J0cy5URVhUX1RFWFRfUFJPR1JBTU1JTkdfTEFOR1VBR0VfR0VORVJBVElPTl9DT05URU5UX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZXhwb3J0cy5URVhUX1RFWFRfUVVFU1RJT05fQU5TV0VSSU5HX01PREVMUyA9IFtcbiAgICAnZGVlcHNldC1yb2JlcnRhLWJhc2Utc3F1YWQyJyxcbiAgICAnZGVlcHNldF9iZXJ0LWJhc2UtY2FzZWQtc3F1YWQyJyxcbiAgICAnZGlzdGlsYmVydC1iYXNlLWNhc2VkLWRpc3RpbGxlZC1zcXVhZCcsXG4gICAgJ21mZWItYWxiZXJ0LXh4bGFyZ2UtdjItc3F1YWQyJyxcbiAgICAnbXJtODQ4OC1iZXJ0LXRpbnktNS1maW5ldHVuZWQtc3F1YWR2MicsXG5dO1xuZXhwb3J0cy5URVhUX1RFWFRfUVVFU1RJT05fQU5TV0VSSU5HX0NPTlRFTlRfVFlQRSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5leHBvcnRzLlRFWFRfVEVYVF9TRU5URU5DRV9QQVJBUEhSQVNFUl9NT0RFTFMgPSBbXG4gICAgJ3JhbXNyaWdvdXRoYW1nLXQ1LWxhcmdlLXBhcmFwaHJhc2VyLWRpdmVyc2UtaGlnaC1xdWFsaXR5Jyxcbl07XG5leHBvcnRzLlRFWFRfVEVYVF9TRU5URU5DRV9QQVJBUEhSQVNFUl9DT05URU5UX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZXhwb3J0cy5URVhUX1RFWFRfU0VOVElNRU5UX0FOQUxZU0lTX01PREVMUyA9IFtcbiAgICAnZGlzdGlsYmVydC1iYXNlLXVuY2FzZWQnLFxuICAgICdkaXN0aWxiZXJ0LWJhc2UtdW5jYXNlZC1maW5ldHVuZWQtc3N0LTItZW5nbGlzaCcsXG4gICAgJ25scHRvd24tYmVydC1iYXNlLW11bHRpbGluZ3VhbC11bmNhc2VkLXNlbnRpbWVudCcsXG4gICAgJ3plcm8tc2hvdC1jbGFzc2lmaWNhdGlvbi1mYWNlYm9vay1iYXJ0LWxhcmdlLW1ubGknLFxuXTtcbmV4cG9ydHMuVEVYVF9URVhUX1NFTlRJTUVOVF9BTkFMWVNJU19DT05URU5UX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZXhwb3J0cy5URVhUX1RFWFRfU0lNSUxBUklUWV9NT0RFTFMgPSBbXG4gICAgJ2FsbC1NaW5pTE0tTDYtdjInLFxuXTtcbmV4cG9ydHMuVEVYVF9URVhUX1NJTUlMQVJJVFlfQ09OVEVOVF9UWVBFID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmV4cG9ydHMuVEVYVF9URVhUX1NVTU1BUklaQVRJT05fTU9ERUxTID0gW1xuICAgICdiYXJ0LWxhcmdlLWNubicsXG5dO1xuZXhwb3J0cy5URVhUX1RFWFRfU1VNTUFSSVpBVElPTl9DT05URU5UX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZXhwb3J0cy5URVhUX1RFWFRfVFJBTlNMQVRJT05fTU9ERUxTID0gW1xuICAgICdubGxiLTIwMC0zLTNiJyxcbl07XG5leHBvcnRzLlRFWFRfVEVYVF9UUkFOU0xBVElPTl9DT05URU5UX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZXhwb3J0cy5URVhUX1RFWFRfV09SRF9BTElHTk1FTlRfTU9ERUxTID0gW1xuICAgICdiZXJ0LWJhc2UtbXVsdGlsaW5ndWFsLWNhc2VkJyxcbl07XG5leHBvcnRzLlRFWFRfVEVYVF9XT1JEX0FMSUdOTUVOVF9DT05URU5UX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzTm90RGVmaW5lZCA9IGV4cG9ydHMuaXNEZWZpbmVkID0gdm9pZCAwO1xuZnVuY3Rpb24gaXNEZWZpbmVkKHgpIHtcbiAgICByZXR1cm4geCAhPT0gbnVsbCAmJiB0eXBlb2YgeCAhPT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzRGVmaW5lZCA9IGlzRGVmaW5lZDtcbmZ1bmN0aW9uIGlzTm90RGVmaW5lZCh4KSB7XG4gICAgcmV0dXJuIHggPT09IG51bGwgfHwgdHlwZW9mIHggPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc05vdERlZmluZWQgPSBpc05vdERlZmluZWQ7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0NjUpO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJhc3luYyIsImZldGNoQWRhcHRlciIsImNvbmZpZyIsInJlcXVlc3QiLCJoZWFkZXJzIiwiSGVhZGVycyIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiZGVjb2RlVVJJIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2V0IiwiYnRvYSIsIm1ldGhvZCIsInRvVXBwZXJDYXNlIiwib3B0aW9ucyIsImJvZHkiLCJkYXRhIiwibW9kZSIsImNhY2hlIiwiaW50ZWdyaXR5IiwicmVkaXJlY3QiLCJyZWZlcnJlciIsImlzVW5kZWZpbmVkIiwid2l0aENyZWRlbnRpYWxzIiwiY3JlZGVudGlhbHMiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwiUmVxdWVzdCIsImNyZWF0ZVJlcXVlc3QiLCJwcm9taXNlQ2hhaW4iLCJnZXRSZXNwb25zZSIsInRpbWVvdXQiLCJwdXNoIiwiUHJvbWlzZSIsInJlcyIsInNldFRpbWVvdXQiLCJtZXNzYWdlIiwidGltZW91dEVycm9yTWVzc2FnZSIsImNyZWF0ZUVycm9yIiwicmFjZSIsInJlc29sdmUiLCJyZWplY3QiLCJFcnJvciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNldHRsZSIsInN0YWdlT25lIiwiZmV0Y2giLCJlIiwicmVzcG9uc2UiLCJvayIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJyZXNwb25zZVR5cGUiLCJhcnJheUJ1ZmZlciIsImJsb2IiLCJqc29uIiwiZm9ybURhdGEiLCJ0ZXh0IiwiY29kZSIsImVycm9yIiwiaXNBeGlvc0Vycm9yIiwidG9KU09OIiwibmFtZSIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJlbmhhbmNlRXJyb3IiLCJ1dGlscyIsImNvb2tpZXMiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJ0cmFuc2l0aW9uYWxEZWZhdWx0cyIsIkF4aW9zRXJyb3IiLCJDYW5jZWxlZEVycm9yIiwicGFyc2VQcm90b2NvbCIsIm9uQ2FuY2VsZWQiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwiZG9uZSIsImNhbmNlbFRva2VuIiwidW5zdWJzY3JpYmUiLCJzaWduYWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNGb3JtRGF0YSIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwiWE1MSHR0cFJlcXVlc3QiLCJ1bmVzY2FwZSIsIkF1dGhvcml6YXRpb24iLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVRleHQiLCJ2YWx1ZSIsImVyciIsIm9wZW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJpbmRleE9mIiwib25hYm9ydCIsIkVDT05OQUJPUlRFRCIsIm9uZXJyb3IiLCJFUlJfTkVUV09SSyIsIm9udGltZW91dCIsInRyYW5zaXRpb25hbCIsImNsYXJpZnlUaW1lb3V0RXJyb3IiLCJFVElNRURPVVQiLCJ4c3JmVmFsdWUiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ1bmRlZmluZWQiLCJ4c3JmSGVhZGVyTmFtZSIsImZvckVhY2giLCJ2YWwiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbCIsInR5cGUiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJwcm90b2NvbCIsIkVSUl9CQURfUkVRVUVTVCIsInNlbmQiLCJiaW5kIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImF4aW9zIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwiZXh0ZW5kIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiVkVSU0lPTiIsInRvRm9ybURhdGEiLCJDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJwcm9taXNlIiwidG9rZW4iLCJ0aGVuIiwiX2xpc3RlbmVycyIsImkiLCJsIiwibGVuZ3RoIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsInJlYXNvbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJsaXN0ZW5lciIsImluZGV4Iiwic3BsaWNlIiwic291cmNlIiwiYyIsIkVSUl9DQU5DRUxFRCIsImluaGVyaXRzIiwiX19DQU5DRUxfXyIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsInZhbGlkYXRvciIsInZhbGlkYXRvcnMiLCJkZWZhdWx0cyIsImludGVyY2VwdG9ycyIsImNvbmZpZ09yVXJsIiwiYXNzZXJ0T3B0aW9ucyIsInNpbGVudEpTT05QYXJzaW5nIiwiYm9vbGVhbiIsImZvcmNlZEpTT05QYXJzaW5nIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJ1bldoZW4iLCJzeW5jaHJvbm91cyIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsImNoYWluIiwiQXJyYXkiLCJhcHBseSIsImNvbmNhdCIsInNoaWZ0IiwibmV3Q29uZmlnIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZ2V0VXJpIiwiZ2VuZXJhdGVIVFRQTWV0aG9kIiwiaXNGb3JtIiwiZGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJmcm9tIiwiY3VzdG9tUHJvcHMiLCJheGlvc0Vycm9yIiwidG9GbGF0T2JqZWN0Iiwib2JqIiwiYXNzaWduIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImlkIiwiZm4iLCJoIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwibWVyZ2UiLCJjb21tb24iLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwidGFyZ2V0IiwiaXNQbGFpbk9iamVjdCIsImlzQXJyYXkiLCJzbGljZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJwcm9wIiwidmFsdWVGcm9tQ29uZmlnMiIsImRlZmF1bHRUb0NvbmZpZzIiLCJtZXJnZURpcmVjdEtleXMiLCJtZXJnZU1hcCIsImtleXMiLCJjb25maWdWYWx1ZSIsInZhbGlkYXRlU3RhdHVzIiwiRVJSX0JBRF9SRVNQT05TRSIsIk1hdGgiLCJmbG9vciIsImZucyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsInByb2Nlc3MiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImlzQmxvYiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJpc0ZpbGVMaXN0IiwiaXNPYmplY3RQYXlsb2FkIiwiaXNPYmplY3QiLCJjb250ZW50VHlwZSIsIl9Gb3JtRGF0YSIsImVudiIsIkZvcm1EYXRhIiwicmF3VmFsdWUiLCJwYXJzZXIiLCJlbmNvZGVyIiwiaXNTdHJpbmciLCJKU09OIiwicGFyc2UiLCJ0cmltIiwic3RyaW5naWZ5Iiwic3RyaW5naWZ5U2FmZWx5Iiwic3RyaWN0SlNPTlBhcnNpbmciLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInRoaXNBcmciLCJhcmdzIiwiYXJndW1lbnRzIiwiZW5jb2RlIiwicmVwbGFjZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImpvaW4iLCJoYXNobWFya0luZGV4IiwicmVsYXRpdmVVUkwiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiaXNOdW1iZXIiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJkb2N1bWVudCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93IiwidGVzdCIsInBheWxvYWQiLCJvcmlnaW5VUkwiLCJtc2llIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJjcmVhdGVFbGVtZW50IiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0Iiwid2luZG93IiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwibm9ybWFsaXplZE5hbWUiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInNwbGl0IiwibGluZSIsInN1YnN0ciIsImV4ZWMiLCJjYWxsYmFjayIsImFyciIsImNvbnZlcnRWYWx1ZSIsImlzVHlwZWRBcnJheSIsIkJsb2IiLCJCdWZmZXIiLCJidWlsZCIsInBhcmVudEtleSIsImZ1bGxLZXkiLCJlbmRzV2l0aCIsInRvQXJyYXkiLCJlbCIsImFwcGVuZCIsInBvcCIsInRoaW5nIiwiZGVwcmVjYXRlZFdhcm5pbmdzIiwidmVyc2lvbiIsImZvcm1hdE1lc3NhZ2UiLCJvcHQiLCJkZXNjIiwib3B0cyIsIkVSUl9ERVBSRUNBVEVEIiwiY29uc29sZSIsIndhcm4iLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJFUlJfQkFEX09QVElPTl9WQUxVRSIsInJlc3VsdCIsIkVSUl9CQURfT1BUSU9OIiwia2luZE9mIiwic3RyIiwia2luZE9mVGVzdCIsImdldFByb3RvdHlwZU9mIiwiaXNGdW5jdGlvbiIsImhhc093blByb3BlcnR5IiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJjb25zdHJ1Y3RvciIsInBhdHRlcm4iLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsInBpcGUiLCJwcm9kdWN0IiwiYXNzaWduVmFsdWUiLCJhIiwiYiIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJDb2RlQXQiLCJzdXBlckNvbnN0cnVjdG9yIiwicHJvcHMiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwiZmlsdGVyIiwibWVyZ2VkIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNlYXJjaFN0cmluZyIsInBvc2l0aW9uIiwiU3RyaW5nIiwibGFzdEluZGV4IiwiX19hc3NpZ24iLCJ0IiwicyIsIm4iLCJwIiwiRnJvbUF1ZGlvVG9UZXh0IiwibW9kZWxzXzEiLCJodHRwX2NsaWVudF8xIiwiZnBfMSIsImh0dHBDbGllbnQiLCJnZXRIdHRwQ2xpZW50IiwiYXVkaW9UcmFuc2NyaXB0aW9uIiwiX2EiLCJpc0RlZmluZWQiLCJhdWRpbyIsImF1ZGlvX3VybCIsImxhbmd1YWdlIiwicG9zdCIsInVzZUZldGNoIiwiQVVESU9fVEVYVF9BVURJT19UUkFOU0NSSVBUSU9OX0NPTlRFTlRfVFlQRSIsInF1ZXJ5IiwibW9kZWwiLCJGcm9tQXVkaW8iLCJmcm9tX2F1ZGlvX3RvX3RleHRfMSIsImZyb21BdWRpb1RvVGV4dEluc3QiLCJ0b1RleHQiLCJGcm9tSW1hZ2VUb0ltYWdlIiwiYmFja2dyb3VuZFJlbW92YWwiLCJpbWFnZSIsImltYWdlX3VybCIsIklNQUdFX0lNQUdFX0JBQ0tHUk9VTkRfUkVNT1ZBTF9DT05URU5UX1RZUEUiLCJjb2xvcml6YXRpb24iLCJJTUFHRV9JTUFHRV9DT0xPUklaQVRJT05fQ09OVEVOVF9UWVBFIiwiZmFjZUJsdXJpbmciLCJJTUFHRV9JTUFHRV9GQUNFX0JMVVJJTkdfQ09OVEVOVF9UWVBFIiwidW5jb2xvcml6YXRpb24iLCJJTUFHRV9JTUFHRV9VTkNPTE9SSVpBVElPTl9DT05URU5UX1RZUEUiLCJGcm9tSW1hZ2VUb1RleHQiLCJhc2NpaWZ5IiwiSU1BR0VfVEVYVF9BU0NJSUZZX0NPTlRFTlRfVFlQRSIsImNsYXNzaWZpY2F0aW9uIiwidG9wX2siLCJJTUFHRV9URVhUX0NMQVNTSUZJQ0FUSU9OX0NPTlRFTlRfVFlQRSIsIm9jciIsInNvdXJjZV9sYW5ndWFnZSIsIklNQUdFX1RFWFRfT0NSX0NPTlRFTlRfVFlQRSIsIkZyb21JbWFnZSIsImZyb21faW1hZ2VfdG9faW1hZ2VfMSIsImZyb21faW1hZ2VfdG9fdGV4dF8xIiwiZnJvbUltYWdlVG9JbWFnZUluc3QiLCJmcm9tSW1hZ2VUb1RleHRJbnN0IiwidG9JbWFnZSIsIkZyb21UZXh0VG9JbWFnZSIsInVybF9mb3JtX2RhdGFfMSIsImltYWdlR2VuZXJhdGlvbiIsIlVybEZvcm1EYXRhIiwicHJvbXB0Iiwic2FtcGxlcyIsInN0ZXBzIiwic2VlZCIsIlRFWFRfSU1BR0VfSU1BR0VfR0VORVJBVElPTl9DT05URU5UX1RZUEUiLCJGcm9tVGV4dFRvVGV4dCIsImFkR2VuZXJhdGlvbiIsImtleXdvcmRzIiwiVEVYVF9URVhUX0FEX0dFTkVSQVRJT05fQ09OVEVOVF9UWVBFIiwiYXJ0aWNsZUdlbmVyYXRpb24iLCJ0aXRsZSIsIlRFWFRfVEVYVF9BUlRJQ0xFX0dFTkVSQVRJT05fQ09OVEVOVF9UWVBFIiwiYXV0b2NvcnJlY3QiLCJzZW50ZW5jZSIsIlRFWFRfVEVYVF9BVVRPQ09SUkVDVF9DT05URU5UX1RZUEUiLCJlbW90aW9uUmVjb2duaXRpb24iLCJURVhUX1RFWFRfRU1PVElPTl9SRUNPR05JVElPTl9DT05URU5UX1RZUEUiLCJoYXRlU3BlZWNoRGV0ZWN0aW9uIiwiVEVYVF9URVhUX0hBVEVfU1BFRUNIX0RFVEVDVElPTl9DT05URU5UX1RZUEUiLCJpbnRlbnRDbGFzc2lmaWNhdGlvbiIsIlRFWFRfVEVYVF9JTlRFTlRfQ0xBU1NJRklDQVRJT05fQ09OVEVOVF9UWVBFIiwia2V5d29yZEV4dHJhY3Rpb24iLCJURVhUX1RFWFRfS0VZV09SRF9FWFRSQUNUSU9OX0NPTlRFTlRfVFlQRSIsImxhbmd1YWdlRGV0ZWN0aW9uIiwiVEVYVF9URVhUX0xBTkdVQUdFX0RFVEVDVElPTl9DT05URU5UX1RZUEUiLCJsYW5ndWFnZUdlbmVyYXRpb24iLCJURVhUX1RFWFRfTEFOR1VBR0VfR0VORVJBVElPTl9DT05URU5UX1RZUEUiLCJuYW1lZEVudGl0eVJlY29nbml0aW9uIiwiVEVYVF9URVhUX05BTUVEX0VOVElUWV9SRUNPR05JVElPTl9DT05URU5UX1RZUEUiLCJuZXh0U2VudGVuY2VQcmVkaWN0aW9uIiwic2VudGVuY2VfMSIsInNlbnRlbmNlXzIiLCJURVhUX1RFWFRfTkVYVF9TRU5URU5DRV9QUkVESUNUSU9OX0NPTlRFTlRfVFlQRSIsIm5leHRXb3JkUHJlZGljdGlvbiIsIlRFWFRfVEVYVF9ORVhUX1dPUkRfUFJFRElDVElPTl9DT05URU5UX1RZUEUiLCJwbHVyYWwiLCJ3b3JkIiwiY291bnQiLCJURVhUX1RFWFRfUExVUkFMX0NPTlRFTlRfVFlQRSIsInByb2dyYW1taW5nTGFuZ3VhZ2VHZW5lcmF0aW9uIiwiY29kZV9zbmlwcGV0IiwiVEVYVF9URVhUX1BST0dSQU1NSU5HX0xBTkdVQUdFX0dFTkVSQVRJT05fQ09OVEVOVF9UWVBFIiwicXVlc3Rpb25BbnN3ZXJpbmciLCJxdWVzdGlvbiIsIlRFWFRfVEVYVF9RVUVTVElPTl9BTlNXRVJJTkdfQ09OVEVOVF9UWVBFIiwic2VudGVuY2VQYXJhcGhyYXNlciIsIlRFWFRfVEVYVF9TRU5URU5DRV9QQVJBUEhSQVNFUl9DT05URU5UX1RZUEUiLCJzZW50aW1lbnRBbmFseXNpcyIsIlRFWFRfVEVYVF9TRU5USU1FTlRfQU5BTFlTSVNfQ09OVEVOVF9UWVBFIiwic2ltaWxhcml0eSIsIlRFWFRfVEVYVF9TSU1JTEFSSVRZX0NPTlRFTlRfVFlQRSIsInN1bW1hcml6YXRpb24iLCJURVhUX1RFWFRfU1VNTUFSSVpBVElPTl9DT05URU5UX1RZUEUiLCJ0cmFuc2xhdGlvbiIsIlRFWFRfVEVYVF9UUkFOU0xBVElPTl9DT05URU5UX1RZUEUiLCJ3b3JkQWxpZ25tZW50IiwiaW5wdXRfc3RyaW5nX2xhbmd1YWdlXzEiLCJpbnB1dF9zdHJpbmdfbGFuZ3VhZ2VfMiIsIlRFWFRfVEVYVF9XT1JEX0FMSUdOTUVOVF9DT05URU5UX1RZUEUiLCJGcm9tVGV4dCIsImZyb21fdGV4dF90b19pbWFnZV8xIiwiZnJvbV90ZXh0X3RvX3RleHRfMSIsImZyb21UZXh0VG9JbWFnZUluc3QiLCJmcm9tVGV4dFRvVGV4dEluc3QiLCJTaG9ydGN1dHMiLCJmcm9tQXVkaW8iLCJmcm9tSW1hZ2UiLCJmcm9tVGV4dCIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJkIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfXyIsIkdsYWRpYUNsaWVudCIsInNob3J0Y3V0c18xIiwiZnJvbV9hdWRpb18xIiwiZnJvbV9pbWFnZV8xIiwiZnJvbV90ZXh0XzEiLCJfc3VwZXIiLCJfdGhpcyIsInZhbGlkYXRlZFBhcmFtcyIsImZyb21BdWRpb0luc3QiLCJmcm9tSW1hZ2VJbnN0IiwiZnJvbVRleHRJbnN0IiwiX19jcmVhdGVCaW5kaW5nIiwibyIsIm0iLCJrIiwiazIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwiX19leHBvcnRTdGFyIiwiX19pbXBvcnRTdGFyIiwibW9kIiwibWV0YSIsImdsYWRpYSIsImdsYWRpYV9jbGllbnRfMSIsImdsYWRpYV9jbGllbnRfMiIsImF4aW9zRmV0Y2hBZGFwdGVyIiwiZGVmYXVsdCIsIl9fYXdhaXRlciIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwic3RlcCIsIm5leHQiLCJfX2dlbmVyYXRvciIsImYiLCJ5IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib3AiLCJfX2ltcG9ydERlZmF1bHQiLCJheGlvc18xIiwiYXhpb3NfZmV0Y2hfYWRhcHRlcl8xIiwic2RrX3ZlcnNpb25fMSIsInNlYXJjaF9xdWVyeV9wYXJhbV9zZXJpYWxpemVyXzEiLCJfYiIsIl9jIiwiX2QiLCJfZSIsImN1c3RvbUh0dHBDbGllbnQiLCJBeGlvc0h0dHBDbGllbnQiLCJiYXNlSGVhZGVycyIsImFwaUtleSIsIlNES19WRVJTSU9OIiwiYmFzZVVybCIsImh0dHBDbGllbnRUaW1lb3V0Iiwic2VhcmNoUXVlcnlQYXJhbVNlcmlhbGl6ZXIiLCJzZWFyY2hQYXJhbURlc2VyaWFsaXplciIsInNlYXJjaFBhcmFtU2VyaWFsaXplciIsImVudHJpZXMiLCJtYXAiLCJlbmNvZGVVUkkiLCJkZWNvZGUiLCJpc05vdERlZmluZWQiLCJzZXJpYWxpemVkUGFyYW0iLCJmcm9tRW50cmllcyIsImluY2x1ZGVzIiwiZnJvbVN0cmluZyIsIkVORFBPSU5UX0RFRlMiLCJnZXRDb250ZW50VHlwZU5hbWUiLCJlbmRwb2ludCIsImlucHV0VHlwZSIsIm91dHB1dFR5cGUiLCJ0YXNrTmFtZSIsImdldEVuZHBvaW50c0J5SW5wdXRPdXRwdXQiLCJnZXRFbmRwb2ludHMiLCJlbmRwb2ludF9kZWZzXzEiLCJieSIsIl9pIiwiZW5kcG9pbnRzXzEiLCJnZXRJbnB1dE1vZGVsVHlwZSIsInV0aWxzXzEiLCJjYXBpdGFsaXplRmlyc3QiLCJrZWJhYlRvUGFzY2FsQ2FzZSIsImdldE1ldGhvZE5hbWUiLCJrZWJhYlRvQ2FtZWxDYXNlIiwiZ2V0TW9kZWxUeXBlTmFtZSIsImVuZHBvaW50TmFtZSIsImdldE1vZGVsVmFsdWVzTmFtZSIsImtlYmFiVG9TbmFrZUNhc2UiLCJnZXRPdXRwdXRNb2RlbFR5cGUiLCJnZXRfZW5kcG9pbnRzXzEiLCJnZXRfY29udGVudF90eXBlX25hbWVfMSIsImdldF9tZXRob2RfbmFtZV8xIiwiZ2V0X21vZGVsX3R5cGVfbmFtZV8xIiwiZ2V0X21vZGVsX3ZhbHVlc19uYW1lXzEiLCJnZXRfaW5wdXRfbW9kZWxfdHlwZV8xIiwiZ2V0X291dHB1dF9tb2RlbF90eXBlXzEiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJwYWNrIiwiYXIiLCJzdWJzdHJpbmciLCJ1bmNhcGl0YWxpemVGaXJzdCIsIndvcmRzIiwiVEVYVF9URVhUX1NFTlRFTkNFX1BBUkFQSFJBU0VSX01PREVMUyIsIlRFWFRfVEVYVF9RVUVTVElPTl9BTlNXRVJJTkdfTU9ERUxTIiwiVEVYVF9URVhUX1BST0dSQU1NSU5HX0xBTkdVQUdFX0dFTkVSQVRJT05fTU9ERUxTIiwiVEVYVF9URVhUX1BMVVJBTF9NT0RFTFMiLCJURVhUX1RFWFRfTkVYVF9XT1JEX1BSRURJQ1RJT05fTU9ERUxTIiwiVEVYVF9URVhUX05FWFRfU0VOVEVOQ0VfUFJFRElDVElPTl9NT0RFTFMiLCJURVhUX1RFWFRfTkFNRURfRU5USVRZX1JFQ09HTklUSU9OX01PREVMUyIsIlRFWFRfVEVYVF9MQU5HVUFHRV9HRU5FUkFUSU9OX01PREVMUyIsIlRFWFRfVEVYVF9MQU5HVUFHRV9ERVRFQ1RJT05fTU9ERUxTIiwiVEVYVF9URVhUX0tFWVdPUkRfRVhUUkFDVElPTl9NT0RFTFMiLCJURVhUX1RFWFRfSU5URU5UX0NMQVNTSUZJQ0FUSU9OX01PREVMUyIsIlRFWFRfVEVYVF9IQVRFX1NQRUVDSF9ERVRFQ1RJT05fTU9ERUxTIiwiVEVYVF9URVhUX0VNT1RJT05fUkVDT0dOSVRJT05fTU9ERUxTIiwiVEVYVF9URVhUX0FVVE9DT1JSRUNUX01PREVMUyIsIlRFWFRfVEVYVF9BUlRJQ0xFX0dFTkVSQVRJT05fTU9ERUxTIiwiVEVYVF9URVhUX0FEX0dFTkVSQVRJT05fTU9ERUxTIiwiVEVYVF9JTUFHRV9JTUFHRV9HRU5FUkFUSU9OX01PREVMUyIsIklNQUdFX1RFWFRfT0NSX01PREVMUyIsIklNQUdFX1RFWFRfQ0xBU1NJRklDQVRJT05fTU9ERUxTIiwiSU1BR0VfVEVYVF9BU0NJSUZZX01PREVMUyIsIklNQUdFX0lNQUdFX1VOQ09MT1JJWkFUSU9OX01PREVMUyIsIklNQUdFX0lNQUdFX0ZBQ0VfQkxVUklOR19NT0RFTFMiLCJJTUFHRV9JTUFHRV9DT0xPUklaQVRJT05fTU9ERUxTIiwiSU1BR0VfSU1BR0VfQkFDS0dST1VORF9SRU1PVkFMX01PREVMUyIsIkFVRElPX1RFWFRfQVVESU9fVFJBTlNDUklQVElPTl9NT0RFTFMiLCJURVhUX1RFWFRfV09SRF9BTElHTk1FTlRfTU9ERUxTIiwiVEVYVF9URVhUX1RSQU5TTEFUSU9OX01PREVMUyIsIlRFWFRfVEVYVF9TVU1NQVJJWkFUSU9OX01PREVMUyIsIlRFWFRfVEVYVF9TSU1JTEFSSVRZX01PREVMUyIsIlRFWFRfVEVYVF9TRU5USU1FTlRfQU5BTFlTSVNfTU9ERUxTIiwieCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkZWZpbml0aW9uIiwiciIsInRvU3RyaW5nVGFnIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=