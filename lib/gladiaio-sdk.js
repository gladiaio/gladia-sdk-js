!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("gladiaio_sdk",[],t):"object"==typeof exports?exports.gladiaio_sdk=t():e.gladiaio_sdk=t()}(window,(function(){return function(){var e={9662:function(e,t,n){var r=n(614),o=n(6330),a=TypeError;e.exports=function(e){if(r(e))return e;throw a(o(e)+" is not a function")}},9483:function(e,t,n){var r=n(4411),o=n(6330),a=TypeError;e.exports=function(e){if(r(e))return e;throw a(o(e)+" is not a constructor")}},6077:function(e,t,n){var r=n(614),o=String,a=TypeError;e.exports=function(e){if("object"==typeof e||r(e))return e;throw a("Can't set "+o(e)+" as a prototype")}},5787:function(e,t,n){var r=n(7976),o=TypeError;e.exports=function(e,t){if(r(t,e))return e;throw o("Incorrect invocation")}},9670:function(e,t,n){var r=n(111),o=String,a=TypeError;e.exports=function(e){if(r(e))return e;throw a(o(e)+" is not an object")}},1318:function(e,t,n){var r=n(5656),o=n(1400),a=n(6244),i=function(e){return function(t,n,i){var u,p=r(t),s=a(p),_=o(i,s);if(e&&n!=n){for(;s>_;)if((u=p[_++])!=u)return!0}else for(;s>_;_++)if((e||_ in p)&&p[_]===n)return e||_||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},206:function(e,t,n){var r=n(1702);e.exports=r([].slice)},7072:function(e,t,n){var r=n(5112)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[r]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var a={};a[r]=function(){return{next:function(){return{done:n=!0}}}},e(a)}catch(e){}return n}},4326:function(e,t,n){var r=n(1702),o=r({}.toString),a=r("".slice);e.exports=function(e){return a(o(e),8,-1)}},648:function(e,t,n){var r=n(1694),o=n(614),a=n(4326),i=n(5112)("toStringTag"),u=Object,p="Arguments"==a(function(){return arguments}());e.exports=r?a:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=u(e),i))?n:p?a(t):"Object"==(r=a(t))&&o(t.callee)?"Arguments":r}},9920:function(e,t,n){var r=n(2597),o=n(3887),a=n(1236),i=n(3070);e.exports=function(e,t,n){for(var u=o(t),p=i.f,s=a.f,_=0;_<u.length;_++){var T=u[_];r(e,T)||n&&r(n,T)||p(e,T,s(t,T))}}},8880:function(e,t,n){var r=n(9781),o=n(3070),a=n(9114);e.exports=r?function(e,t,n){return o.f(e,t,a(1,n))}:function(e,t,n){return e[t]=n,e}},9114:function(e){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:function(e,t,n){"use strict";var r=n(4948),o=n(3070),a=n(9114);e.exports=function(e,t,n){var i=r(t);i in e?o.f(e,i,a(0,n)):e[i]=n}},8052:function(e,t,n){var r=n(614),o=n(3070),a=n(6339),i=n(3072);e.exports=function(e,t,n,u){u||(u={});var p=u.enumerable,s=void 0!==u.name?u.name:t;if(r(n)&&a(n,s,u),u.global)p?e[t]=n:i(t,n);else{try{u.unsafe?e[t]&&(p=!0):delete e[t]}catch(e){}p?e[t]=n:o.f(e,t,{value:n,enumerable:!1,configurable:!u.nonConfigurable,writable:!u.nonWritable})}return e}},3072:function(e,t,n){var r=n(7854),o=Object.defineProperty;e.exports=function(e,t){try{o(r,e,{value:t,configurable:!0,writable:!0})}catch(n){r[e]=t}return t}},9781:function(e,t,n){var r=n(7293);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:function(e,t,n){var r=n(7854),o=n(111),a=r.document,i=o(a)&&o(a.createElement);e.exports=function(e){return i?a.createElement(e):{}}},7871:function(e,t,n){var r=n(3823),o=n(5268);e.exports=!r&&!o&&"object"==typeof window&&"object"==typeof document},3823:function(e){e.exports="object"==typeof Deno&&Deno&&"object"==typeof Deno.version},1528:function(e,t,n){var r=n(8113),o=n(7854);e.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==o.Pebble},6833:function(e,t,n){var r=n(8113);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},5268:function(e,t,n){var r=n(4326),o=n(7854);e.exports="process"==r(o.process)},1036:function(e,t,n){var r=n(8113);e.exports=/web0s(?!.*chrome)/i.test(r)},8113:function(e,t,n){var r=n(5005);e.exports=r("navigator","userAgent")||""},7392:function(e,t,n){var r,o,a=n(7854),i=n(8113),u=a.process,p=a.Deno,s=u&&u.versions||p&&p.version,_=s&&s.v8;_&&(o=(r=_.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(o=+r[1]),e.exports=o},748:function(e){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:function(e,t,n){var r=n(7854),o=n(1236).f,a=n(8880),i=n(8052),u=n(3072),p=n(9920),s=n(4705);e.exports=function(e,t){var n,_,T,l,d,c=e.target,m=e.global,f=e.stat;if(n=m?r:f?r[c]||u(c,{}):(r[c]||{}).prototype)for(_ in t){if(l=t[_],T=e.dontCallGetSet?(d=o(n,_))&&d.value:n[_],!s(m?_:c+(f?".":"#")+_,e.forced)&&void 0!==T){if(typeof l==typeof T)continue;p(l,T)}(e.sham||T&&T.sham)&&a(l,"sham",!0),i(n,_,l,e)}}},7293:function(e){e.exports=function(e){try{return!!e()}catch(e){return!0}}},2104:function(e,t,n){var r=n(4374),o=Function.prototype,a=o.apply,i=o.call;e.exports="object"==typeof Reflect&&Reflect.apply||(r?i.bind(a):function(){return i.apply(a,arguments)})},9974:function(e,t,n){var r=n(1702),o=n(9662),a=n(4374),i=r(r.bind);e.exports=function(e,t){return o(e),void 0===t?e:a?i(e,t):function(){return e.apply(t,arguments)}}},4374:function(e,t,n){var r=n(7293);e.exports=!r((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},6916:function(e,t,n){var r=n(4374),o=Function.prototype.call;e.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},6530:function(e,t,n){var r=n(9781),o=n(2597),a=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,u=o(a,"name"),p=u&&"something"===function(){}.name,s=u&&(!r||r&&i(a,"name").configurable);e.exports={EXISTS:u,PROPER:p,CONFIGURABLE:s}},1702:function(e,t,n){var r=n(4374),o=Function.prototype,a=o.bind,i=o.call,u=r&&a.bind(i,i);e.exports=r?function(e){return e&&u(e)}:function(e){return e&&function(){return i.apply(e,arguments)}}},5005:function(e,t,n){var r=n(7854),o=n(614),a=function(e){return o(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?a(r[e]):r[e]&&r[e][t]}},1246:function(e,t,n){var r=n(648),o=n(8173),a=n(7497),i=n(5112)("iterator");e.exports=function(e){if(null!=e)return o(e,i)||o(e,"@@iterator")||a[r(e)]}},8554:function(e,t,n){var r=n(6916),o=n(9662),a=n(9670),i=n(6330),u=n(1246),p=TypeError;e.exports=function(e,t){var n=arguments.length<2?u(e):t;if(o(n))return a(r(n,e));throw p(i(e)+" is not iterable")}},8173:function(e,t,n){var r=n(9662);e.exports=function(e,t){var n=e[t];return null==n?void 0:r(n)}},7854:function(e,t,n){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},2597:function(e,t,n){var r=n(1702),o=n(7908),a=r({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return a(o(e),t)}},3501:function(e){e.exports={}},842:function(e,t,n){var r=n(7854);e.exports=function(e,t){var n=r.console;n&&n.error&&(1==arguments.length?n.error(e):n.error(e,t))}},490:function(e,t,n){var r=n(5005);e.exports=r("document","documentElement")},4664:function(e,t,n){var r=n(9781),o=n(7293),a=n(317);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},8361:function(e,t,n){var r=n(1702),o=n(7293),a=n(4326),i=Object,u=r("".split);e.exports=o((function(){return!i("z").propertyIsEnumerable(0)}))?function(e){return"String"==a(e)?u(e,""):i(e)}:i},2788:function(e,t,n){var r=n(1702),o=n(614),a=n(5465),i=r(Function.toString);o(a.inspectSource)||(a.inspectSource=function(e){return i(e)}),e.exports=a.inspectSource},9909:function(e,t,n){var r,o,a,i=n(8536),u=n(7854),p=n(1702),s=n(111),_=n(8880),T=n(2597),l=n(5465),d=n(6200),c=n(3501),m="Object already initialized",f=u.TypeError,E=u.WeakMap;if(i||l.state){var y=l.state||(l.state=new E),g=p(y.get),N=p(y.has),v=p(y.set);r=function(e,t){if(N(y,e))throw new f(m);return t.facade=e,v(y,e,t),t},o=function(e){return g(y,e)||{}},a=function(e){return N(y,e)}}else{var O=d("state");c[O]=!0,r=function(e,t){if(T(e,O))throw new f(m);return t.facade=e,_(e,O,t),t},o=function(e){return T(e,O)?e[O]:{}},a=function(e){return T(e,O)}}e.exports={set:r,get:o,has:a,enforce:function(e){return a(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!s(t)||(n=o(t)).type!==e)throw f("Incompatible receiver, "+e+" required");return n}}}},7659:function(e,t,n){var r=n(5112),o=n(7497),a=r("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||i[a]===e)}},614:function(e){e.exports=function(e){return"function"==typeof e}},4411:function(e,t,n){var r=n(1702),o=n(7293),a=n(614),i=n(648),u=n(5005),p=n(2788),s=function(){},_=[],T=u("Reflect","construct"),l=/^\s*(?:class|function)\b/,d=r(l.exec),c=!l.exec(s),m=function(e){if(!a(e))return!1;try{return T(s,_,e),!0}catch(e){return!1}},f=function(e){if(!a(e))return!1;switch(i(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return c||!!d(l,p(e))}catch(e){return!0}};f.sham=!0,e.exports=!T||o((function(){var e;return m(m.call)||!m(Object)||!m((function(){e=!0}))||e}))?f:m},4705:function(e,t,n){var r=n(7293),o=n(614),a=/#|\.prototype\./,i=function(e,t){var n=p[u(e)];return n==_||n!=s&&(o(t)?r(t):!!t)},u=i.normalize=function(e){return String(e).replace(a,".").toLowerCase()},p=i.data={},s=i.NATIVE="N",_=i.POLYFILL="P";e.exports=i},111:function(e,t,n){var r=n(614);e.exports=function(e){return"object"==typeof e?null!==e:r(e)}},1913:function(e){e.exports=!1},2190:function(e,t,n){var r=n(5005),o=n(614),a=n(7976),i=n(3307),u=Object;e.exports=i?function(e){return"symbol"==typeof e}:function(e){var t=r("Symbol");return o(t)&&a(t.prototype,u(e))}},408:function(e,t,n){var r=n(9974),o=n(6916),a=n(9670),i=n(6330),u=n(7659),p=n(6244),s=n(7976),_=n(8554),T=n(1246),l=n(9212),d=TypeError,c=function(e,t){this.stopped=e,this.result=t},m=c.prototype;e.exports=function(e,t,n){var f,E,y,g,N,v,O,h=n&&n.that,x=!(!n||!n.AS_ENTRIES),C=!(!n||!n.IS_RECORD),I=!(!n||!n.IS_ITERATOR),b=!(!n||!n.INTERRUPTED),A=r(t,h),S=function(e){return f&&l(f,"normal",e),new c(!0,e)},w=function(e){return x?(a(e),b?A(e[0],e[1],S):A(e[0],e[1])):b?A(e,S):A(e)};if(C)f=e.iterator;else if(I)f=e;else{if(!(E=T(e)))throw d(i(e)+" is not iterable");if(u(E)){for(y=0,g=p(e);g>y;y++)if((N=w(e[y]))&&s(m,N))return N;return new c(!1)}f=_(e,E)}for(v=C?e.next:f.next;!(O=o(v,f)).done;){try{N=w(O.value)}catch(e){l(f,"throw",e)}if("object"==typeof N&&N&&s(m,N))return N}return new c(!1)}},9212:function(e,t,n){var r=n(6916),o=n(9670),a=n(8173);e.exports=function(e,t,n){var i,u;o(e);try{if(!(i=a(e,"return"))){if("throw"===t)throw n;return n}i=r(i,e)}catch(e){u=!0,i=e}if("throw"===t)throw n;if(u)throw i;return o(i),n}},7497:function(e){e.exports={}},6244:function(e,t,n){var r=n(7466);e.exports=function(e){return r(e.length)}},6339:function(e,t,n){var r=n(7293),o=n(614),a=n(2597),i=n(9781),u=n(6530).CONFIGURABLE,p=n(2788),s=n(9909),_=s.enforce,T=s.get,l=Object.defineProperty,d=i&&!r((function(){return 8!==l((function(){}),"length",{value:8}).length})),c=String(String).split("String"),m=e.exports=function(e,t,n){"Symbol("===String(t).slice(0,7)&&(t="["+String(t).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!a(e,"name")||u&&e.name!==t)&&(i?l(e,"name",{value:t,configurable:!0}):e.name=t),d&&n&&a(n,"arity")&&e.length!==n.arity&&l(e,"length",{value:n.arity});try{n&&a(n,"constructor")&&n.constructor?i&&l(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var r=_(e);return a(r,"source")||(r.source=c.join("string"==typeof t?t:"")),e};Function.prototype.toString=m((function(){return o(this)&&T(this).source||p(this)}),"toString")},4758:function(e){var t=Math.ceil,n=Math.floor;e.exports=Math.trunc||function(e){var r=+e;return(r>0?n:t)(r)}},5948:function(e,t,n){var r,o,a,i,u,p,s,_,T=n(7854),l=n(9974),d=n(1236).f,c=n(261).set,m=n(6833),f=n(1528),E=n(1036),y=n(5268),g=T.MutationObserver||T.WebKitMutationObserver,N=T.document,v=T.process,O=T.Promise,h=d(T,"queueMicrotask"),x=h&&h.value;x||(r=function(){var e,t;for(y&&(e=v.domain)&&e.exit();o;){t=o.fn,o=o.next;try{t()}catch(e){throw o?i():a=void 0,e}}a=void 0,e&&e.enter()},m||y||E||!g||!N?!f&&O&&O.resolve?((s=O.resolve(void 0)).constructor=O,_=l(s.then,s),i=function(){_(r)}):y?i=function(){v.nextTick(r)}:(c=l(c,T),i=function(){c(r)}):(u=!0,p=N.createTextNode(""),new g(r).observe(p,{characterData:!0}),i=function(){p.data=u=!u})),e.exports=x||function(e){var t={fn:e,next:void 0};a&&(a.next=t),o||(o=t,i()),a=t}},133:function(e,t,n){var r=n(7392),o=n(7293);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},8536:function(e,t,n){var r=n(7854),o=n(614),a=n(2788),i=r.WeakMap;e.exports=o(i)&&/native code/.test(a(i))},8523:function(e,t,n){"use strict";var r=n(9662),o=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)};e.exports.f=function(e){return new o(e)}},1574:function(e,t,n){"use strict";var r=n(9781),o=n(1702),a=n(6916),i=n(7293),u=n(1956),p=n(5181),s=n(5296),_=n(7908),T=n(8361),l=Object.assign,d=Object.defineProperty,c=o([].concat);e.exports=!l||i((function(){if(r&&1!==l({b:1},l(d({},"a",{enumerable:!0,get:function(){d(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),o="abcdefghijklmnopqrst";return e[n]=7,o.split("").forEach((function(e){t[e]=e})),7!=l({},e)[n]||u(l({},t)).join("")!=o}))?function(e,t){for(var n=_(e),o=arguments.length,i=1,l=p.f,d=s.f;o>i;)for(var m,f=T(arguments[i++]),E=l?c(u(f),l(f)):u(f),y=E.length,g=0;y>g;)m=E[g++],r&&!a(d,f,m)||(n[m]=f[m]);return n}:l},3070:function(e,t,n){var r=n(9781),o=n(4664),a=n(3353),i=n(9670),u=n(4948),p=TypeError,s=Object.defineProperty,_=Object.getOwnPropertyDescriptor;t.f=r?a?function(e,t,n){if(i(e),t=u(t),i(n),"function"==typeof e&&"prototype"===t&&"value"in n&&"writable"in n&&!n.writable){var r=_(e,t);r&&r.writable&&(e[t]=n.value,n={configurable:"configurable"in n?n.configurable:r.configurable,enumerable:"enumerable"in n?n.enumerable:r.enumerable,writable:!1})}return s(e,t,n)}:s:function(e,t,n){if(i(e),t=u(t),i(n),o)try{return s(e,t,n)}catch(e){}if("get"in n||"set"in n)throw p("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},1236:function(e,t,n){var r=n(9781),o=n(6916),a=n(5296),i=n(9114),u=n(5656),p=n(4948),s=n(2597),_=n(4664),T=Object.getOwnPropertyDescriptor;t.f=r?T:function(e,t){if(e=u(e),t=p(t),_)try{return T(e,t)}catch(e){}if(s(e,t))return i(!o(a.f,e,t),e[t])}},8006:function(e,t,n){var r=n(6324),o=n(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},5181:function(e,t){t.f=Object.getOwnPropertySymbols},7976:function(e,t,n){var r=n(1702);e.exports=r({}.isPrototypeOf)},6324:function(e,t,n){var r=n(1702),o=n(2597),a=n(5656),i=n(1318).indexOf,u=n(3501),p=r([].push);e.exports=function(e,t){var n,r=a(e),s=0,_=[];for(n in r)!o(u,n)&&o(r,n)&&p(_,n);for(;t.length>s;)o(r,n=t[s++])&&(~i(_,n)||p(_,n));return _}},1956:function(e,t,n){var r=n(6324),o=n(748);e.exports=Object.keys||function(e){return r(e,o)}},5296:function(e,t){"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!n.call({1:2},1);t.f=o?function(e){var t=r(this,e);return!!t&&t.enumerable}:n},7674:function(e,t,n){var r=n(1702),o=n(9670),a=n(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(e){}return function(n,r){return o(n),a(r),t?e(n,r):n.__proto__=r,n}}():void 0)},4699:function(e,t,n){var r=n(9781),o=n(1702),a=n(1956),i=n(5656),u=o(n(5296).f),p=o([].push),s=function(e){return function(t){for(var n,o=i(t),s=a(o),_=s.length,T=0,l=[];_>T;)n=s[T++],r&&!u(o,n)||p(l,e?[n,o[n]]:o[n]);return l}};e.exports={entries:s(!0),values:s(!1)}},2140:function(e,t,n){var r=n(6916),o=n(614),a=n(111),i=TypeError;e.exports=function(e,t){var n,u;if("string"===t&&o(n=e.toString)&&!a(u=r(n,e)))return u;if(o(n=e.valueOf)&&!a(u=r(n,e)))return u;if("string"!==t&&o(n=e.toString)&&!a(u=r(n,e)))return u;throw i("Can't convert object to primitive value")}},3887:function(e,t,n){var r=n(5005),o=n(1702),a=n(8006),i=n(5181),u=n(9670),p=o([].concat);e.exports=r("Reflect","ownKeys")||function(e){var t=a.f(u(e)),n=i.f;return n?p(t,n(e)):t}},2534:function(e){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},3702:function(e,t,n){var r=n(7854),o=n(2492),a=n(614),i=n(4705),u=n(2788),p=n(5112),s=n(7871),_=n(3823),T=n(1913),l=n(7392),d=o&&o.prototype,c=p("species"),m=!1,f=a(r.PromiseRejectionEvent),E=i("Promise",(function(){var e=u(o),t=e!==String(o);if(!t&&66===l)return!0;if(T&&(!d.catch||!d.finally))return!0;if(!l||l<51||!/native code/.test(e)){var n=new o((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};if((n.constructor={})[c]=r,!(m=n.then((function(){}))instanceof r))return!0}return!t&&(s||_)&&!f}));e.exports={CONSTRUCTOR:E,REJECTION_EVENT:f,SUBCLASSING:m}},2492:function(e,t,n){var r=n(7854);e.exports=r.Promise},9478:function(e,t,n){var r=n(9670),o=n(111),a=n(8523);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=a.f(e);return(0,n.resolve)(t),n.promise}},612:function(e,t,n){var r=n(2492),o=n(7072),a=n(3702).CONSTRUCTOR;e.exports=a||!o((function(e){r.all(e).then(void 0,(function(){}))}))},8572:function(e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var t={item:e,next:null};this.head?this.tail.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return this.head=e.next,this.tail===e&&(this.tail=null),e.item}},e.exports=t},4488:function(e){var t=TypeError;e.exports=function(e){if(null==e)throw t("Can't call method on "+e);return e}},6340:function(e,t,n){"use strict";var r=n(5005),o=n(3070),a=n(5112),i=n(9781),u=a("species");e.exports=function(e){var t=r(e),n=o.f;i&&t&&!t[u]&&n(t,u,{configurable:!0,get:function(){return this}})}},8003:function(e,t,n){var r=n(3070).f,o=n(2597),a=n(5112)("toStringTag");e.exports=function(e,t,n){e&&!n&&(e=e.prototype),e&&!o(e,a)&&r(e,a,{configurable:!0,value:t})}},6200:function(e,t,n){var r=n(2309),o=n(9711),a=r("keys");e.exports=function(e){return a[e]||(a[e]=o(e))}},5465:function(e,t,n){var r=n(7854),o=n(3072),a="__core-js_shared__",i=r[a]||o(a,{});e.exports=i},2309:function(e,t,n){var r=n(1913),o=n(5465);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.24.1",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.24.1/LICENSE",source:"https://github.com/zloirock/core-js"})},6707:function(e,t,n){var r=n(9670),o=n(9483),a=n(5112)("species");e.exports=function(e,t){var n,i=r(e).constructor;return void 0===i||null==(n=r(i)[a])?t:o(n)}},261:function(e,t,n){var r,o,a,i,u=n(7854),p=n(2104),s=n(9974),_=n(614),T=n(2597),l=n(7293),d=n(490),c=n(206),m=n(317),f=n(8053),E=n(6833),y=n(5268),g=u.setImmediate,N=u.clearImmediate,v=u.process,O=u.Dispatch,h=u.Function,x=u.MessageChannel,C=u.String,I=0,b={};try{r=u.location}catch(e){}var A=function(e){if(T(b,e)){var t=b[e];delete b[e],t()}},S=function(e){return function(){A(e)}},w=function(e){A(e.data)},M=function(e){u.postMessage(C(e),r.protocol+"//"+r.host)};g&&N||(g=function(e){f(arguments.length,1);var t=_(e)?e:h(e),n=c(arguments,1);return b[++I]=function(){p(t,void 0,n)},o(I),I},N=function(e){delete b[e]},y?o=function(e){v.nextTick(S(e))}:O&&O.now?o=function(e){O.now(S(e))}:x&&!E?(i=(a=new x).port2,a.port1.onmessage=w,o=s(i.postMessage,i)):u.addEventListener&&_(u.postMessage)&&!u.importScripts&&r&&"file:"!==r.protocol&&!l(M)?(o=M,u.addEventListener("message",w,!1)):o="onreadystatechange"in m("script")?function(e){d.appendChild(m("script")).onreadystatechange=function(){d.removeChild(this),A(e)}}:function(e){setTimeout(S(e),0)}),e.exports={set:g,clear:N}},1400:function(e,t,n){var r=n(9303),o=Math.max,a=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):a(n,t)}},5656:function(e,t,n){var r=n(8361),o=n(4488);e.exports=function(e){return r(o(e))}},9303:function(e,t,n){var r=n(4758);e.exports=function(e){var t=+e;return t!=t||0===t?0:r(t)}},7466:function(e,t,n){var r=n(9303),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},7908:function(e,t,n){var r=n(4488),o=Object;e.exports=function(e){return o(r(e))}},7593:function(e,t,n){var r=n(6916),o=n(111),a=n(2190),i=n(8173),u=n(2140),p=n(5112),s=TypeError,_=p("toPrimitive");e.exports=function(e,t){if(!o(e)||a(e))return e;var n,p=i(e,_);if(p){if(void 0===t&&(t="default"),n=r(p,e,t),!o(n)||a(n))return n;throw s("Can't convert object to primitive value")}return void 0===t&&(t="number"),u(e,t)}},4948:function(e,t,n){var r=n(7593),o=n(2190);e.exports=function(e){var t=r(e,"string");return o(t)?t:t+""}},1694:function(e,t,n){var r={};r[n(5112)("toStringTag")]="z",e.exports="[object z]"===String(r)},6330:function(e){var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},9711:function(e,t,n){var r=n(1702),o=0,a=Math.random(),i=r(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+i(++o+a,36)}},3307:function(e,t,n){var r=n(133);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:function(e,t,n){var r=n(9781),o=n(7293);e.exports=r&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},8053:function(e){var t=TypeError;e.exports=function(e,n){if(e<n)throw t("Not enough arguments");return e}},5112:function(e,t,n){var r=n(7854),o=n(2309),a=n(2597),i=n(9711),u=n(133),p=n(3307),s=o("wks"),_=r.Symbol,T=_&&_.for,l=p?_:_&&_.withoutSetter||i;e.exports=function(e){if(!a(s,e)||!u&&"string"!=typeof s[e]){var t="Symbol."+e;u&&a(_,e)?s[e]=_[e]:s[e]=p&&T?T(t):l(t)}return s[e]}},9601:function(e,t,n){var r=n(2109),o=n(1574);r({target:"Object",stat:!0,arity:2,forced:Object.assign!==o},{assign:o})},9720:function(e,t,n){var r=n(2109),o=n(4699).entries;r({target:"Object",stat:!0},{entries:function(e){return o(e)}})},8559:function(e,t,n){var r=n(2109),o=n(408),a=n(6135);r({target:"Object",stat:!0},{fromEntries:function(e){var t={};return o(e,(function(e,n){a(t,e,n)}),{AS_ENTRIES:!0}),t}})},821:function(e,t,n){"use strict";var r=n(2109),o=n(6916),a=n(9662),i=n(8523),u=n(2534),p=n(408);r({target:"Promise",stat:!0,forced:n(612)},{all:function(e){var t=this,n=i.f(t),r=n.resolve,s=n.reject,_=u((function(){var n=a(t.resolve),i=[],u=0,_=1;p(e,(function(e){var a=u++,p=!1;_++,o(n,t,e).then((function(e){p||(p=!0,i[a]=e,--_||r(i))}),s)})),--_||r(i)}));return _.error&&s(_.value),n.promise}})},4164:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(3702).CONSTRUCTOR,i=n(2492),u=n(5005),p=n(614),s=n(8052),_=i&&i.prototype;if(r({target:"Promise",proto:!0,forced:a,real:!0},{catch:function(e){return this.then(void 0,e)}}),!o&&p(i)){var T=u("Promise").prototype.catch;_.catch!==T&&s(_,"catch",T,{unsafe:!0})}},3401:function(e,t,n){"use strict";var r,o,a,i=n(2109),u=n(1913),p=n(5268),s=n(7854),_=n(6916),T=n(8052),l=n(7674),d=n(8003),c=n(6340),m=n(9662),f=n(614),E=n(111),y=n(5787),g=n(6707),N=n(261).set,v=n(5948),O=n(842),h=n(2534),x=n(8572),C=n(9909),I=n(2492),b=n(3702),A=n(8523),S="Promise",w=b.CONSTRUCTOR,M=b.REJECTION_EVENT,D=b.SUBCLASSING,P=C.getterFor(S),X=C.set,R=I&&I.prototype,G=I,L=R,j=s.TypeError,Y=s.document,q=s.process,F=A.f,k=F,U=!!(Y&&Y.createEvent&&s.dispatchEvent),B="unhandledrejection",z=function(e){var t;return!(!E(e)||!f(t=e.then))&&t},H=function(e,t){var n,r,o,a=t.value,i=1==t.state,u=i?e.ok:e.fail,p=e.resolve,s=e.reject,T=e.domain;try{u?(i||(2===t.rejection&&Q(t),t.rejection=1),!0===u?n=a:(T&&T.enter(),n=u(a),T&&(T.exit(),o=!0)),n===e.promise?s(j("Promise-chain cycle")):(r=z(n))?_(r,n,p,s):p(n)):s(a)}catch(e){T&&!o&&T.exit(),s(e)}},Z=function(e,t){e.notified||(e.notified=!0,v((function(){for(var n,r=e.reactions;n=r.get();)H(n,e);e.notified=!1,t&&!e.rejection&&V(e)})))},K=function(e,t,n){var r,o;U?((r=Y.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),s.dispatchEvent(r)):r={promise:t,reason:n},!M&&(o=s["on"+e])?o(r):e===B&&O("Unhandled promise rejection",n)},V=function(e){_(N,s,(function(){var t,n=e.facade,r=e.value;if(W(e)&&(t=h((function(){p?q.emit("unhandledRejection",r,n):K(B,n,r)})),e.rejection=p||W(e)?2:1,t.error))throw t.value}))},W=function(e){return 1!==e.rejection&&!e.parent},Q=function(e){_(N,s,(function(){var t=e.facade;p?q.emit("rejectionHandled",t):K("rejectionhandled",t,e.value)}))},J=function(e,t,n){return function(r){e(t,r,n)}},$=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,Z(e,!0))},ee=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw j("Promise can't be resolved itself");var r=z(t);r?v((function(){var n={done:!1};try{_(r,t,J(ee,n,e),J($,n,e))}catch(t){$(n,t,e)}})):(e.value=t,e.state=1,Z(e,!1))}catch(t){$({done:!1},t,e)}}};if(w&&(L=(G=function(e){y(this,L),m(e),_(r,this);var t=P(this);try{e(J(ee,t),J($,t))}catch(e){$(t,e)}}).prototype,(r=function(e){X(this,{type:S,done:!1,notified:!1,parent:!1,reactions:new x,rejection:!1,state:0,value:void 0})}).prototype=T(L,"then",(function(e,t){var n=P(this),r=F(g(this,G));return n.parent=!0,r.ok=!f(e)||e,r.fail=f(t)&&t,r.domain=p?q.domain:void 0,0==n.state?n.reactions.add(r):v((function(){H(r,n)})),r.promise})),o=function(){var e=new r,t=P(e);this.promise=e,this.resolve=J(ee,t),this.reject=J($,t)},A.f=F=function(e){return e===G||void 0===e?new o(e):k(e)},!u&&f(I)&&R!==Object.prototype)){a=R.then,D||T(R,"then",(function(e,t){var n=this;return new G((function(e,t){_(a,n,e,t)})).then(e,t)}),{unsafe:!0});try{delete R.constructor}catch(e){}l&&l(R,L)}i({global:!0,constructor:!0,wrap:!0,forced:w},{Promise:G}),d(G,S,!1,!0),c(S)},8674:function(e,t,n){n(3401),n(821),n(4164),n(6027),n(683),n(6294)},6027:function(e,t,n){"use strict";var r=n(2109),o=n(6916),a=n(9662),i=n(8523),u=n(2534),p=n(408);r({target:"Promise",stat:!0,forced:n(612)},{race:function(e){var t=this,n=i.f(t),r=n.reject,s=u((function(){var i=a(t.resolve);p(e,(function(e){o(i,t,e).then(n.resolve,r)}))}));return s.error&&r(s.value),n.promise}})},683:function(e,t,n){"use strict";var r=n(2109),o=n(6916),a=n(8523);r({target:"Promise",stat:!0,forced:n(3702).CONSTRUCTOR},{reject:function(e){var t=a.f(this);return o(t.reject,void 0,e),t.promise}})},6294:function(e,t,n){"use strict";var r=n(2109),o=n(5005),a=n(1913),i=n(2492),u=n(3702).CONSTRUCTOR,p=n(9478),s=o("Promise"),_=a&&!u;r({target:"Promise",stat:!0,forced:a||u},{resolve:function(e){return p(_&&this===s?i:this,e)}})},1763:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Trainables=void 0;var r=n(8913),o=function(){function e(e){this.autoMLInst=new r.AutoMLTrainable(e)}return e.prototype.automl=function(){return this.autoMLInst},e}();t.Trainables=o},8913:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AutoMLTrainable=void 0;var r=n(655),o=n(9699),a=n(1551),i=n(6117),u=n(2026),p=function(){function e(e){this.params=e,(0,u.isPreviewEnabled)(e)&&(0,i.isDefined)(e.autoMlBaseUrl)&&(this.httpClient=(0,o.getHttpClient)(Object.assign({},e,{baseUrl:e.autoMlBaseUrl})))}return e.prototype.train=function(e){var t,n;if(!(0,u.isPreviewEnabled)(this.params)||(0,i.isNotDefined)(this.params.autoMlBaseUrl))throw new a.PreviewFeatureError;var o={data:e.data,label:e.label};(0,i.isDefined)(e.eval_metric)&&(o.eval_metric=e.eval_metric),(0,i.isDefined)(e.time_limit)&&(o.time_limit=e.time_limit);var p=null!==(t=e.kind)&&void 0!==t?t:"multimodal";return this.httpClient.post({url:"/".concat(p,"/create-model/"),headers:r.__assign({"Content-Type":"application/json"},null!==(n=e.headers)&&void 0!==n?n:{}),responseType:"json",body:o})},e.prototype.predict=function(e){var t,n;if(!(0,u.isPreviewEnabled)(this.params)||(0,i.isNotDefined)(this.params.autoMlBaseUrl))throw new a.PreviewFeatureError;var o={model_id:e.model_id,data:e.data},p=null!==(t=e.kind)&&void 0!==t?t:"multimodal";return this.httpClient.post({url:"/".concat(p,"/predict/"),headers:r.__assign({"Content-Type":"application/json"},null!==(n=e.headers)&&void 0!==n?n:{}),responseType:"json",body:o})},e}();t.AutoMLTrainable=p},3682:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudioToText=void 0;var r=n(655),o=n(8778),a=n(9699),i=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,a.getHttpClient)(this.params)}return e.prototype.audioTranscription=function(e){var t,n=new FormData;return(0,i.isDefined)(e.audio)&&n.append("audio",e.audio),(0,i.isDefined)(e.audio_url)&&n.append("audio_url",e.audio_url),n.append("language",e.language),this.httpClient.post({url:"/audio/text/audio-transcription/",headers:r.__assign({"Content-Type":this.params.useFetch?o.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e.prototype.speakerDiarization=function(e){var t,n=new FormData;return(0,i.isDefined)(e.audio)&&n.append("audio",e.audio),(0,i.isDefined)(e.audio_url)&&n.append("audio_url",e.audio_url),this.httpClient.post({url:"/audio/text/speaker-diarization/",headers:r.__assign({"Content-Type":this.params.useFetch?o.AUDIO_TEXT_SPEAKER_DIARIZATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e.prototype.speakerGenderClassification=function(e){var t,n=new FormData;return(0,i.isDefined)(e.audio)&&n.append("audio",e.audio),(0,i.isDefined)(e.audio_url)&&n.append("audio_url",e.audio_url),this.httpClient.post({url:"/audio/text/speaker-gender-classification/",headers:r.__assign({"Content-Type":this.params.useFetch?o.AUDIO_TEXT_SPEAKER_GENDER_CLASSIFICATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e}();t.FromAudioToText=u},8490:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromAudio=void 0;var r=n(3682),o=function(){function e(e){this.fromAudioToTextInst=new r.FromAudioToText(e)}return e.prototype.toText=function(){return this.fromAudioToTextInst},e}();t.FromAudio=o},8814:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToImage=void 0;var r=n(655),o=n(8778),a=n(9699),i=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,a.getHttpClient)(this.params)}return e.prototype.backgroundRemoval=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/background-removal/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.backgroundReplacement=function(e){var t,n=new FormData;return(0,i.isDefined)(e.original_image)&&n.append("original_image",e.original_image),(0,i.isDefined)(e.original_image_url)&&n.append("original_image_url",e.original_image_url),(0,i.isDefined)(e.background_image)&&n.append("background_image",e.background_image),(0,i.isDefined)(e.background_image_url)&&n.append("background_image_url",e.background_image_url),n.append("alignment",e.alignment),this.httpClient.post({url:"/image/image/background-replacement/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_BACKGROUND_REPLACEMENT_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.colorization=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/colorization/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.deblurring=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/deblurring/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_DEBLURRING_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.enhancement=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/enhancement/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_ENHANCEMENT_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.faceBluring=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/face-bluring/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.guidedInpainting=function(e){var t,n=new FormData;return(0,i.isDefined)(e.original_image)&&n.append("original_image",e.original_image),(0,i.isDefined)(e.original_image_url)&&n.append("original_image_url",e.original_image_url),(0,i.isDefined)(e.mask_image)&&n.append("mask_image",e.mask_image),(0,i.isDefined)(e.mask_image_url)&&n.append("mask_image_url",e.mask_image_url),n.append("prompt",e.prompt),this.httpClient.post({url:"/image/image/guided-inpainting/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.inpainting=function(e){var t,n=new FormData;return(0,i.isDefined)(e.original_image)&&n.append("original_image",e.original_image),(0,i.isDefined)(e.original_image_url)&&n.append("original_image_url",e.original_image_url),(0,i.isDefined)(e.mask_image)&&n.append("mask_image",e.mask_image),(0,i.isDefined)(e.mask_image_url)&&n.append("mask_image_url",e.mask_image_url),this.httpClient.post({url:"/image/image/inpainting/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_INPAINTING_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.superResolution=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/super-resolution/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_SUPER_RESOLUTION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e.prototype.uncolorization=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),this.httpClient.post({url:"/image/image/uncolorization/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:"arraybuffer",body:n})},e}();t.FromImageToImage=u},4802:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImageToText=void 0;var r=n(655),o=n(8778),a=n(9699),i=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,a.getHttpClient)(this.params)}return e.prototype.classification=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/image/text/classification/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e.prototype.ocr=function(e){var t,n=new FormData;return(0,i.isDefined)(e.image)&&n.append("image",e.image),(0,i.isDefined)(e.image_url)&&n.append("image_url",e.image_url),n.append("source_language",e.source_language),this.httpClient.post({url:"/image/text/ocr/",headers:r.__assign({"Content-Type":this.params.useFetch?o.IMAGE_TEXT_OCR_CONTENT_TYPE:void 0},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n})},e}();t.FromImageToText=u},2062:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromImage=void 0;var r=n(8814),o=n(4802),a=function(){function e(e){this.fromImageToImageInst=new r.FromImageToImage(e),this.fromImageToTextInst=new o.FromImageToText(e)}return e.prototype.toImage=function(){return this.fromImageToImageInst},e.prototype.toText=function(){return this.fromImageToTextInst},e}();t.FromImage=a},4153:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToImage=void 0;var r=n(655),o=n(8778),a=n(9699),i=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,a.getHttpClient)(this.params)}return e.prototype.imageGeneration=function(e){var t,n=new a.UrlFormData;return n.append("prompt",e.prompt),(0,i.isDefined)(e.samples)&&n.append("samples",String(e.samples)),(0,i.isDefined)(e.steps)&&n.append("steps",String(e.steps)),(0,i.isDefined)(e.seed)&&n.append("seed",String(e.seed)),this.httpClient.post({url:"/text/image/image-generation/",headers:r.__assign({"Content-Type":o.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),responseType:e.samples>1?"json":"arraybuffer",body:n.toString()})},e}();t.FromTextToImage=u},8271:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromTextToText=void 0;var r=n(655),o=n(8778),a=n(9699),i=n(6117),u=function(){function e(e){this.params=e,this.httpClient=(0,a.getHttpClient)(this.params)}return e.prototype.adGeneration=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.keywords)&&n.append("keywords",e.keywords),this.httpClient.post({url:"/text/text/ad-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.addressFormatting=function(e){var t,n=new a.UrlFormData;return n.append("address",e.address),this.httpClient.post({url:"/text/text/address-formatting/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_ADDRESS_FORMATTING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.ageFromName=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.name)&&n.append("name",e.name),this.httpClient.post({url:"/text/text/age-from-name/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_AGE_FROM_NAME_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.anonymization=function(e){var t,n=new a.UrlFormData;return n.append("language",e.language),n.append("entities",e.entities),n.append("text",e.text),this.httpClient.post({url:"/text/text/anonymization/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_ANONYMIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.articleGeneration=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.title)&&n.append("title",e.title),this.httpClient.post({url:"/text/text/article-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.autocorrect=function(e){var t,n=new a.UrlFormData;return n.append("sentence",e.sentence),this.httpClient.post({url:"/text/text/autocorrect/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.bulletPointGeneration=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),(0,i.isDefined)(e.bullets)&&n.append("bullets",String(e.bullets)),this.httpClient.post({url:"/text/text/bullet-point-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_BULLET_POINT_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.commandGeneration=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/command-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_COMMAND_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.companyCategorization=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/company-categorization/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_COMPANY_CATEGORIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.companyNameNormalization=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/company-name-normalization/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_COMPANY_NAME_NORMALIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.companyStockCode=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/company-stock-code/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_COMPANY_STOCK_CODE_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.conversationSummarization=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/conversation-summarization/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_CONVERSATION_SUMMARIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.countryFromName=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.name)&&n.append("name",e.name),this.httpClient.post({url:"/text/text/country-from-name/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_COUNTRY_FROM_NAME_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.dateCleaning=function(e){var t,n=new a.UrlFormData;return n.append("date",e.date),this.httpClient.post({url:"/text/text/date-cleaning/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_DATE_CLEANING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.emotionRecognition=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/emotion-recognition/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.genderFromName=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.name)&&n.append("name",e.name),this.httpClient.post({url:"/text/text/gender-from-name/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_GENDER_FROM_NAME_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.gpsAddressFormatting=function(e){var t,n=new a.UrlFormData;return n.append("latitude",String(e.latitude)),n.append("longitude",String(e.longitude)),this.httpClient.post({url:"/text/text/gps-address-formatting/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_GPS_ADDRESS_FORMATTING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.gpt3=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/gpt3/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_GPT3_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.guessCity=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/guess-city/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_GUESS_CITY_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.guessCountry=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/guess-country/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_GUESS_COUNTRY_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.hateSpeechDetection=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/hate-speech-detection/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.headlineGeneration=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),n.append("max_length",String(e.max_length)),this.httpClient.post({url:"/text/text/headline-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_HEADLINE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.intentClassification=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/intent-classification/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.keywordExtraction=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),(0,i.isDefined)(e.top_k)&&n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/text/text/keyword-extraction/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.languageDetection=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-detection/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.languageGeneration=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/language-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.namedEntityRecognition=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/named-entity-recognition/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.nextSentencePrediction=function(e){var t,n=new a.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/next-sentence-prediction/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.nextWordPrediction=function(e){var t,n=new a.UrlFormData;return n.append("sentence",e.sentence),n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/text/text/next-word-prediction/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.programmingLanguageGeneration=function(e){var t,n=new a.UrlFormData;return n.append("code_snippet",e.code_snippet),this.httpClient.post({url:"/text/text/programming-language-generation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.punctuationRestoration=function(e){var t,n=new a.UrlFormData;return n.append("sentence",e.sentence),this.httpClient.post({url:"/text/text/punctuation-restoration/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_PUNCTUATION_RESTORATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.questionAnswering=function(e){var t,n=new a.UrlFormData;return n.append("context",e.context),n.append("question",e.question),(0,i.isDefined)(e.top_k)&&n.append("top_k",String(e.top_k)),this.httpClient.post({url:"/text/text/question-answering/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.sentenceParaphraser=function(e){var t,n=new a.UrlFormData;return n.append("context",e.context),this.httpClient.post({url:"/text/text/sentence-paraphraser/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.sentimentAnalysis=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),this.httpClient.post({url:"/text/text/sentiment-analysis/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.similarity=function(e){var t,n=new a.UrlFormData;return n.append("sentence_1",e.sentence_1),n.append("sentence_2",e.sentence_2),this.httpClient.post({url:"/text/text/similarity/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_SIMILARITY_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.summarization=function(e){var t,n=new a.UrlFormData;return n.append("text",e.text),n.append("source_language",e.source_language),(0,i.isDefined)(e.min_length)&&n.append("min_length",String(e.min_length)),(0,i.isDefined)(e.max_length)&&n.append("max_length",String(e.max_length)),this.httpClient.post({url:"/text/text/summarization/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.translation=function(e){var t,n=new a.UrlFormData;return n.append("input_string",e.input_string),n.append("source_language",e.source_language),n.append("target_language",e.target_language),this.httpClient.post({url:"/text/text/translation/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_TRANSLATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.vatCountryGuessing=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/vat-country-guessing/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_VAT_COUNTRY_GUESSING_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.websiteClassification=function(e){var t,n=new a.UrlFormData;return(0,i.isDefined)(e.text)&&n.append("text",e.text),this.httpClient.post({url:"/text/text/website-classification/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_WEBSITE_CLASSIFICATION_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e.prototype.wordAlignment=function(e){var t,n=new a.UrlFormData;return n.append("input_string_language_1",e.input_string_language_1),n.append("input_string_language_2",e.input_string_language_2),this.httpClient.post({url:"/text/text/word-alignment/",headers:r.__assign({"Content-Type":o.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE},null!==(t=e.headers)&&void 0!==t?t:{}),query:r.__assign({},e.model?{model:e.model}:{}),body:n.toString()})},e}();t.FromTextToText=u},9438:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FromText=void 0;var r=n(4153),o=n(8271),a=function(){function e(e){this.fromTextToImageInst=new r.FromTextToImage(e),this.fromTextToTextInst=new o.FromTextToText(e)}return e.prototype.toImage=function(){return this.fromTextToImageInst},e.prototype.toText=function(){return this.fromTextToTextInst},e}();t.FromText=a},3395:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GladiaClientBase=void 0;var r=n(1763),o=function(){function e(e){this.trainableInst=new r.Trainables(e)}return e.prototype.trainable=function(){return this.trainableInst},e}();t.GladiaClientBase=o},2026:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isPreviewEnabled=void 0,t.isPreviewEnabled=function(e){return e.enablePreviewFeatures}},4085:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Shortcuts=void 0;var n=function(){function e(){}return e.prototype.audioTranscription=function(e){return this.fromAudio().toText().audioTranscription(e)},e.prototype.speakerDiarization=function(e){return this.fromAudio().toText().speakerDiarization(e)},e.prototype.speakerGenderClassification=function(e){return this.fromAudio().toText().speakerGenderClassification(e)},e.prototype.backgroundRemoval=function(e){return this.fromImage().toImage().backgroundRemoval(e)},e.prototype.backgroundReplacement=function(e){return this.fromImage().toImage().backgroundReplacement(e)},e.prototype.colorization=function(e){return this.fromImage().toImage().colorization(e)},e.prototype.deblurring=function(e){return this.fromImage().toImage().deblurring(e)},e.prototype.enhancement=function(e){return this.fromImage().toImage().enhancement(e)},e.prototype.faceBluring=function(e){return this.fromImage().toImage().faceBluring(e)},e.prototype.guidedInpainting=function(e){return this.fromImage().toImage().guidedInpainting(e)},e.prototype.inpainting=function(e){return this.fromImage().toImage().inpainting(e)},e.prototype.superResolution=function(e){return this.fromImage().toImage().superResolution(e)},e.prototype.uncolorization=function(e){return this.fromImage().toImage().uncolorization(e)},e.prototype.classification=function(e){return this.fromImage().toText().classification(e)},e.prototype.ocr=function(e){return this.fromImage().toText().ocr(e)},e.prototype.imageGeneration=function(e){return this.fromText().toImage().imageGeneration(e)},e.prototype.adGeneration=function(e){return this.fromText().toText().adGeneration(e)},e.prototype.addressFormatting=function(e){return this.fromText().toText().addressFormatting(e)},e.prototype.ageFromName=function(e){return this.fromText().toText().ageFromName(e)},e.prototype.anonymization=function(e){return this.fromText().toText().anonymization(e)},e.prototype.articleGeneration=function(e){return this.fromText().toText().articleGeneration(e)},e.prototype.autocorrect=function(e){return this.fromText().toText().autocorrect(e)},e.prototype.bulletPointGeneration=function(e){return this.fromText().toText().bulletPointGeneration(e)},e.prototype.commandGeneration=function(e){return this.fromText().toText().commandGeneration(e)},e.prototype.companyCategorization=function(e){return this.fromText().toText().companyCategorization(e)},e.prototype.companyNameNormalization=function(e){return this.fromText().toText().companyNameNormalization(e)},e.prototype.companyStockCode=function(e){return this.fromText().toText().companyStockCode(e)},e.prototype.conversationSummarization=function(e){return this.fromText().toText().conversationSummarization(e)},e.prototype.countryFromName=function(e){return this.fromText().toText().countryFromName(e)},e.prototype.dateCleaning=function(e){return this.fromText().toText().dateCleaning(e)},e.prototype.emotionRecognition=function(e){return this.fromText().toText().emotionRecognition(e)},e.prototype.genderFromName=function(e){return this.fromText().toText().genderFromName(e)},e.prototype.gpsAddressFormatting=function(e){return this.fromText().toText().gpsAddressFormatting(e)},e.prototype.gpt3=function(e){return this.fromText().toText().gpt3(e)},e.prototype.guessCity=function(e){return this.fromText().toText().guessCity(e)},e.prototype.guessCountry=function(e){return this.fromText().toText().guessCountry(e)},e.prototype.hateSpeechDetection=function(e){return this.fromText().toText().hateSpeechDetection(e)},e.prototype.headlineGeneration=function(e){return this.fromText().toText().headlineGeneration(e)},e.prototype.intentClassification=function(e){return this.fromText().toText().intentClassification(e)},e.prototype.keywordExtraction=function(e){return this.fromText().toText().keywordExtraction(e)},e.prototype.languageDetection=function(e){return this.fromText().toText().languageDetection(e)},e.prototype.languageGeneration=function(e){return this.fromText().toText().languageGeneration(e)},e.prototype.namedEntityRecognition=function(e){return this.fromText().toText().namedEntityRecognition(e)},e.prototype.nextSentencePrediction=function(e){return this.fromText().toText().nextSentencePrediction(e)},e.prototype.nextWordPrediction=function(e){return this.fromText().toText().nextWordPrediction(e)},e.prototype.programmingLanguageGeneration=function(e){return this.fromText().toText().programmingLanguageGeneration(e)},e.prototype.punctuationRestoration=function(e){return this.fromText().toText().punctuationRestoration(e)},e.prototype.questionAnswering=function(e){return this.fromText().toText().questionAnswering(e)},e.prototype.sentenceParaphraser=function(e){return this.fromText().toText().sentenceParaphraser(e)},e.prototype.sentimentAnalysis=function(e){return this.fromText().toText().sentimentAnalysis(e)},e.prototype.similarity=function(e){return this.fromText().toText().similarity(e)},e.prototype.summarization=function(e){return this.fromText().toText().summarization(e)},e.prototype.translation=function(e){return this.fromText().toText().translation(e)},e.prototype.vatCountryGuessing=function(e){return this.fromText().toText().vatCountryGuessing(e)},e.prototype.websiteClassification=function(e){return this.fromText().toText().websiteClassification(e)},e.prototype.wordAlignment=function(e){return this.fromText().toText().wordAlignment(e)},e}();t.Shortcuts=n},2889:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GladiaClient=void 0;var r=n(655),o=n(4085),a=n(8490),i=n(2062),u=n(9438),p=n(3395),s=n(2683),_=function(e){function t(t){var n,o=this,p=r.__assign(r.__assign({},t),{useFetch:null!==(n=t.useFetch)&&void 0!==n&&n});return(o=e.call(this,p)||this).fromAudioInst=new a.FromAudio(p),o.fromImageInst=new i.FromImage(p),o.fromTextInst=new u.FromText(p),o}return r.__extends(t,e),t.prototype.fromAudio=function(){return this.fromAudioInst},t.prototype.fromImage=function(){return this.fromImageInst},t.prototype.fromText=function(){return this.fromTextInst},t}(p.GladiaClientBase);t.GladiaClient=_,(0,s.applyMixins)(_,[o.Shortcuts])},3465:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.meta=t.GladiaClient=t.gladia=void 0;var r=n(655),o=n(2889);function a(e){return new o.GladiaClient(e)}t.gladia=a,t.default=a;var i=n(2889);Object.defineProperty(t,"GladiaClient",{enumerable:!0,get:function(){return i.GladiaClient}}),r.__exportStar(n(8778),t),t.meta=r.__importStar(n(2168))},2212:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BrowserHttpClient=void 0;var r=n(312),o=n(3568);t.BrowserHttpClient=function(e){return e.useFetch||"function"==typeof fetch?(0,r.FetchHttpClient)(e):(0,o.XhrHttpClient)(e)}},312:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FetchHttpClient=void 0;var r=n(655),o=n(5327),a=n(4459);t.FetchHttpClient=function(e){var t=e.baseHeaders,n=e.baseUrl,i=e.httpClientTimeout;return{post:function(e){var u;return r.__awaiter(this,void 0,void 0,(function(){var p,s,_,T,l;return r.__generator(this,(function(d){return p=new Headers((0,o.headerSerializer)(r.__assign(r.__assign({},t),e.headers))),s="".concat(n).concat(e.url).concat((0,a.searchQueryParamSerializer)(e.query)),_=null!==(u=e.responseType)&&void 0!==u?u:"json",m=null!=i?i:3e5,f=new AbortController,E=setTimeout((function(){return f.abort()}),m),T={signal:f.signal,cancelTimeoutController:function(){clearTimeout(E)}},l=T.cancelTimeoutController,[2,fetch(s,{method:"POST",headers:p,signal:T.signal,mode:"cors",body:(c=e.body,"string"==typeof c||c instanceof FormData?c:String(c))}).then((function(e){return l(),"json"===_?e.json():e.arrayBuffer()}))];var c,m,f,E}))}))}}}},5327:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.headerSerializer=void 0;var r=n(655);t.headerSerializer=function(e){return Object.fromEntries(Object.entries(e).map((function(e){var t=r.__read(e,2),n=t[0],o=t[1];return"string"==typeof o?[n,o]:[n,String(o)]})))}},6245:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getHttpClientFactory=t.getHttpClient=void 0;var r=n(655),o=n(3413),a=n(2212),i=n(1070);function u(){return"undefined"==typeof window&&"object"==typeof process?i.NodeHttpClient:a.BrowserHttpClient}t.getHttpClient=function(e){var t,n,a,i,p;return(null!==(t=e.customHttpClient)&&void 0!==t?t:u())({baseHeaders:r.__assign({"x-gladia-key":e.apiKey,"x-gladia-sdk":o.SDK_VERSION},null!==(n=e.headers)&&void 0!==n?n:{}),baseUrl:null!==(a=e.baseUrl)&&void 0!==a?a:"https://v2-api.gladia.io",useFetch:null!==(i=e.useFetch)&&void 0!==i&&i,httpClientTimeout:null!==(p=e.httpClientTimeout)&&void 0!==p?p:3e5})},t.getHttpClientFactory=u},9699:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(655);r.__exportStar(n(6245),t),r.__exportStar(n(8041),t)},1070:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NodeHttpClient=void 0;var r=n(655),o=n(5327),a=n(4459),i=r.__importDefault(n(5426));t.NodeHttpClient=function(e){var t=e.baseHeaders,n=e.baseUrl,u=e.httpClientTimeout;return{post:function(e){var p;return r.__awaiter(this,void 0,void 0,(function(){var s,_,T,l;return r.__generator(this,(function(d){return s=(0,o.headerSerializer)(r.__assign(r.__assign({},t),e.headers)),_="".concat(n).concat(e.url).concat((0,a.searchQueryParamSerializer)(e.query)),T=null!==(p=e.responseType)&&void 0!==p?p:"json",l=null!=u?u:3e5,[2,new Promise((function(t,n){var r="",o=i.default.request(_,{method:"POST",headers:s,timeout:l},(function(e){e.on("data",(function(e){r+=e})),e.on("end",(function(){var e=Buffer.from(r);if("json"!==T)return e;t(JSON.parse(e.toString()))}))}));o.on("error",(function(e){n(e)})),o.write(function(e){return"string"==typeof e||e instanceof FormData?e:String(e)}(e.body)),o.end()}))]}))}))}}}},4459:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.searchParamDeserializer=t.searchParamSerializer=t.searchQueryParamSerializer=void 0;var r=n(655),o=n(6117);function a(e){return Object.entries(e).map((function(e){var t,n,o=r.__read(e,2);return t=o[0],n=o[1],Array.isArray(n)?"".concat(t,"=").concat(n.map((function(e){return i(e)})).join(",")):"string"==typeof n?"".concat(t,"=").concat(i(n)):"".concat(t,"=").concat(n)})).join("&")}function i(e){return encodeURI(e).replace(/,/g,"%2C")}function u(e){return decodeURI(e).replace(/%2C/g,",")}t.searchQueryParamSerializer=function(e){if((0,o.isNotDefined)(e))return"";var t=a(e);return 0===t.length?"":"?"+t},t.searchParamSerializer=a,t.searchParamDeserializer=function(e){return(0,o.isNotDefined)(e)||0===e.length?{}:Object.fromEntries(e.split("&").map((function(e){return e.split("=")})).map((function(e){var t=r.__read(e,2),n=t[0],o=t[1];return o.includes(",")?[n,o.split(",")]:[n,o]})).map((function(e){var t=r.__read(e,2),n=t[0],o=t[1];return"string"==typeof o?[n,u(o)]:[n,o.map(u)]})))}},8041:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrlFormData=void 0;var r=n(4459),o=function(){function e(e){this.data={},this.data=(0,r.searchParamDeserializer)(e)}return e.prototype.append=function(e,t){this.data[e]=t},e.prototype.get=function(e){return this.data[e]},e.prototype.toString=function(){return(0,r.searchParamSerializer)(this.data)},e}();t.UrlFormData=o},3568:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XhrHttpClient=void 0;var r=n(655),o=n(5327),a=n(4459);t.XhrHttpClient=function(e){var t=e.baseHeaders,n=e.baseUrl,i=e.httpClientTimeout;return{post:function(e){var u;return r.__awaiter(this,void 0,void 0,(function(){var p,s,_,T;return r.__generator(this,(function(l){return p=new Headers((0,o.headerSerializer)(r.__assign(r.__assign({},t),e.headers))),s="".concat(n).concat(e.url).concat((0,a.searchQueryParamSerializer)(e.query)),_=null!==(u=e.responseType)&&void 0!==u?u:"json",T=null!=i?i:3e5,[2,new Promise((function(t,n){var r,o=new XMLHttpRequest;o.onload=function(){t("json"===_?JSON.parse(o.responseText):o.response)},o.ontimeout=function(){return n("timeout")},o.onerror=function(e){return n(e)},o.timeout=T,p.forEach((function(e,t){o.setRequestHeader(t,e)})),o.open("POST",s),o.send("string"==typeof(r=e.body)||r instanceof FormData?r:String(r))}))]}))}))}}}},5485:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ENDPOINT_DEFS=void 0,t.ENDPOINT_DEFS=[{url:"/audio/text/audio-transcription/",inputType:"audio",outputType:"text",taskName:"audio-transcription",models:["coqui_english_huge_vocab","openai-whisper-base","openai-whisper-large","openai-whisper-medium","openai-whisper-small","openai-whisper-tiny"],defaultModel:"openai-whisper-tiny",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"audio",name:"audio",required:!1},{in:"formData",type:"url",name:"audio_url",required:!1},{in:"formData",type:"string",name:"language",required:!0}],hasSamplesParam:!1},{url:"/audio/text/speaker-diarization/",inputType:"audio",outputType:"text",taskName:"speaker-diarization",models:["pyannote-speaker_diarization"],defaultModel:"pyannote-speaker_diarization",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"audio",name:"audio",required:!1},{in:"formData",type:"url",name:"audio_url",required:!1}],hasSamplesParam:!1},{url:"/audio/text/speaker-gender-classification/",inputType:"audio",outputType:"text",taskName:"speaker-gender-classification",models:["inafoss-inaSpeechSegmenter"],defaultModel:"inafoss-inaSpeechSegmenter",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"audio",name:"audio",required:!1},{in:"formData",type:"url",name:"audio_url",required:!1}],hasSamplesParam:!1},{url:"/image/image/background-removal/",inputType:"image",outputType:"image",taskName:"background-removal",models:["mobilenet","xception"],defaultModel:"mobilenet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}],hasSamplesParam:!1},{url:"/image/image/background-replacement/",inputType:"image",outputType:"image",taskName:"background-replacement",models:["mobilenet"],defaultModel:"mobilenet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"original_image",required:!1},{in:"formData",type:"url",name:"original_image_url",required:!1},{in:"formData",type:"image",name:"background_image",required:!1},{in:"formData",type:"url",name:"background_image_url",required:!1},{in:"formData",type:"enum",name:"alignment",required:!0,enumValues:["center","top","bottom","left","right","top-left","top-center","top-right","bottom-left","bottom-center","bottom-right","cropped"]}],hasSamplesParam:!1},{url:"/image/image/colorization/",inputType:"image",outputType:"image",taskName:"colorization",models:["deoldify-artistic","deoldify-stable","mlhubber_colorize"],defaultModel:"mlhubber_colorize",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}],hasSamplesParam:!1},{url:"/image/image/deblurring/",inputType:"image",outputType:"image",taskName:"deblurring",models:["CMFNet"],defaultModel:"CMFNet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}],hasSamplesParam:!1},{url:"/image/image/enhancement/",inputType:"image",outputType:"image",taskName:"enhancement",models:["FiveK","LOL"],defaultModel:"FiveK",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}],hasSamplesParam:!1},{url:"/image/image/face-bluring/",inputType:"image",outputType:"image",taskName:"face-bluring",models:["ageitgey"],defaultModel:"ageitgey",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}],hasSamplesParam:!1},{url:"/image/image/guided-inpainting/",inputType:"image",outputType:"image",taskName:"guided-inpainting",models:["stable-diffusion"],defaultModel:"stable-diffusion",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"original_image",required:!1},{in:"formData",type:"url",name:"original_image_url",required:!1},{in:"formData",type:"image",name:"mask_image",required:!1},{in:"formData",type:"url",name:"mask_image_url",required:!1},{in:"formData",type:"string",name:"prompt",required:!0}],hasSamplesParam:!1},{url:"/image/image/inpainting/",inputType:"image",outputType:"image",taskName:"inpainting",models:["fcf","lama","latent-diffusion","mat","zits"],defaultModel:"zits",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"original_image",required:!1},{in:"formData",type:"url",name:"original_image_url",required:!1},{in:"formData",type:"image",name:"mask_image",required:!1},{in:"formData",type:"url",name:"mask_image_url",required:!1}],hasSamplesParam:!1},{url:"/image/image/super-resolution/",inputType:"image",outputType:"image",taskName:"super-resolution",models:[],defaultModel:"latent-sr",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}],hasSamplesParam:!1},{url:"/image/image/uncolorization/",inputType:"image",outputType:"image",taskName:"uncolorization",models:["v1"],defaultModel:"v1",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1}],hasSamplesParam:!1},{url:"/image/text/classification/",inputType:"image",outputType:"text",taskName:"classification",models:["alexnet","convnext_base","convnext_large","convnext_small","convnext_tiny","densenet121","densenet161","densenet169","densenet201","efficientnet_b0","efficientnet_b1_v1","efficientnet_b1_v2","efficientnet_b2","efficientnet_b3","efficientnet_b4","efficientnet_b5","efficientnet_b6","efficientnet_b7","efficientnet_v2_l","efficientnet_v2_m","efficientnet_v2_s","googlenet","googlenet_quantized_fbgemm_v1","inception_v3","inception_v3_fbgemm_v1","mnasnet0_5","mnasnet0_75","mnasnet1_0","mnasnet1_3","mobilenet_v2_quantized_qnnpack_v1","mobilenet_v2_v1","mobilenet_v2_v2","mobilenet_v3_large_quantized_qnnpack_v1","mobilenet_v3_large_v1","mobilenet_v3_large_v2","mobilenet_v3_small","regnet_x_16gf_v1","regnet_x_16gf_v2","regnet_x_1_6gf_v1","regnet_x_1_6gf_v2","regnet_x_32gf_v1","regnet_x_32gf_v2","regnet_x_3_2gf_v1","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_x_400mf_v2","regnet_x_800mf_v1","regnet_x_800mf_v2","regnet_x_8gf_v1","regnet_x_8gf_v2","regnet_y_128gf_swag_e2e_v1","regnet_y_128gf_swag_linear_v1","regnet_y_16gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","regnet_y_16gf_v1","regnet_y_16gf_v2","regnet_y_1_6gf_v1","regnet_y_1_6gf_v2","regnet_y_32gf_swag_e2e_v1","regnet_y_32gf_swag_linear_v1","regnet_y_32gf_v1","regnet_y_32gf_v2","regnet_y_3_2gf_v1","regnet_y_3_2gf_v2","regnet_y_400mf_v1","regnet_y_400mf_v2","regnet_y_8gf_v1","regnet_y_8gf_v2","resnet152_v1","resnet152_v2","resnet18","resnet18_quantized_fbgemm_v1","resnet34","resnet50_quantized_fbgemm_v1","resnet50_quantized_fbgemm_v2","resnet50_v1","resnet50_v2","resnext101_32x8d_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","resnext101_32x8d_v1","resnext101_32x8d_v2","resnext101_64x4d_quantized_fbgemm_v1","resnext101_64x4d_v1","resnext50_32x4d_v1","resnext50_32x4d_v2","shufflenet_v2_x0_5","shufflenet_v2_x0_5_quantized_fbgemm_v1","shufflenet_v2_x1_0","shufflenet_v2_x1_0_quantized_fbgemm_v1","shufflenet_v2_x1_5","shufflenet_v2_x1_5_quantized_fbgemm_v1","shufflenet_v2_x2_0","shufflenet_v2_x2_0_quantized_fbgemm_v1","squeezenet1_0","squeezenet1_1","swin_b","swin_s","swin_t","vgg11","vgg11_bn","vgg13","vgg13_bn","vgg16_bn","vgg16_v1","vgg19","vgg19_bn","vit_b_16_swag_e2e_v1","vit_b_16_swag_linear_v1","vit_b_16_v1","vit_b_32","vit_h_14_swag_e2e_v1","vit_h_14_swag_linear_v1","vit_l_16_swag_e2e_v1","vit_l_16_swag_linear_v1","vit_l_16_v1","vit_l_32","wide_resnet101_2_v1","wide_resnet101_2_v2"],defaultModel:"alexnet",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1},{in:"formData",type:"integer",name:"top_k",required:!0}],hasSamplesParam:!1},{url:"/image/text/ocr/",inputType:"image",outputType:"text",taskName:"ocr",models:["easy-ocr","tesseract-default","tesseract-denoising","textract-extractor"],defaultModel:"textract-extractor",inputBodyContentType:"multipart/form-data",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"image",name:"image",required:!1},{in:"formData",type:"url",name:"image_url",required:!1},{in:"formData",type:"string",name:"source_language",required:!0}],hasSamplesParam:!1},{url:"/text/image/image-generation/",inputType:"text",outputType:"image",taskName:"image-generation",models:["dream-studio","stable-diffusion"],defaultModel:"stable-diffusion",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"binary"},params:[{in:"formData",type:"string",name:"prompt",required:!0},{in:"formData",type:"integer",name:"samples",required:!1},{in:"formData",type:"integer",name:"steps",required:!1},{in:"formData",type:"integer",name:"seed",required:!1}],hasSamplesParam:!0},{url:"/text/text/ad-generation/",inputType:"text",outputType:"text",taskName:"ad-generation",models:["gpt-j"],defaultModel:"gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"array",name:"keywords",required:!1}],hasSamplesParam:!1},{url:"/text/text/address-formatting/",inputType:"text",outputType:"text",taskName:"address-formatting",models:["geopy-formatter"],defaultModel:"geopy-formatter",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"address",required:!0}],hasSamplesParam:!1},{url:"/text/text/age-from-name/",inputType:"text",outputType:"text",taskName:"age-from-name",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"name",required:!1}],hasSamplesParam:!1},{url:"/text/text/anonymization/",inputType:"text",outputType:"text",taskName:"anonymization",models:["ms-presidio"],defaultModel:"ms-presidio",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"language",required:!0},{in:"formData",type:"string",name:"entities",required:!0},{in:"formData",type:"string",name:"text",required:!0}],hasSamplesParam:!1},{url:"/text/text/article-generation/",inputType:"text",outputType:"text",taskName:"article-generation",models:["fast-gpt-j"],defaultModel:"fast-gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"title",required:!1}],hasSamplesParam:!1},{url:"/text/text/autocorrect/",inputType:"text",outputType:"text",taskName:"autocorrect",models:["flexudy-t5-base-multi-sentence-doctor"],defaultModel:"flexudy-t5-base-multi-sentence-doctor",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence",required:!0}],hasSamplesParam:!1},{url:"/text/text/bullet-point-generation/",inputType:"text",outputType:"text",taskName:"bullet-point-generation",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1},{in:"formData",type:"integer",name:"bullets",required:!1}],hasSamplesParam:!1},{url:"/text/text/command-generation/",inputType:"text",outputType:"text",taskName:"command-generation",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}],hasSamplesParam:!1},{url:"/text/text/company-categorization/",inputType:"text",outputType:"text",taskName:"company-categorization",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}],hasSamplesParam:!1},{url:"/text/text/company-name-normalization/",inputType:"text",outputType:"text",taskName:"company-name-normalization",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}],hasSamplesParam:!1},{url:"/text/text/company-stock-code/",inputType:"text",outputType:"text",taskName:"company-stock-code",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}],hasSamplesParam:!1},{url:"/text/text/conversation-summarization/",inputType:"text",outputType:"text",taskName:"conversation-summarization",models:["bart-large-xsum-samsum"],defaultModel:"bart-large-xsum-samsum",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}],hasSamplesParam:!1},{url:"/text/text/country-from-name/",inputType:"text",outputType:"text",taskName:"country-from-name",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"name",required:!1}],hasSamplesParam:!1},{url:"/text/text/date-cleaning/",inputType:"text",outputType:"text",taskName:"date-cleaning",models:["dataprep-formatter"],defaultModel:"dataprep-formatter",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"date",required:!0}],hasSamplesParam:!1},{url:"/text/text/emotion-recognition/",inputType:"text",outputType:"text",taskName:"emotion-recognition",models:["distilbert-base-uncased-emotion","mrm8488-t5-base-finetuned-emotion"],defaultModel:"distilbert-base-uncased-emotion",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}],hasSamplesParam:!1},{url:"/text/text/gender-from-name/",inputType:"text",outputType:"text",taskName:"gender-from-name",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"name",required:!1}],hasSamplesParam:!1},{url:"/text/text/gps-address-formatting/",inputType:"text",outputType:"text",taskName:"gps-address-formatting",models:["geopy-formatter"],defaultModel:"geopy-formatter",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"float",name:"latitude",required:!0},{in:"formData",type:"float",name:"longitude",required:!0}],hasSamplesParam:!1},{url:"/text/text/gpt3/",inputType:"text",outputType:"text",taskName:"gpt3",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}],hasSamplesParam:!1},{url:"/text/text/guess-city/",inputType:"text",outputType:"text",taskName:"guess-city",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}],hasSamplesParam:!1},{url:"/text/text/guess-country/",inputType:"text",outputType:"text",taskName:"guess-country",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}],hasSamplesParam:!1},{url:"/text/text/hate-speech-detection/",inputType:"text",outputType:"text",taskName:"hate-speech-detection",models:["byt5-base-tweet-hate-detection","distilbert-base-uncased-emotion"],defaultModel:"distilbert-base-uncased-emotion",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}],hasSamplesParam:!1},{url:"/text/text/headline-generation/",inputType:"text",outputType:"text",taskName:"headline-generation",models:["jpt","michau-t5-base-en-generate-headline"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0},{in:"formData",type:"integer",name:"max_length",required:!0}],hasSamplesParam:!1},{url:"/text/text/intent-classification/",inputType:"text",outputType:"text",taskName:"intent-classification",models:["fast-gpt-j"],defaultModel:"fast-gpt-j",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}],hasSamplesParam:!1},{url:"/text/text/keyword-extraction/",inputType:"text",outputType:"text",taskName:"keyword-extraction",models:["keybert-paraphrase-multilingual-MiniLM-L12-v2"],defaultModel:"keybert-paraphrase-multilingual-MiniLM-L12-v2",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0},{in:"formData",type:"integer",name:"top_k",required:!1}],hasSamplesParam:!1},{url:"/text/text/language-detection/",inputType:"text",outputType:"text",taskName:"language-detection",models:["jpt","toftrup-etal-2021"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}],hasSamplesParam:!1},{url:"/text/text/language-generation/",inputType:"text",outputType:"text",taskName:"language-generation",models:["EleutherAI-gpt-neo-2_7B","bloom-560m"],defaultModel:"bloom-560m",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}],hasSamplesParam:!1},{url:"/text/text/named-entity-recognition/",inputType:"text",outputType:"text",taskName:"named-entity-recognition",models:["dbmdz-bert-large-cased-finetuned-conll03-english"],defaultModel:"dbmdz-bert-large-cased-finetuned-conll03-english",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}],hasSamplesParam:!1},{url:"/text/text/next-sentence-prediction/",inputType:"text",outputType:"text",taskName:"next-sentence-prediction",models:["bert-base-uncased"],defaultModel:"bert-base-uncased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence_1",required:!0},{in:"formData",type:"string",name:"sentence_2",required:!0}],hasSamplesParam:!1},{url:"/text/text/next-word-prediction/",inputType:"text",outputType:"text",taskName:"next-word-prediction",models:["albert-base-v2","bert-base-uncased","distilbert-base-uncased","roberta-base"],defaultModel:"distilbert-base-uncased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence",required:!0},{in:"formData",type:"integer",name:"top_k",required:!0}],hasSamplesParam:!1},{url:"/text/text/programming-language-generation/",inputType:"text",outputType:"text",taskName:"programming-language-generation",models:["sentdex-GPyT"],defaultModel:"sentdex-GPyT",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"code_snippet",required:!0}],hasSamplesParam:!1},{url:"/text/text/punctuation-restoration/",inputType:"text",outputType:"text",taskName:"punctuation-restoration",models:["kredor-punctuate-all"],defaultModel:"kredor-punctuate-all",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence",required:!0}],hasSamplesParam:!1},{url:"/text/text/question-answering/",inputType:"text",outputType:"text",taskName:"question-answering",models:["deepset-roberta-base-squad2","deepset_bert-base-cased-squad2","distilbert-base-cased-distilled-squad","mfeb-albert-xxlarge-v2-squad2","mrm8488-bert-tiny-5-finetuned-squadv2"],defaultModel:"distilbert-base-cased-distilled-squad",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"context",required:!0},{in:"formData",type:"string",name:"question",required:!0},{in:"formData",type:"integer",name:"top_k",required:!1}],hasSamplesParam:!1},{url:"/text/text/sentence-paraphraser/",inputType:"text",outputType:"text",taskName:"sentence-paraphraser",models:["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality","ramsrigouthamg-t5_sentence_paraphraser"],defaultModel:"ramsrigouthamg-t5-large-paraphraser-diverse-high-quality",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"context",required:!0}],hasSamplesParam:!1},{url:"/text/text/sentiment-analysis/",inputType:"text",outputType:"text",taskName:"sentiment-analysis",models:["distilbert-base-uncased","distilbert-base-uncased-finetuned-sst-2-english","zero-shot-classification-facebook-bart-large-mnli"],defaultModel:"distilbert-base-uncased-finetuned-sst-2-english",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0}],hasSamplesParam:!1},{url:"/text/text/similarity/",inputType:"text",outputType:"text",taskName:"similarity",models:["all-MiniLM-L6-v2"],defaultModel:"all-MiniLM-L6-v2",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"sentence_1",required:!0},{in:"formData",type:"string",name:"sentence_2",required:!0}],hasSamplesParam:!1},{url:"/text/text/summarization/",inputType:"text",outputType:"text",taskName:"summarization",models:["all-MiniLM-L6-v2","bart-large-cnn"],defaultModel:"bart-large-cnn",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"text",required:!0},{in:"formData",type:"string",name:"source_language",required:!0},{in:"formData",type:"integer",name:"min_length",required:!1},{in:"formData",type:"integer",name:"max_length",required:!1}],hasSamplesParam:!1},{url:"/text/text/translation/",inputType:"text",outputType:"text",taskName:"translation",models:["facebook-nllb-200-distilled-600M","jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"input_string",required:!0},{in:"formData",type:"string",name:"source_language",required:!0},{in:"formData",type:"string",name:"target_language",required:!0}],hasSamplesParam:!1},{url:"/text/text/vat-country-guessing/",inputType:"text",outputType:"text",taskName:"vat-country-guessing",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}],hasSamplesParam:!1},{url:"/text/text/website-classification/",inputType:"text",outputType:"text",taskName:"website-classification",models:["jpt"],defaultModel:"jpt",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"unknown"},params:[{in:"formData",type:"string",name:"text",required:!1}],hasSamplesParam:!1},{url:"/text/text/word-alignment/",inputType:"text",outputType:"text",taskName:"word-alignment",models:["bert-base-multilingual-cased"],defaultModel:"bert-base-multilingual-cased",inputBodyContentType:"application/x-www-form-urlencoded",outputBodyContentType:{type:"prediction-standard-output",predictionType:"string"},params:[{in:"formData",type:"string",name:"input_string_language_1",required:!0},{in:"formData",type:"string",name:"input_string_language_2",required:!0}],hasSamplesParam:!1}]},3109:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getContentTypeName=void 0,t.getContentTypeName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),r=e.taskName.replace(/-/g,"_").toUpperCase();return"".concat(t,"_").concat(n,"_").concat(r,"_CONTENT_TYPE")}},7896:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getEndpointsByInputOutput=t.getEndpoints=void 0;var r=n(655),o=n(5485);function a(){return o.ENDPOINT_DEFS}t.getEndpoints=a,t.getEndpointsByInputOutput=function(){var e,t,n=a(),o={};try{for(var i=r.__values(n),u=i.next();!u.done;u=i.next()){var p=u.value;p.inputType in o||(o[p.inputType]={}),p.outputType in o[p.inputType]||(o[p.inputType][p.outputType]=[]),o[p.inputType][p.outputType].push(p)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}return o}},5309:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInputEnumParamType=void 0;var r=n(4044);t.getInputEnumParamType=function(e,t){var n=(0,r.capitalizeFirst)(e.inputType),o=(0,r.capitalizeFirst)(e.outputType),a=(0,r.kebabToPascalCase)(e.taskName),i=(0,r.capitalizeFirst)(t.name);return"".concat(n).concat(o).concat(a,"EnumParam").concat(i)}},3485:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInputEnumParamValues=void 0;var r=n(4044);t.getInputEnumParamValues=function(e,t){var n=e.inputType.toUpperCase(),o=e.outputType.toUpperCase(),a=(0,r.kebabToSnakeCase)(e.taskName).toUpperCase(),i=t.name.toUpperCase();return"".concat(n,"_").concat(o,"_").concat(a,"_ENUM_PARAM_").concat(i,"_VALUES")}},1916:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getInputModelType=void 0;var r=n(4044);t.getInputModelType=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Inputs")}},7897:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMethodName=void 0;var r=n(4044);t.getMethodName=function(e){return(0,r.kebabToCamelCase)(e.taskName)}},555:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelTypeName=void 0;var r=n(4044);t.getModelTypeName=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Model")}},797:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getModelValuesName=void 0;var r=n(4044);t.getModelValuesName=function(e){var t=e.inputType.toUpperCase(),n=e.outputType.toUpperCase(),o=(0,r.kebabToSnakeCase)(e.taskName).toUpperCase();return"".concat(t,"_").concat(n,"_").concat(o,"_MODELS")}},7179:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelTypeMultipleSamples=t.getOutputModelTypeOneSample=t.getOutputModelType=void 0;var r=n(4044);t.getOutputModelType=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"Outputs")},t.getOutputModelTypeOneSample=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"OutputsOneSample")},t.getOutputModelTypeMultipleSamples=function(e){var t=(0,r.capitalizeFirst)(e.inputType),n=(0,r.capitalizeFirst)(e.outputType),o=(0,r.kebabToPascalCase)(e.taskName);return"".concat(t).concat(n).concat(o,"OutputsMultipleSamples")}},2168:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getOutputModelTypeOneSample=t.getOutputModelTypeMultipleSamples=t.getOutputModelType=t.getInputEnumParamValues=t.getInputEnumParamType=t.getInputModelType=t.getModelValuesName=t.getModelTypeName=t.getMethodName=t.getContentTypeName=t.getEndpointsByInputOutput=t.getEndpoints=void 0;var r=n(7896);Object.defineProperty(t,"getEndpoints",{enumerable:!0,get:function(){return r.getEndpoints}}),Object.defineProperty(t,"getEndpointsByInputOutput",{enumerable:!0,get:function(){return r.getEndpointsByInputOutput}});var o=n(3109);Object.defineProperty(t,"getContentTypeName",{enumerable:!0,get:function(){return o.getContentTypeName}});var a=n(7897);Object.defineProperty(t,"getMethodName",{enumerable:!0,get:function(){return a.getMethodName}});var i=n(555);Object.defineProperty(t,"getModelTypeName",{enumerable:!0,get:function(){return i.getModelTypeName}});var u=n(797);Object.defineProperty(t,"getModelValuesName",{enumerable:!0,get:function(){return u.getModelValuesName}});var p=n(1916);Object.defineProperty(t,"getInputModelType",{enumerable:!0,get:function(){return p.getInputModelType}});var s=n(5309);Object.defineProperty(t,"getInputEnumParamType",{enumerable:!0,get:function(){return s.getInputEnumParamType}});var _=n(3485);Object.defineProperty(t,"getInputEnumParamValues",{enumerable:!0,get:function(){return _.getInputEnumParamValues}});var T=n(7179);Object.defineProperty(t,"getOutputModelType",{enumerable:!0,get:function(){return T.getOutputModelType}}),Object.defineProperty(t,"getOutputModelTypeMultipleSamples",{enumerable:!0,get:function(){return T.getOutputModelTypeMultipleSamples}}),Object.defineProperty(t,"getOutputModelTypeOneSample",{enumerable:!0,get:function(){return T.getOutputModelTypeOneSample}})},3413:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SDK_VERSION=void 0,t.SDK_VERSION="0.9.2"},4044:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.kebabToCamelCase=t.kebabToSnakeCase=t.kebabToPascalCase=t.uncapitalizeFirst=t.capitalizeFirst=void 0;var r=n(655);function o(e){return e[0].toUpperCase()+e.substring(1)}t.capitalizeFirst=o,t.uncapitalizeFirst=function(e){return e[0].toLowerCase()+e.substring(1)},t.kebabToPascalCase=function(e){return e.split("-").map((function(e){return o(e)})).join("")},t.kebabToSnakeCase=function(e){return e.replace(/-/g,"_")},t.kebabToCamelCase=function(e){var t=e.split("-");return r.__spreadArray([t.shift()],r.__read(t.map((function(e){return o(e)}))),!1).join("")}},8778:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TEXT_TEXT_COMPANY_CATEGORIZATION_CONTENT_TYPE=t.TEXT_TEXT_COMPANY_CATEGORIZATION_MODELS=t.TEXT_TEXT_COMMAND_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_COMMAND_GENERATION_MODELS=t.TEXT_TEXT_BULLET_POINT_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_BULLET_POINT_GENERATION_MODELS=t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE=t.TEXT_TEXT_AUTOCORRECT_MODELS=t.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_ARTICLE_GENERATION_MODELS=t.TEXT_TEXT_ANONYMIZATION_CONTENT_TYPE=t.TEXT_TEXT_ANONYMIZATION_MODELS=t.TEXT_TEXT_AGE_FROM_NAME_CONTENT_TYPE=t.TEXT_TEXT_AGE_FROM_NAME_MODELS=t.TEXT_TEXT_ADDRESS_FORMATTING_CONTENT_TYPE=t.TEXT_TEXT_ADDRESS_FORMATTING_MODELS=t.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_AD_GENERATION_MODELS=t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE=t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=t.IMAGE_TEXT_OCR_CONTENT_TYPE=t.IMAGE_TEXT_OCR_MODELS=t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE=t.IMAGE_TEXT_CLASSIFICATION_MODELS=t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=t.IMAGE_IMAGE_SUPER_RESOLUTION_CONTENT_TYPE=t.IMAGE_IMAGE_SUPER_RESOLUTION_MODELS=t.IMAGE_IMAGE_INPAINTING_CONTENT_TYPE=t.IMAGE_IMAGE_INPAINTING_MODELS=t.IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE=t.IMAGE_IMAGE_GUIDED_INPAINTING_MODELS=t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE=t.IMAGE_IMAGE_FACE_BLURING_MODELS=t.IMAGE_IMAGE_ENHANCEMENT_CONTENT_TYPE=t.IMAGE_IMAGE_ENHANCEMENT_MODELS=t.IMAGE_IMAGE_DEBLURRING_CONTENT_TYPE=t.IMAGE_IMAGE_DEBLURRING_MODELS=t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE=t.IMAGE_IMAGE_COLORIZATION_MODELS=t.IMAGE_IMAGE_BACKGROUND_REPLACEMENT_CONTENT_TYPE=t.IMAGE_IMAGE_BACKGROUND_REPLACEMENT_MODELS=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE=t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=t.AUDIO_TEXT_SPEAKER_GENDER_CLASSIFICATION_CONTENT_TYPE=t.AUDIO_TEXT_SPEAKER_GENDER_CLASSIFICATION_MODELS=t.AUDIO_TEXT_SPEAKER_DIARIZATION_CONTENT_TYPE=t.AUDIO_TEXT_SPEAKER_DIARIZATION_MODELS=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE=t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=void 0,t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE=t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE=t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE=t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=t.TEXT_TEXT_PUNCTUATION_RESTORATION_CONTENT_TYPE=t.TEXT_TEXT_PUNCTUATION_RESTORATION_MODELS=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE=t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE=t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=t.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE=t.TEXT_TEXT_INTENT_CLASSIFICATION_MODELS=t.TEXT_TEXT_HEADLINE_GENERATION_CONTENT_TYPE=t.TEXT_TEXT_HEADLINE_GENERATION_MODELS=t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE=t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=t.TEXT_TEXT_GUESS_COUNTRY_CONTENT_TYPE=t.TEXT_TEXT_GUESS_COUNTRY_MODELS=t.TEXT_TEXT_GUESS_CITY_CONTENT_TYPE=t.TEXT_TEXT_GUESS_CITY_MODELS=t.TEXT_TEXT_GPT3_CONTENT_TYPE=t.TEXT_TEXT_GPT3_MODELS=t.TEXT_TEXT_GPS_ADDRESS_FORMATTING_CONTENT_TYPE=t.TEXT_TEXT_GPS_ADDRESS_FORMATTING_MODELS=t.TEXT_TEXT_GENDER_FROM_NAME_CONTENT_TYPE=t.TEXT_TEXT_GENDER_FROM_NAME_MODELS=t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE=t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=t.TEXT_TEXT_DATE_CLEANING_CONTENT_TYPE=t.TEXT_TEXT_DATE_CLEANING_MODELS=t.TEXT_TEXT_COUNTRY_FROM_NAME_CONTENT_TYPE=t.TEXT_TEXT_COUNTRY_FROM_NAME_MODELS=t.TEXT_TEXT_CONVERSATION_SUMMARIZATION_CONTENT_TYPE=t.TEXT_TEXT_CONVERSATION_SUMMARIZATION_MODELS=t.TEXT_TEXT_COMPANY_STOCK_CODE_CONTENT_TYPE=t.TEXT_TEXT_COMPANY_STOCK_CODE_MODELS=t.TEXT_TEXT_COMPANY_NAME_NORMALIZATION_CONTENT_TYPE=t.TEXT_TEXT_COMPANY_NAME_NORMALIZATION_MODELS=void 0,t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE=t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=t.TEXT_TEXT_WEBSITE_CLASSIFICATION_CONTENT_TYPE=t.TEXT_TEXT_WEBSITE_CLASSIFICATION_MODELS=t.TEXT_TEXT_VAT_COUNTRY_GUESSING_CONTENT_TYPE=t.TEXT_TEXT_VAT_COUNTRY_GUESSING_MODELS=t.TEXT_TEXT_TRANSLATION_CONTENT_TYPE=t.TEXT_TEXT_TRANSLATION_MODELS=t.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE=t.TEXT_TEXT_SUMMARIZATION_MODELS=t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE=t.TEXT_TEXT_SIMILARITY_MODELS=void 0,t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_MODELS=["coqui_english_huge_vocab","openai-whisper-base","openai-whisper-large","openai-whisper-medium","openai-whisper-small","openai-whisper-tiny"],t.AUDIO_TEXT_AUDIO_TRANSCRIPTION_CONTENT_TYPE="multipart/form-data",t.AUDIO_TEXT_SPEAKER_DIARIZATION_MODELS=["pyannote-speaker_diarization"],t.AUDIO_TEXT_SPEAKER_DIARIZATION_CONTENT_TYPE="multipart/form-data",t.AUDIO_TEXT_SPEAKER_GENDER_CLASSIFICATION_MODELS=["inafoss-inaSpeechSegmenter"],t.AUDIO_TEXT_SPEAKER_GENDER_CLASSIFICATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_BACKGROUND_REMOVAL_MODELS=["mobilenet","xception"],t.IMAGE_IMAGE_BACKGROUND_REMOVAL_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_BACKGROUND_REPLACEMENT_MODELS=["mobilenet"],t.IMAGE_IMAGE_BACKGROUND_REPLACEMENT_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_COLORIZATION_MODELS=["deoldify-artistic","deoldify-stable","mlhubber_colorize"],t.IMAGE_IMAGE_COLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_DEBLURRING_MODELS=["CMFNet"],t.IMAGE_IMAGE_DEBLURRING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_ENHANCEMENT_MODELS=["FiveK","LOL"],t.IMAGE_IMAGE_ENHANCEMENT_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_FACE_BLURING_MODELS=["ageitgey"],t.IMAGE_IMAGE_FACE_BLURING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_GUIDED_INPAINTING_MODELS=["stable-diffusion"],t.IMAGE_IMAGE_GUIDED_INPAINTING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_INPAINTING_MODELS=["fcf","lama","latent-diffusion","mat","zits"],t.IMAGE_IMAGE_INPAINTING_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_SUPER_RESOLUTION_MODELS=[],t.IMAGE_IMAGE_SUPER_RESOLUTION_CONTENT_TYPE="multipart/form-data",t.IMAGE_IMAGE_UNCOLORIZATION_MODELS=["v1"],t.IMAGE_IMAGE_UNCOLORIZATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_CLASSIFICATION_MODELS=["alexnet","convnext_base","convnext_large","convnext_small","convnext_tiny","densenet121","densenet161","densenet169","densenet201","efficientnet_b0","efficientnet_b1_v1","efficientnet_b1_v2","efficientnet_b2","efficientnet_b3","efficientnet_b4","efficientnet_b5","efficientnet_b6","efficientnet_b7","efficientnet_v2_l","efficientnet_v2_m","efficientnet_v2_s","googlenet","googlenet_quantized_fbgemm_v1","inception_v3","inception_v3_fbgemm_v1","mnasnet0_5","mnasnet0_75","mnasnet1_0","mnasnet1_3","mobilenet_v2_quantized_qnnpack_v1","mobilenet_v2_v1","mobilenet_v2_v2","mobilenet_v3_large_quantized_qnnpack_v1","mobilenet_v3_large_v1","mobilenet_v3_large_v2","mobilenet_v3_small","regnet_x_16gf_v1","regnet_x_16gf_v2","regnet_x_1_6gf_v1","regnet_x_1_6gf_v2","regnet_x_32gf_v1","regnet_x_32gf_v2","regnet_x_3_2gf_v1","regnet_x_3_2gf_v2","regnet_x_400mf_v1","regnet_x_400mf_v2","regnet_x_800mf_v1","regnet_x_800mf_v2","regnet_x_8gf_v1","regnet_x_8gf_v2","regnet_y_128gf_swag_e2e_v1","regnet_y_128gf_swag_linear_v1","regnet_y_16gf_swag_e2e_v1","regnet_y_16gf_swag_linear_v1","regnet_y_16gf_v1","regnet_y_16gf_v2","regnet_y_1_6gf_v1","regnet_y_1_6gf_v2","regnet_y_32gf_swag_e2e_v1","regnet_y_32gf_swag_linear_v1","regnet_y_32gf_v1","regnet_y_32gf_v2","regnet_y_3_2gf_v1","regnet_y_3_2gf_v2","regnet_y_400mf_v1","regnet_y_400mf_v2","regnet_y_8gf_v1","regnet_y_8gf_v2","resnet152_v1","resnet152_v2","resnet18","resnet18_quantized_fbgemm_v1","resnet34","resnet50_quantized_fbgemm_v1","resnet50_quantized_fbgemm_v2","resnet50_v1","resnet50_v2","resnext101_32x8d_quantized_fbgemm_v1","resnext101_32x8d_quantized_fbgemm_v2","resnext101_32x8d_v1","resnext101_32x8d_v2","resnext101_64x4d_quantized_fbgemm_v1","resnext101_64x4d_v1","resnext50_32x4d_v1","resnext50_32x4d_v2","shufflenet_v2_x0_5","shufflenet_v2_x0_5_quantized_fbgemm_v1","shufflenet_v2_x1_0","shufflenet_v2_x1_0_quantized_fbgemm_v1","shufflenet_v2_x1_5","shufflenet_v2_x1_5_quantized_fbgemm_v1","shufflenet_v2_x2_0","shufflenet_v2_x2_0_quantized_fbgemm_v1","squeezenet1_0","squeezenet1_1","swin_b","swin_s","swin_t","vgg11","vgg11_bn","vgg13","vgg13_bn","vgg16_bn","vgg16_v1","vgg19","vgg19_bn","vit_b_16_swag_e2e_v1","vit_b_16_swag_linear_v1","vit_b_16_v1","vit_b_32","vit_h_14_swag_e2e_v1","vit_h_14_swag_linear_v1","vit_l_16_swag_e2e_v1","vit_l_16_swag_linear_v1","vit_l_16_v1","vit_l_32","wide_resnet101_2_v1","wide_resnet101_2_v2"],t.IMAGE_TEXT_CLASSIFICATION_CONTENT_TYPE="multipart/form-data",t.IMAGE_TEXT_OCR_MODELS=["easy-ocr","tesseract-default","tesseract-denoising","textract-extractor"],t.IMAGE_TEXT_OCR_CONTENT_TYPE="multipart/form-data",t.TEXT_IMAGE_IMAGE_GENERATION_MODELS=["dream-studio","stable-diffusion"],t.TEXT_IMAGE_IMAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AD_GENERATION_MODELS=["gpt-j"],t.TEXT_TEXT_AD_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_ADDRESS_FORMATTING_MODELS=["geopy-formatter"],t.TEXT_TEXT_ADDRESS_FORMATTING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AGE_FROM_NAME_MODELS=["jpt"],t.TEXT_TEXT_AGE_FROM_NAME_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_ANONYMIZATION_MODELS=["ms-presidio"],t.TEXT_TEXT_ANONYMIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_ARTICLE_GENERATION_MODELS=["fast-gpt-j"],t.TEXT_TEXT_ARTICLE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_AUTOCORRECT_MODELS=["flexudy-t5-base-multi-sentence-doctor"],t.TEXT_TEXT_AUTOCORRECT_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_BULLET_POINT_GENERATION_MODELS=["jpt"],t.TEXT_TEXT_BULLET_POINT_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_COMMAND_GENERATION_MODELS=["jpt"],t.TEXT_TEXT_COMMAND_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_COMPANY_CATEGORIZATION_MODELS=["jpt"],t.TEXT_TEXT_COMPANY_CATEGORIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_COMPANY_NAME_NORMALIZATION_MODELS=["jpt"],t.TEXT_TEXT_COMPANY_NAME_NORMALIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_COMPANY_STOCK_CODE_MODELS=["jpt"],t.TEXT_TEXT_COMPANY_STOCK_CODE_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_CONVERSATION_SUMMARIZATION_MODELS=["bart-large-xsum-samsum"],t.TEXT_TEXT_CONVERSATION_SUMMARIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_COUNTRY_FROM_NAME_MODELS=["jpt"],t.TEXT_TEXT_COUNTRY_FROM_NAME_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_DATE_CLEANING_MODELS=["dataprep-formatter"],t.TEXT_TEXT_DATE_CLEANING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_EMOTION_RECOGNITION_MODELS=["distilbert-base-uncased-emotion","mrm8488-t5-base-finetuned-emotion"],t.TEXT_TEXT_EMOTION_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_GENDER_FROM_NAME_MODELS=["jpt"],t.TEXT_TEXT_GENDER_FROM_NAME_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_GPS_ADDRESS_FORMATTING_MODELS=["geopy-formatter"],t.TEXT_TEXT_GPS_ADDRESS_FORMATTING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_GPT3_MODELS=["jpt"],t.TEXT_TEXT_GPT3_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_GUESS_CITY_MODELS=["jpt"],t.TEXT_TEXT_GUESS_CITY_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_GUESS_COUNTRY_MODELS=["jpt"],t.TEXT_TEXT_GUESS_COUNTRY_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_HATE_SPEECH_DETECTION_MODELS=["byt5-base-tweet-hate-detection","distilbert-base-uncased-emotion"],t.TEXT_TEXT_HATE_SPEECH_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_HEADLINE_GENERATION_MODELS=["jpt","michau-t5-base-en-generate-headline"],t.TEXT_TEXT_HEADLINE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_INTENT_CLASSIFICATION_MODELS=["fast-gpt-j"],t.TEXT_TEXT_INTENT_CLASSIFICATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_KEYWORD_EXTRACTION_MODELS=["keybert-paraphrase-multilingual-MiniLM-L12-v2"],t.TEXT_TEXT_KEYWORD_EXTRACTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_DETECTION_MODELS=["jpt","toftrup-etal-2021"],t.TEXT_TEXT_LANGUAGE_DETECTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_LANGUAGE_GENERATION_MODELS=["EleutherAI-gpt-neo-2_7B","bloom-560m"],t.TEXT_TEXT_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_MODELS=["dbmdz-bert-large-cased-finetuned-conll03-english"],t.TEXT_TEXT_NAMED_ENTITY_RECOGNITION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_MODELS=["bert-base-uncased"],t.TEXT_TEXT_NEXT_SENTENCE_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_NEXT_WORD_PREDICTION_MODELS=["albert-base-v2","bert-base-uncased","distilbert-base-uncased","roberta-base"],t.TEXT_TEXT_NEXT_WORD_PREDICTION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_MODELS=["sentdex-GPyT"],t.TEXT_TEXT_PROGRAMMING_LANGUAGE_GENERATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_PUNCTUATION_RESTORATION_MODELS=["kredor-punctuate-all"],t.TEXT_TEXT_PUNCTUATION_RESTORATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_QUESTION_ANSWERING_MODELS=["deepset-roberta-base-squad2","deepset_bert-base-cased-squad2","distilbert-base-cased-distilled-squad","mfeb-albert-xxlarge-v2-squad2","mrm8488-bert-tiny-5-finetuned-squadv2"],t.TEXT_TEXT_QUESTION_ANSWERING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTENCE_PARAPHRASER_MODELS=["ramsrigouthamg-t5-large-paraphraser-diverse-high-quality","ramsrigouthamg-t5_sentence_paraphraser"],t.TEXT_TEXT_SENTENCE_PARAPHRASER_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SENTIMENT_ANALYSIS_MODELS=["distilbert-base-uncased","distilbert-base-uncased-finetuned-sst-2-english","zero-shot-classification-facebook-bart-large-mnli"],t.TEXT_TEXT_SENTIMENT_ANALYSIS_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SIMILARITY_MODELS=["all-MiniLM-L6-v2"],t.TEXT_TEXT_SIMILARITY_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_SUMMARIZATION_MODELS=["all-MiniLM-L6-v2","bart-large-cnn"],t.TEXT_TEXT_SUMMARIZATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_TRANSLATION_MODELS=["facebook-nllb-200-distilled-600M","jpt"],t.TEXT_TEXT_TRANSLATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_VAT_COUNTRY_GUESSING_MODELS=["jpt"],t.TEXT_TEXT_VAT_COUNTRY_GUESSING_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_WEBSITE_CLASSIFICATION_MODELS=["jpt"],t.TEXT_TEXT_WEBSITE_CLASSIFICATION_CONTENT_TYPE="application/x-www-form-urlencoded",t.TEXT_TEXT_WORD_ALIGNMENT_MODELS=["bert-base-multilingual-cased"],t.TEXT_TEXT_WORD_ALIGNMENT_CONTENT_TYPE="application/x-www-form-urlencoded"},2764:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(655);n(9601),n(9720),n(8559),n(8674),r.__exportStar(n(3465),t);var o=r.__importStar(n(3465));t.default=o.default},1551:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PreviewFeatureError=void 0;var r=n(655),o=function(e){function t(){return e.call(this,"This feature is not available without enabling preview feature.")||this}return r.__extends(t,e),t}(Error);t.PreviewFeatureError=o},6117:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNotDefined=t.isDefined=void 0,t.isDefined=function(e){return null!=e},t.isNotDefined=function(e){return null==e}},2683:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.applyMixins=void 0,t.applyMixins=function(e,t){t.forEach((function(t){Object.getOwnPropertyNames(t.prototype).forEach((function(n){Object.defineProperty(e.prototype,n,Object.getOwnPropertyDescriptor(t.prototype,n)||Object.create(null))}))}))}},655:function(e,t,n){"use strict";n.r(t),n.d(t,{__assign:function(){return a},__asyncDelegator:function(){return v},__asyncGenerator:function(){return N},__asyncValues:function(){return O},__await:function(){return g},__awaiter:function(){return _},__classPrivateFieldGet:function(){return b},__classPrivateFieldIn:function(){return S},__classPrivateFieldSet:function(){return A},__createBinding:function(){return l},__decorate:function(){return u},__exportStar:function(){return d},__extends:function(){return o},__generator:function(){return T},__importDefault:function(){return I},__importStar:function(){return C},__makeTemplateObject:function(){return h},__metadata:function(){return s},__param:function(){return p},__read:function(){return m},__rest:function(){return i},__spread:function(){return f},__spreadArray:function(){return y},__spreadArrays:function(){return E},__values:function(){return c}});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var a=function(){return a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a.apply(this,arguments)};function i(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function u(e,t,n,r){var o,a=arguments.length,i=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(i=(a<3?o(i):a>3?o(t,n,i):o(t,n))||i);return a>3&&i&&Object.defineProperty(t,n,i),i}function p(e,t){return function(n,r){t(n,r,e)}}function s(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function _(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{p(r.next(e))}catch(e){a(e)}}function u(e){try{p(r.throw(e))}catch(e){a(e)}}function p(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}p((r=r.apply(e,t||[])).next())}))}function T(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}}var l=Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]};function d(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||l(t,e,n)}function c(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function m(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}function f(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function E(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r}function y(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function g(e){return this instanceof g?(this.v=e,this):new g(e)}function N(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),a=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){a.push([e,t,n,r])>1||u(e,t)}))})}function u(e,t){try{(n=o[e](t)).value instanceof g?Promise.resolve(n.value.v).then(p,s):_(a[0][2],n)}catch(e){_(a[0][3],e)}var n}function p(e){u("next",e)}function s(e){u("throw",e)}function _(e,t){e(t),a.shift(),a.length&&u(a[0][0],a[0][1])}}function v(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:g(e[r](t)),done:"return"===r}:o?o(t):t}:o}}function O(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=c(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}function h(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var x=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function C(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&l(t,e,n);return x(t,e),t}function I(e){return e&&e.__esModule?e:{default:e}}function b(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}function A(e,t,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(e,n):o?o.value=n:t.set(e,n),n}function S(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}},5426:function(){}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r=n(2764);return r.default}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,